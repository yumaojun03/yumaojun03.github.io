<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>紫川秀的博客</title>
  <subtitle>比你优秀的人不可怕,可怕的是比你优秀的人比你更努力。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.yumaojun.net/"/>
  <updated>2018-01-23T06:32:41.000Z</updated>
  <id>https://blog.yumaojun.net/</id>
  
  <author>
    <name>紫川秀</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>企业级Docker镜像仓库harbor的部署和使用</title>
    <link href="https://blog.yumaojun.net/2018/01/23/harbor/"/>
    <id>https://blog.yumaojun.net/2018/01/23/harbor/</id>
    <published>2018-01-23T01:34:05.000Z</published>
    <updated>2018-01-23T06:32:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>部署企业私有仓库往往是很有必要的, 他可以帮助你管理企业的一些敏感镜像, 同时由于Docker Hub的下载速度和GFW的原因, 往往需要将一些无法直接下载的镜像导入本地私有仓库. 而Harbor就是部署企业私有仓库的一个不二之选。<br><a id="more"></a></p>
<h2 id="Harbar简介"><a href="#Harbar简介" class="headerlink" title="Harbar简介"></a>Harbar简介</h2><p>Harbor是VMware公司开源了企业级Registry项目, 其的目标是帮助用户迅速搭建一个企业级的Docker registry服务。它以Docker公司开源的registry为基础，额外提供了如下功能:</p>
<ul>
<li>基于角色的访问控制(Role Based Access Control)</li>
<li>基于策略的镜像复制(Policy based image replication)</li>
<li>镜像的漏洞扫描(Vulnerability Scanning)</li>
<li>AD/LDAP集成(LDAP/AD support)</li>
<li>镜像的删除和空间清理(Image deletion &amp; garbage collection)</li>
<li>友好的管理UI(Graphical user portal)</li>
<li>审计日志(Audit logging)</li>
<li>RESTful API</li>
<li>部署简单(Easy deployment)</li>
</ul>
<h2 id="架构介绍"><a href="#架构介绍" class="headerlink" title="架构介绍"></a>架构介绍</h2><p>这里借用别人一张图:<br><img src="http://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/VKmSsh8NadYLYqNu7t7m83nx76xPS8h4OkFTNOPhnPibbv5OvKFNyqwooccOibB5icia4UJcKBkGWMFBEDz1mNXXlw/0?wx_fmt=png" alt="Harbor Architecture"></p>
<p>Harbor依赖的外部组件:</p>
<ul>
<li>Nginx(Proxy): Harbor的registry,UI,token等服务，通过一个前置的反向代理统一接收浏览器、Docker客户端的请求，并将请求转发给后端不同的服务。</li>
<li>Registry v2: Docker官方镜像仓库, 负责储存Docker镜像，并处理docker push/pull命令。由于我们要对用户进行访问控制，即不同用户对Docker image有不同的读写权限，Registry会指向一个token服务，强制用户的每次docker pull/push请求都要携带一个合法的token, Registry会通过公钥对token进行解密验证。</li>
<li>Database(MySQL)：为core services提供数据库服务，负责储存用户权限、审计日志、Docker image分组信息等数据。</li>
</ul>
<p>Harbor自己组件:</p>
<ul>
<li>Core services(Admin Server): 这是Harbor的核心功能，主要提供以下服务：<ul>
<li>UI：提供图形化界面，帮助用户管理registry上的镜像（image）, 并对用户进行授权。</li>
<li>webhook：为了及时获取registry 上image状态变化的情况， 在Registry上配置webhook，把状态变化传递给UI模块。</li>
<li>Auth服务：负责根据用户权限给每个docker push/pull命令签发token. Docker 客户端向Regiøstry服务发起的请求,如果不包含token，会被重定向到这里，获得token后再重新向Registry进行请求。</li>
<li>API: 提供Harbor RESTful API</li>
</ul>
</li>
<li>Replication Job Service：提供多个 Harbor 实例之间的镜像同步功能。</li>
<li>Log collector：为了帮助监控Harbor运行，负责收集其他组件的log，供日后进行分析。</li>
</ul>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>这里不使用kubernetes来部署, 原因是镜像仓库非常重要, 尽量保证部署和维护的简洁性, 因此这里直接使用compose的方式进行部署。<br>官方提供3种部署Harbor的方式:</p>
<ul>
<li>在线安装: 从Docker Hub下载Harbor的镜像来安装, 由于Docker Hub比较慢, 建议Docker配置好加速器。</li>
<li>离线安装: 这种方式应对与部署主机没联网的情况使用。需要提前下载离线安装包: harbor-offline-installer-<version>.tgz 到本地</version></li>
<li>OVA安装: 这个主要用vCentor环境是使用</li>
</ul>
<p>后面部署时会为Docker配置镜像加速器, 因此会采用在线部署的方式, 部署步骤如下:</p>
<ul>
<li>下载Harbor最新的在线安装包</li>
<li>配置Harbor(harbor.cfg)</li>
<li>运行install.sh来安装和启动Harbor</li>
</ul>
<h3 id="环境要求与准备"><a href="#环境要求与准备" class="headerlink" title="环境要求与准备"></a>环境要求与准备</h3><p>Harbor以容器的形式进行部署, 因此可以被部署到任何支持Docker的Linux发行版, 并且具备如下环境:</p>
<ul>
<li>Python2.7+</li>
<li>Docker Engine 1.10+</li>
<li>Docker Compose 1.6.0+</li>
</ul>
<p>这里使用CentOS7.3的系统, Python2.7系统自带了, 剩下的就是安装Docker和Compose:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@harbor01 ~]<span class="comment"># yum install docker -y</span></div><div class="line">[root@harbor01 ~]<span class="comment"># yum -y install epel-release</span></div><div class="line">[root@harbor01 ~]<span class="comment"># yum install python-pip -y</span></div><div class="line">[root@harbor01 ~]<span class="comment"># pip install docker-compose</span></div><div class="line"><span class="comment"># 查看安装完成的Docker和Compose的版本</span></div><div class="line">[root@harbor01 ~]<span class="comment"># docker version</span></div><div class="line">Client:</div><div class="line"> Version:         1.12.6</div><div class="line"> API version:     1.24</div><div class="line"> Package version: docker-1.12.6-68.gitec8512b.el7.centos.x86_64</div><div class="line"> Go version:      go1.8.3</div><div class="line"> Git commit:      ec8512b/1.12.6</div><div class="line"> Built:           Mon Dec 11 16:08:42 2017</div><div class="line"> OS/Arch:         linux/amd64</div><div class="line">Cannot connect to the Docker daemon. Is the docker daemon running on this host?</div><div class="line">[root@harbor01 ~]<span class="comment"># pip freeze | grep compose</span></div><div class="line">docker-compose==1.18.0</div></pre></td></tr></table></figure></p>
<p>为Docker配置加速器, 方便通过国内镜像服务器快速拉取Docker Hub提供的镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mkdir -p /etc/docker</div><div class="line">tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://v5d7kh0f.mirror.aliyuncs.com"</span>]</div><div class="line">&#125;</div><div class="line">EOF</div><div class="line">systemctl <span class="built_in">enable</span> docker</div><div class="line">systemctl start  docker</div><div class="line">systemctl status  docker</div></pre></td></tr></table></figure></p>
<p><strong>下载安装包</strong><br>到Harbor的GitHub仓库的<a href="https://github.com/vmware/harbor/releases" target="_blank" rel="external">Release页面</a>, 下载最新的在线安装包(如果下载不了, 请从这里下载<a href="https://pan.baidu.com/s/1eTDUW0a" target="_blank" rel="external">百度网盘Harbor安装包</a>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@harbor01 ~]<span class="comment"># wget https://storage.googleapis.com/harbor-releases/harbor-online-installer-v1.3.0.tgz</span></div><div class="line">[root@harbor01 ~]<span class="comment"># tar vxf harbor-online-installer-v1.3.0.tgz</span></div></pre></td></tr></table></figure></p>
<p><strong>配置Harbor</strong><br>harbor的文件文件在叫: harbor.cfg, 这里有几处必要配置需要修改:</p>
<ul>
<li>hostname: 修改成你本机的ip地址</li>
<li>db_password: 数据库root密码</li>
<li><code>harbor_admin_password</code>: harbor初始管理员密码为Harbor12345, 这里最好修改成自己的<br>其他详细的参数请查看Harbor官方文档(见参考)</li>
</ul>
<p><strong>启动Harbor</strong><br>解压完过后再harbor目录下有一个install.sh, 执行它来进行安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@harbor01 harbor]<span class="comment"># ./install.sh</span></div><div class="line">[root@harbor01 harbor]<span class="comment"># docker-compose ps</span></div><div class="line">       Name                     Command               State                                Ports</div><div class="line">------------------------------------------------------------------------------------------------------------------------------</div><div class="line">harbor-adminserver   /harbor/start.sh                 Up</div><div class="line">harbor-db            /usr/<span class="built_in">local</span>/bin/docker-entr ...   Up      3306/tcp</div><div class="line">harbor-jobservice    /harbor/start.sh                 Up</div><div class="line">harbor-log           /bin/sh -c /usr/<span class="built_in">local</span>/bin/ ...   Up      127.0.0.1:1514-&gt;10514/tcp</div><div class="line">harbor-ui            /harbor/start.sh                 Up</div><div class="line">nginx                nginx -g daemon off;             Up      0.0.0.0:443-&gt;443/tcp, 0.0.0.0:4443-&gt;4443/tcp, 0.0.0.0:80-&gt;80/tcp</div><div class="line">registry             /entrypoint.sh serve /etc/ ...   Up      5000/tcp</div></pre></td></tr></table></figure></p>
<p>然后访问:<br><img src="http://oiw1gzfww.bkt.clouddn.com/harbor_page.jpg" alt=""></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>服务安装好了过后, 下面介绍如何通过Docker Client使用Harbor</p>
<h3 id="配置docker客户端使用Harbor"><a href="#配置docker客户端使用Harbor" class="headerlink" title="配置docker客户端使用Harbor"></a>配置docker客户端使用Harbor</h3><p>因为Harbor开启的是HTTP服务, 而不是HTTPS, 所以要修改下Docker的配置:/etc/docker/daemon.json, 添加参数insecure-registries:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@harbor01 ~]<span class="comment"># cat /etc/docker/daemon.json</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://v5d7kh0f.mirror.aliyuncs.com"</span>],</div><div class="line">  <span class="string">"insecure-registries"</span>: [<span class="string">"192.168.204.15"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>修改过后从启docker, 然后从启Harbor服务:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[root@harbor01 harbor]<span class="comment"># systemctl restart docker</span></div><div class="line">[root@harbor01 harbor]<span class="comment"># docker-compose stop</span></div><div class="line">Stopping harbor-jobservice  ... <span class="keyword">done</span></div><div class="line">Stopping harbor-ui          ... <span class="keyword">done</span></div><div class="line">Stopping harbor-db          ... <span class="keyword">done</span></div><div class="line">Stopping registry           ... <span class="keyword">done</span></div><div class="line">Stopping harbor-adminserver ... <span class="keyword">done</span></div><div class="line">Stopping harbor-log         ... <span class="keyword">done</span></div><div class="line">[root@harbor01 harbor]<span class="comment"># docker-compose start</span></div><div class="line">Starting <span class="built_in">log</span>         ... <span class="keyword">done</span></div><div class="line">Starting adminserver ... <span class="keyword">done</span></div><div class="line">Starting registry    ... <span class="keyword">done</span></div><div class="line">Starting ui          ... <span class="keyword">done</span></div><div class="line">Starting mysql       ... <span class="keyword">done</span></div><div class="line">Starting jobservice  ... <span class="keyword">done</span></div><div class="line">Starting proxy       ... <span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<h3 id="镜像的Push和Pull"><a href="#镜像的Push和Pull" class="headerlink" title="镜像的Push和Pull"></a>镜像的Push和Pull</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@harbor01 harbor]<span class="comment"># docker login 192.168.204.15</span></div><div class="line">Username: admin</div><div class="line">Password:</div><div class="line">Login Succeeded</div></pre></td></tr></table></figure>
<p>为了使用Harbor我们需要在Harbor上建立一个项目:kubernetes<br><img src="http://oiw1gzfww.bkt.clouddn.com/harbor-project.jpg" alt=""><br><strong><em>注意</em></strong>: 一定要先有项目 然后按照192.168.204.15/{project-name}/{image-name}[:Tag] 的方式打Tag<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@harbor01 ~]<span class="comment"># docker tag docker.io/nginx:latest 192.168.204.15/kubernetes/nginx:v1.10</span></div><div class="line">[root@harbor01 ~]<span class="comment"># docker push 192.168.204.15/kubernetes/nginx:v1.10</span></div><div class="line">The push refers to a repository [192.168.204.15/kubernetes/nginx]</div><div class="line">a103d141<span class="built_in">fc</span>98: Pushed</div><div class="line">73e2bd445514: Pushed</div><div class="line">2ec5c0a4cb57: Pushed</div><div class="line">v1.10: digest: sha256:926b086e1234b6ae9a11589c4cece66b267890d24d1da388c96dd8795b2ffcfb size: 948</div></pre></td></tr></table></figure></p>
<p>然后在另一台机器上面拉取镜像(记得配置Docker客户端insecure-registries参数, 参考上面):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">~/Blogs » docker pull 192.168.204.15/kubernetes/nginx:v1.10                                                                                                                                                                                                   maojun@maojun-mbp</div><div class="line">v1.10: Pulling from kubernetes/nginx</div><div class="line">e7bb522d92ff: Pull complete</div><div class="line">6edc05228666: Pull complete</div><div class="line">cd866a17e81f: Pull complete</div><div class="line">Digest: sha256:926b086e1234b6ae9a11589c4cece66b267890d24d1da388c96dd8795b2ffcfb</div><div class="line">Status: Downloaded newer image for 192.168.204.15/kubernetes/nginx:v1.10</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://github.com/vmware/harbor" target="_blank" rel="external">Harbor GitHub</a></li>
<li><a href="https://github.com/vmware/harbor/blob/master/docs/installation_guide.md" target="_blank" rel="external">Harbor 安装手册</a></li>
<li><a href="https://github.com/vmware/harbor/blob/master/docs/user_guide.md" target="_blank" rel="external">Harbor 用户手册</a></li>
<li><a href="https://toutiao.io/posts/gbqfhv/preview" target="_blank" rel="external">用 Harbor 和 Kubernetes 构建高可用企业级镜像仓库</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;部署企业私有仓库往往是很有必要的, 他可以帮助你管理企业的一些敏感镜像, 同时由于Docker Hub的下载速度和GFW的原因, 往往需要将一些无法直接下载的镜像导入本地私有仓库. 而Harbor就是部署企业私有仓库的一个不二之选。&lt;br&gt;
    
    </summary>
    
      <category term="运维" scheme="https://blog.yumaojun.net/categories/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="kubernetes" scheme="https://blog.yumaojun.net/categories/%E8%BF%90%E7%BB%B4/kubernetes/"/>
    
    
      <category term="harbor" scheme="https://blog.yumaojun.net/tags/harbor/"/>
    
  </entry>
  
  <entry>
    <title>如何利用kubernetes实现应用的水平扩展(HPA)</title>
    <link href="https://blog.yumaojun.net/2018/01/22/kubernetes-heapster/"/>
    <id>https://blog.yumaojun.net/2018/01/22/kubernetes-heapster/</id>
    <published>2018-01-22T09:10:57.000Z</published>
    <updated>2018-01-22T09:41:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>云计算具有水平弹性的特性，这个是云计算区别于传统IT技术架构的主要特性。对于Kubernetes中的POD集群来说，HPA可以实现很多自动化功能，比如当POD中业务负载上升的时候，可以创建新的POD来保证业务系统稳定运行，当POD中业务负载下降的时候，可以销毁POD来提高资源利用率。<br><a id="more"></a></p>
<h2 id="HPA介绍"><a href="#HPA介绍" class="headerlink" title="HPA介绍"></a>HPA介绍</h2><p>Horizontal Pod Autoscaling，简称HPA，是Kubernetes中实现POD水平自动伸缩的功能。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/" target="_blank" rel="external">Kubernetes Horizontal Pod Autoscaler</a></li>
<li><a href="https://github.com/kubernetes/heapster/blob/master/docs/influxdb.md" target="_blank" rel="external">Run Heapster in a Kubernetes cluster with an InfluxDB backend and a Grafana UI</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;云计算具有水平弹性的特性，这个是云计算区别于传统IT技术架构的主要特性。对于Kubernetes中的POD集群来说，HPA可以实现很多自动化功能，比如当POD中业务负载上升的时候，可以创建新的POD来保证业务系统稳定运行，当POD中业务负载下降的时候，可以销毁POD来提高资源利用率。&lt;br&gt;
    
    </summary>
    
      <category term="运维" scheme="https://blog.yumaojun.net/categories/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="kubernetes" scheme="https://blog.yumaojun.net/categories/%E8%BF%90%E7%BB%B4/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="https://blog.yumaojun.net/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes 1.8.7 离线部署手册</title>
    <link href="https://blog.yumaojun.net/2018/01/18/kubernetes-binary-install/"/>
    <id>https://blog.yumaojun.net/2018/01/18/kubernetes-binary-install/</id>
    <published>2018-01-18T07:07:51.000Z</published>
    <updated>2018-01-22T03:15:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>搭建kubernetes集群最大的麻烦其实不在于其复杂度(相对Openstack集群)而在于有GFW, 所以为了避免墙带来的麻烦, 也为了加深对kubernetes的理解, 这里将使用纯手工离线的方式进行部署(相应的文件我已经下载到百度云盘里面)。<br><a id="more"></a></p>
<h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><p>下面Kubernetes集群搭建需要的版本信息:</p>
<table>
<thead>
<tr>
<th>软件</th>
<th>版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>OS</td>
<td>CentOS Linux release 7.3.1611 (Core)</td>
</tr>
<tr>
<td>Kubernetes</td>
<td>1.8.7</td>
</tr>
<tr>
<td>Docker</td>
<td>1.12.6</td>
</tr>
<tr>
<td>Etcd</td>
<td>3.2.7</td>
</tr>
<tr>
<td>Flannel</td>
<td>0.7.1</td>
</tr>
<tr>
<td>Kubernetes-dashboard</td>
<td>1.7.1</td>
</tr>
</tbody>
</table>
<p>我们将在四台CentOS系统的物理机上部署1master 3node的kubernetes1.8.7集群(截止当前2018.1是最新版本):</p>
<table>
<thead>
<tr>
<th>IP</th>
<th>Role</th>
<th>CPU</th>
<th>Memory</th>
</tr>
</thead>
<tbody>
<tr>
<td>192.168.204.3</td>
<td>master</td>
<td>2核</td>
<td>4G</td>
</tr>
<tr>
<td>192.168.204.6</td>
<td>node</td>
<td>2核</td>
<td>4G</td>
</tr>
<tr>
<td>192.168.204.14</td>
<td>node</td>
<td>2核</td>
<td>4G</td>
</tr>
<tr>
<td>192.168.204.13</td>
<td>node</td>
<td>2核</td>
<td>4G</td>
</tr>
</tbody>
</table>
<h2 id="集群准备"><a href="#集群准备" class="headerlink" title="集群准备"></a>集群准备</h2><p>在开始搭建集群前需要做一些基础准备:</p>
<ol>
<li><p>同步集群的时间<br>理论上systemd系统都自带了时间同步和管理的工具, 使用timedatectl命令确认下, 确保NTP synchronized为yes:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@k8s-apiserver ~]<span class="comment"># timedatectl</span></div><div class="line">      Local time: 六 2018-01-20 02:47:59 EST</div><div class="line">  Universal time: 六 2018-01-20 07:47:59 UTC</div><div class="line">        RTC time: 六 2018-01-20 07:47:59</div><div class="line">       Time zone: America/New_York (EST, -0500)</div><div class="line">     NTP enabled: yes</div><div class="line">NTP synchronized: yes</div><div class="line"> RTC <span class="keyword">in</span> <span class="built_in">local</span> TZ: no</div><div class="line">      DST active: no</div><div class="line"> Last DST change: DST ended at</div><div class="line">                  日 2017-11-05 01:59:59 EDT</div><div class="line">                  日 2017-11-05 01:00:00 EST</div><div class="line"> Next DST change: DST begins (the clock jumps one hour forward) at</div><div class="line">                  日 2018-03-11 01:59:59 EST</div><div class="line">                  日 2018-03-11 03:00:00 EDT</div></pre></td></tr></table></figure>
</li>
<li><p>关闭SELinux<br>SELinux是系统上的沙盒机制, 为了尽快搭建出集群, 先关闭, 如果强调高安全, 可以等集群搭建成功后开启</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 确认SELinux的配置, 如果不是disabled, 请设置成disabled, 然后从启系统</span></div><div class="line">[root@k8s-apiserver ~]<span class="comment"># cat /etc/selinux/config  | grep ^SELINUX=</span></div><div class="line">SELINUX=disabled</div><div class="line"><span class="comment"># 查看当前SELinux是否已经成功关闭</span></div><div class="line">[root@k8s-apiserver ~]<span class="comment"># getenforce</span></div><div class="line">Disabled</div></pre></td></tr></table></figure>
</li>
<li><p>关闭防火墙(搭建成功后可以慢慢开启)<br>systemd系统一般都采用firewalld作为防火墙, 同理如果没关闭 先关闭</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@k8s-apiserver ~]<span class="comment"># systemctl is-enabled firewalld</span></div><div class="line">disabled</div><div class="line"><span class="comment"># 如果未关闭请执行</span></div><div class="line">[root@k8s-apiserver ~]<span class="comment"># systemctl stop  firewalld</span></div><div class="line">[root@k8s-apiserver ~]<span class="comment"># systemctl disable  firewalld</span></div><div class="line">[root@k8s-apiserver ~]<span class="comment"># systemctl is-enabled firewalld</span></div><div class="line">disabled</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h2><p>接下来进入集群的部署阶段, 部署分为如下几个阶段:</p>
<ul>
<li>CA和证书准备</li>
<li>部署kubernetes客户端工具kubectl</li>
<li>node节点的TLS证书引导(TLS Bootstrap)配置准备</li>
<li>部署ETCD</li>
<li>部署master节点</li>
<li>部署node节点</li>
<li>集群测试</li>
<li>部署dashboard应用</li>
</ul>
<p>在进入部署之前, 先看看kubernetes组件的架构:<br><img src="http://oiw1gzfww.bkt.clouddn.com/architecture.png" alt="Kubernetes架构图"></p>
<p>Kubernetes主要由以下几个核心组件组成：</p>
<ul>
<li>etcd保存了整个集群的状态；</li>
<li>apiserver提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制；</li>
<li>controller manager负责维护集群的状态，比如故障检测、自动扩展、滚动更新等；</li>
<li>scheduler负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上；</li>
<li>kubelet负责维持容器的生命周期，同时也负责Volume（CVI）和网络（CNI）的管理；</li>
<li>Container runtime负责镜像管理以及Pod和容器的真正运行（CRI）；</li>
<li>kube-proxy负责为Service提供cluster内部的服务发现和负载均衡；</li>
</ul>
<h3 id="CA和证书准备"><a href="#CA和证书准备" class="headerlink" title="CA和证书准备"></a>CA和证书准备</h3><p>kubernetes是一套分布式系统, 系统的各组件均使用TLS来进行身份的双向确认和通信加密, 本文档使用CloudFlare提供的PKI工具集 cfssl来生成Certificate Authority (CA)和管理证书(openssl已可以, 但是你需要一步一步的填写).</p>
<p>我们需要为每一个kubernetes的组件生成证书, 总结起来如下:</p>
<ul>
<li>kubectl: 用户的CLI工具, 需要为用户生成访问的证书, 这里需要为admin用户颁发1张证书</li>
<li>master: apiserver, controller manager, scheduler, etcd 这4个服务都在master节点上, 因此为他们颁发1张证书</li>
<li>node: kubelet, kube-proxy 由于kubelet的证书是动态颁发的(TLS Bootstra), 因此这里仅需要为kube-proxy颁发1张证书</li>
</ul>
<h4 id="安装cfssl工具"><a href="#安装cfssl工具" class="headerlink" title="安装cfssl工具"></a>安装cfssl工具</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</div><div class="line">chmod +x cfssl_linux-amd64</div><div class="line">mv cfssl_linux-amd64 /usr/<span class="built_in">local</span>/bin/cfssl</div><div class="line"></div><div class="line">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</div><div class="line">chmod +x cfssljson_linux-amd64</div><div class="line">mv cfssljson_linux-amd64 /usr/<span class="built_in">local</span>/bin/cfssljson</div><div class="line"></div><div class="line">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</div><div class="line">chmod +x cfssl-certinfo_linux-amd64</div><div class="line">mv cfssl-certinfo_linux-amd64 /usr/<span class="built_in">local</span>/bin/cfssl-certinfo</div></pre></td></tr></table></figure>
<h4 id="创建CA"><a href="#创建CA" class="headerlink" title="创建CA"></a>创建CA</h4><p>首先我们创建一个目录pki, 后面的操作都在这个目录里面进行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir pki &amp;&amp; <span class="built_in">cd</span> pki</div></pre></td></tr></table></figure></p>
<p><strong>首先创建CA的配置文件: ca-config.json</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 过期时间设置成了 87600h</span></div><div class="line">cat &gt; ca-config.json &lt;&lt;EOF</div><div class="line">&#123;</div><div class="line">  <span class="string">"signing"</span>: &#123;</div><div class="line">    <span class="string">"default"</span>: &#123;</div><div class="line">      <span class="string">"expiry"</span>: <span class="string">"87600h"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"profiles"</span>: &#123;</div><div class="line">      <span class="string">"kubernetes"</span>: &#123;</div><div class="line">        <span class="string">"usages"</span>: [</div><div class="line">            <span class="string">"signing"</span>,</div><div class="line">            <span class="string">"key encipherment"</span>,</div><div class="line">            <span class="string">"server auth"</span>,</div><div class="line">            <span class="string">"client auth"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"expiry"</span>: <span class="string">"87600h"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">EOF</div></pre></td></tr></table></figure></p>
<p>关于CA配置文件里面的参数说明:</p>
<ul>
<li>ca-config.json：可以定义多个 profiles，分别指定不同的过期时间、使用场景等参数；后续在签名证书时使用某个 profile；</li>
<li>signing：表示该证书可用于签名其它证书；生成的 ca.pem 证书中 CA=TRUE；</li>
<li>server auth：表示client可以用该 CA 对server提供的证书进行验证；</li>
<li>client auth：表示server可以用该CA对client提供的证书进行验证；</li>
</ul>
<p><strong>创建CA证书签名请求</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">cat &gt; ca-csr.json &lt;&lt;EOF</div><div class="line">&#123;</div><div class="line">  <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</div><div class="line">  <span class="string">"key"</span>: &#123;</div><div class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</div><div class="line">    <span class="string">"size"</span>: 2048</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"names"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</div><div class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</div><div class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div><div class="line">EOF</div></pre></td></tr></table></figure></p>
<p>关于证书签名请求的参数说明:</p>
<ul>
<li>“CN”：Common Name，kube-apiserver 从证书中提取该字段作为请求的用户名 (User Name)；浏览器使用该字段验证网站是否合法；</li>
<li>“O”：Organization，kube-apiserver 从证书中提取该字段作为请求用户所属的组 (Group)；</li>
</ul>
<p><strong>生成CA证书和私钥</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cfssl gencert -initca ca-csr.json | cfssljson -bare ca</div><div class="line">$ ls ca*</div><div class="line">ca-config.json  ca.csr  ca-csr.json  ca-key.pem  ca.pem</div></pre></td></tr></table></figure></p>
<h4 id="admin用户证书"><a href="#admin用户证书" class="headerlink" title="admin用户证书"></a>admin用户证书</h4><p>后续kube-apiserver使用RBAC对客户端(如 kubelet、kube-proxy、Pod)请求进行授权；<br>kube-apiserver 预定义了一些RBAC使用的RoleBindings, 如cluster-admin将Group system:masters与Role cluster-admin 绑定，该Role授予了调用kube-apiserver的所有API的权限, 意思是凡是system:masters Group的user都拥有cluster-admin的角色。 因此我们在使用kubectl命令时候，才拥有整个集群的管理权限(后面部署了客户端工具方可查看)；<br>因此admin用户证书申请的核心是指定Group: Group system:masters, 这样该用户就有访问APIServer的所有权限的.<br>签名请求参数如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">cat &gt; admin-csr.json &lt;&lt;EOF</div><div class="line">&#123;</div><div class="line">  <span class="string">"CN"</span>: <span class="string">"admin"</span>,</div><div class="line">  <span class="string">"hosts"</span>: [],</div><div class="line">  <span class="string">"key"</span>: &#123;</div><div class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</div><div class="line">    <span class="string">"size"</span>: 2048</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"names"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</div><div class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"O"</span>: <span class="string">"system:masters"</span>,</div><div class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div><div class="line">EOF</div></pre></td></tr></table></figure></p>
<p>生成签名证书:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin</div><div class="line">$ ls admin*</div><div class="line">admin.csr  admin-csr.json  admin-key.pem  admin.pem</div></pre></td></tr></table></figure></p>
<h4 id="master服务证书"><a href="#master服务证书" class="headerlink" title="master服务证书"></a>master服务证书</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">cat &gt; kubernetes-csr.json &lt;&lt;EOF</div><div class="line">&#123;</div><div class="line">    <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</div><div class="line">    <span class="string">"hosts"</span>: [</div><div class="line">      <span class="string">"127.0.0.1"</span>,</div><div class="line">      <span class="string">"192.168.204.3"</span>,</div><div class="line">      <span class="string">"10.254.0.1"</span>,</div><div class="line">      <span class="string">"kubernetes"</span>,</div><div class="line">      <span class="string">"kubernetes.default"</span>,</div><div class="line">      <span class="string">"kubernetes.default.svc"</span>,</div><div class="line">      <span class="string">"kubernetes.default.svc.cluster"</span>,</div><div class="line">      <span class="string">"kubernetes.default.svc.cluster.local"</span></div><div class="line">    ],</div><div class="line">    <span class="string">"key"</span>: &#123;</div><div class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</div><div class="line">        <span class="string">"size"</span>: 2048</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"names"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</div><div class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">            <span class="string">"O"</span>: <span class="string">"k8s"</span>,</div><div class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div><div class="line">EOF</div></pre></td></tr></table></figure>
<p>参数说明:</p>
<ul>
<li>hosts: 如果hosts字段不为空则需要指定授权使用该证书的IP或域名列表，由于该证书后续被etcd集群和kubernetes master集群使用，所以上面分别指定了etcd集群、kubernetes master集群的主机IP和kubernetes服务的服务IP(一般是 kube-apiserver指定的 service-cluster-ip-range 网段的第一个IP，如 10.254.0.1)。</li>
</ul>
<p>生成签名证书:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes</div><div class="line">$ ls kubernetes*</div><div class="line">kubernetes.csr  kubernetes-csr.json  kubernetes-key.pem  kubernetes.pem</div></pre></td></tr></table></figure></p>
<h4 id="node服务证书-仅kube-proxy"><a href="#node服务证书-仅kube-proxy" class="headerlink" title="node服务证书(仅kube-proxy)"></a>node服务证书(仅kube-proxy)</h4><p>kube-apiserver预定义的RoleBinding system:node-proxier 将User system:kube-proxy与Role system:node-proxier绑定，该User具有调用kube-apiserver Proxy相关 API的权限(后面部署了客户端工具后方可查看).<br>因此证书里面通过CN指定user为: system:kube-proxy, 这该证书就是具有了proxy相应的权限.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">cat &gt; kube-proxy-csr.json &lt;&lt;EOF</div><div class="line">&#123;</div><div class="line">  <span class="string">"CN"</span>: <span class="string">"system:kube-proxy"</span>,</div><div class="line">  <span class="string">"hosts"</span>: [],</div><div class="line">  <span class="string">"key"</span>: &#123;</div><div class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</div><div class="line">    <span class="string">"size"</span>: 2048</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"names"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</div><div class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</div><div class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div><div class="line">EOF</div></pre></td></tr></table></figure></p>
<p>生成证书:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes  kube-proxy-csr.json | cfssljson -bare kube-proxy</div><div class="line">$ ls kube-proxy*</div><div class="line">kube-proxy.csr  kube-proxy-csr.json  kube-proxy-key.pem  kube-proxy.pem</div></pre></td></tr></table></figure></p>
<h4 id="分发证书"><a href="#分发证书" class="headerlink" title="分发证书"></a>分发证书</h4><p>将上面生成好的证书分发到master和node节点, 作为kubernetes的配置文件:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 因为我是在master上生成的证书, 仅需cp到master对于目录即可</span></div><div class="line">$ mkdir -pv /etc/kubernetes/pki</div><div class="line">mkdir: 已创建目录 <span class="string">"/etc/kubernetes"</span></div><div class="line">mkdir: 已创建目录 <span class="string">"/etc/kubernetes/pki"</span></div><div class="line">$ cp ~/pki/&#123;admin-key.pem,admin.pem,ca-key.pem,ca.pem,kube-proxy-key.pem,kube-proxy.pem,kubernetes-key.pem,kubernetes.pem&#125; /etc/kubernetes/pki/</div><div class="line">$ ls /etc/kubernetes/pki/</div><div class="line">admin-key.pem  ca-key.pem  kube-proxy-key.pem  kubernetes-key.pem</div><div class="line">admin.pem      ca.pem      kube-proxy.pem      kubernetes.pem</div><div class="line"><span class="comment"># 在node节点上创建目录, 并且copy过去</span></div><div class="line">$ ssh  root@192.168.204.6 <span class="string">'mkdir -pv /etc/kubernetes/pki'</span></div><div class="line">$ scp  ~/pki/&#123;admin-key.pem,admin.pem,ca-key.pem,ca.pem,kube-proxy-key.pem,kube-proxy.pem,kubernetes-key.pem,kubernetes.pem&#125;  root@192.168.204.6:/etc/kubernetes/pki/</div></pre></td></tr></table></figure></p>
<h3 id="部署kubernetes客户端工具kubectl"><a href="#部署kubernetes客户端工具kubectl" class="headerlink" title="部署kubernetes客户端工具kubectl"></a>部署kubernetes客户端工具kubectl</h3><p>客户端工具需要下载: kubernetes-client-linux-amd64.tar.gz(1.8.7), 但是由于墙的存在, 有些无法翻墙的朋友请访问我已经下载好的地址<a href="https://pan.baidu.com/s/1eTgeS5G" target="_blank" rel="external">国内下载</a><br>获取包后进行客户端的安装:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar -xzvf kubernetes-client-linux-amd64.tar.gz</div><div class="line">cp kubernetes/client/bin/kube* /usr/bin/</div></pre></td></tr></table></figure></p>
<p>客户端安装完成后, 需要配置访问凭证, 这里配置证书访问, 证书就是上面生成好的admin的证书<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> KUBE_APISERVER=<span class="string">"https://192.168.204.3:6443"</span></div><div class="line"><span class="comment"># 设置集群参数</span></div><div class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</div><div class="line">  --certificate-authority=/etc/kubernetes/pki/ca.pem \</div><div class="line">  --embed-certs=<span class="literal">true</span> \</div><div class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span></div><div class="line"><span class="comment"># 设置客户端认证参数</span></div><div class="line">kubectl config <span class="built_in">set</span>-credentials admin \</div><div class="line">  --client-certificate=/etc/kubernetes/pki/admin.pem \</div><div class="line">  --embed-certs=<span class="literal">true</span> \</div><div class="line">  --client-key=/etc/kubernetes/pki/admin-key.pem</div><div class="line"><span class="comment"># 设置上下文参数</span></div><div class="line">kubectl config <span class="built_in">set</span>-context kubernetes \</div><div class="line">  --cluster=kubernetes \</div><div class="line">  --user=admin</div><div class="line"><span class="comment"># 设置默认上下文</span></div><div class="line">kubectl config use-context kubernetes</div></pre></td></tr></table></figure></p>
<p>生成的kubeconfig被保存到~/.kube/config文件, 该文件拥有对该集群的最高权限，请妥善保管。</p>
<h3 id="node节点的TLS证书引导-TLS-Bootstrap-配置准备"><a href="#node节点的TLS证书引导-TLS-Bootstrap-配置准备" class="headerlink" title="node节点的TLS证书引导(TLS Bootstrap)配置准备"></a>node节点的TLS证书引导(TLS Bootstrap)配置准备</h3><p>kubelet、kube-proxy 等 Node 机器上的进程与 Master 机器的 kube-apiserver 进程通信时需要认证和授权;<br>kubernetes 1.4开始支持由kube-apiserver为客户端生成TLS证书的<a href="https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/" target="_blank" rel="external">TLS Bootstrapping</a>功能，这样就不需要为每个客户端生成证书了；该功能当前仅支持为 kubelet 生成证书;</p>
<h4 id="创建TLS-Bootstrapping-Token"><a href="#创建TLS-Bootstrapping-Token" class="headerlink" title="创建TLS Bootstrapping Token"></a>创建TLS Bootstrapping Token</h4><p>BOOTSTRAP_TOKEN 将被写入到kube-apiserver使用的token.csv文件和kubelet使用的bootstrap.kubeconfig文件.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> BOOTSTRAP_TOKEN=$(head -c 16 /dev/urandom | od -An -t x | tr <span class="_">-d</span> <span class="string">' '</span>)</div><div class="line">cat &gt; token.csv &lt;&lt;EOF</div><div class="line"><span class="variable">$&#123;BOOTSTRAP_TOKEN&#125;</span>,kubelet-bootstrap,10001,<span class="string">"system:kubelet-bootstrap"</span></div><div class="line">EOF</div><div class="line">$ cat token.csv</div><div class="line"><span class="built_in">fc</span>9702212376b0c73ffc3db3d425227c,kubelet-bootstrap,10001,<span class="string">"system:kubelet-bootstrap"</span></div></pre></td></tr></table></figure>
<h4 id="创建kubelet-bootstrapping-kubeconfig文件"><a href="#创建kubelet-bootstrapping-kubeconfig文件" class="headerlink" title="创建kubelet bootstrapping kubeconfig文件"></a>创建kubelet bootstrapping kubeconfig文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 首先确认token环境变量的值</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$BOOTSTRAP_TOKEN</span></div><div class="line"></div><div class="line"><span class="built_in">export</span> KUBE_APISERVER=<span class="string">"https://192.168.204.3:6443"</span></div><div class="line"></div><div class="line"><span class="comment"># 设置集群参数</span></div><div class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</div><div class="line">  --certificate-authority=/etc/kubernetes/pki/ca.pem \</div><div class="line">  --embed-certs=<span class="literal">true</span> \</div><div class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</div><div class="line">  --kubeconfig=bootstrap.kubeconfig</div><div class="line"></div><div class="line"><span class="comment"># 设置客户端认证参数</span></div><div class="line">kubectl config <span class="built_in">set</span>-credentials kubelet-bootstrap \</div><div class="line">  --token=<span class="variable">$&#123;BOOTSTRAP_TOKEN&#125;</span> \</div><div class="line">  --kubeconfig=bootstrap.kubeconfig</div><div class="line"></div><div class="line"><span class="comment"># 设置上下文参数</span></div><div class="line">kubectl config <span class="built_in">set</span>-context default \</div><div class="line">  --cluster=kubernetes \</div><div class="line">  --user=kubelet-bootstrap \</div><div class="line">  --kubeconfig=bootstrap.kubeconfig</div><div class="line"></div><div class="line"><span class="comment"># 设置默认上下文</span></div><div class="line">kubectl config use-context default --kubeconfig=bootstrap.kubeconfig</div></pre></td></tr></table></figure>
<ul>
<li>–embed-certs 为 true 时表示将 certificate-authority 证书写入到生成的 bootstrap.kubeconfig 文件中；</li>
<li>设置客户端认证参数时没有指定秘钥和证书，后续由 kube-apiserver 自动生成；</li>
</ul>
<h4 id="创建kube-proxy-kubeconfig文件"><a href="#创建kube-proxy-kubeconfig文件" class="headerlink" title="创建kube-proxy kubeconfig文件"></a>创建kube-proxy kubeconfig文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> KUBE_APISERVER=<span class="string">"https://192.168.204.3:6443"</span></div><div class="line"><span class="comment"># 设置集群参数</span></div><div class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</div><div class="line">  --certificate-authority=/etc/kubernetes/pki/ca.pem \</div><div class="line">  --embed-certs=<span class="literal">true</span> \</div><div class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</div><div class="line">  --kubeconfig=kube-proxy.kubeconfig</div><div class="line"><span class="comment"># 设置客户端认证参数</span></div><div class="line">kubectl config <span class="built_in">set</span>-credentials kube-proxy \</div><div class="line">  --client-certificate=/etc/kubernetes/pki/kube-proxy.pem \</div><div class="line">  --client-key=/etc/kubernetes/pki/kube-proxy-key.pem \</div><div class="line">  --embed-certs=<span class="literal">true</span> \</div><div class="line">  --kubeconfig=kube-proxy.kubeconfig</div><div class="line"><span class="comment"># 设置上下文参数</span></div><div class="line">kubectl config <span class="built_in">set</span>-context default \</div><div class="line">  --cluster=kubernetes \</div><div class="line">  --user=kube-proxy \</div><div class="line">  --kubeconfig=kube-proxy.kubeconfig</div><div class="line"><span class="comment"># 设置默认上下文</span></div><div class="line">kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig</div></pre></td></tr></table></figure>
<ul>
<li>设置集群参数和客户端认证参数时 –embed-certs 都为 true，这会将 certificate-authority、client-certificate 和 client-key 指向的证书文件内容写入到生成的 kube-proxy.kubeconfig 文件中；</li>
<li>kube-proxy.pem 证书中 CN 为 system:kube-proxy，kube-apiserver 预定义的 RoleBinding cluster-admin 将User system:kube-proxy 与 Role system:node-proxier 绑定，该 Role 授予了调用 kube-apiserver Proxy 相关 API 的权限；</li>
</ul>
<h4 id="分发kubeconfig文件"><a href="#分发kubeconfig文件" class="headerlink" title="分发kubeconfig文件"></a>分发kubeconfig文件</h4><p>先确认我们刚才生成的文件, 然后将token.csv复制给master节点, bootstrap.kubeconfig和kube-proxy.kubeconfig负责给node节点<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@k8s-apiserver01 TLS_Bootstrapping]<span class="comment"># ls</span></div><div class="line">bootstrap.kubeconfig  kube-proxy.kubeconfig  token.csv</div><div class="line"><span class="comment"># 因为我在master节点上, 所以</span></div><div class="line">$ cp  token.csv /etc/kubernetes/</div><div class="line">$ scp ~/TLS_Bootstrapping/&#123;bootstrap.kubeconfig,kube-proxy.kubeconfig&#125; root@192.168.204.6:/etc/kubernetes/</div></pre></td></tr></table></figure></p>
<h3 id="部署ETCD"><a href="#部署ETCD" class="headerlink" title="部署ETCD"></a>部署ETCD</h3><p>etcd作为kubernetes集群的主数据库, 在安装kubernetes集群之前必须先安装和启动。<br>从etcd官网<a href="https://github.com/coreos/etcd/releases" target="_blank" rel="external">下载etcd的二进制文件压缩包</a>, 由于不翻墙下载速度会非常慢, 因此我已提前下载到<a href="https://pan.baidu.com/s/1eUeto22" target="_blank" rel="external">百度网盘</a></p>
<h4 id="TLS证书确认"><a href="#TLS证书确认" class="headerlink" title="TLS证书确认"></a>TLS证书确认</h4><p>需要为etcd集群创建加密通信的TLS证书, 之前创建的kubernetes证书的hosts字段列表中包含etcd部署地址的IP, 否则后续证书校验会失败;<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@k8s-apiserver01 pki]<span class="comment"># ls /etc/kubernetes/pki/</span></div><div class="line">admin-key.pem  ca-key.pem  kube-proxy-key.pem  kubernetes-key.pem</div><div class="line">admin.pem      ca.pem      kube-proxy.pem      kubernetes.pem</div></pre></td></tr></table></figure></p>
<p>在部署TLS Etcd时我们将要使用: ca.pem, kubernetes-key.pem, kubernetes.pem</p>
<h4 id="部署与配置ETCD"><a href="#部署与配置ETCD" class="headerlink" title="部署与配置ETCD"></a>部署与配置ETCD</h4><p>从上面的百度网盘下载下etcd的二进制包, 然后开始安装:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ tar vxf etcd-v3.2.7-linux-amd64.tar.gz</div><div class="line">$ cp etcd-v3.2.7-linux-amd64/etcd* /usr/<span class="built_in">local</span>/bin/</div></pre></td></tr></table></figure></p>
<p>安装完成后配置成systemd的系统服务, 生成/usr/lib/systemd/system/etcd.service文件, 文件内容如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=Etcd Server</div><div class="line">After=network.target</div><div class="line">After=network-online.target</div><div class="line">Wants=network-online.target</div><div class="line">Documentation=https://github.com/coreos</div><div class="line"></div><div class="line">[Service]</div><div class="line">Type=notify</div><div class="line">WorkingDirectory=/var/lib/etcd/</div><div class="line">EnvironmentFile=-/etc/etcd/etcd.conf</div><div class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/etcd \</div><div class="line">  --name <span class="variable">$&#123;ETCD_NAME&#125;</span> \</div><div class="line">  --cert-file=/etc/kubernetes/pki/kubernetes.pem \</div><div class="line">  --key-file=/etc/kubernetes/pki/kubernetes-key.pem \</div><div class="line">  --peer-cert-file=/etc/kubernetes/pki/kubernetes.pem \</div><div class="line">  --peer-key-file=/etc/kubernetes/pki/kubernetes-key.pem \</div><div class="line">  --trusted-ca-file=/etc/kubernetes/pki/ca.pem \</div><div class="line">  --peer-trusted-ca-file=/etc/kubernetes/pki/ca.pem \</div><div class="line">  --initial-advertise-peer-urls <span class="variable">$&#123;ETCD_INITIAL_ADVERTISE_PEER_URLS&#125;</span> \</div><div class="line">  --listen-peer-urls <span class="variable">$&#123;ETCD_LISTEN_PEER_URLS&#125;</span> \</div><div class="line">  --listen-client-urls <span class="variable">$&#123;ETCD_LISTEN_CLIENT_URLS&#125;</span>,http://127.0.0.1:2379 \</div><div class="line">  --advertise-client-urls <span class="variable">$&#123;ETCD_ADVERTISE_CLIENT_URLS&#125;</span> \</div><div class="line">  --initial-cluster-token <span class="variable">$&#123;ETCD_INITIAL_CLUSTER_TOKEN&#125;</span> \</div><div class="line">  --initial-cluster infra1=https://192.168.204.3:2380 \</div><div class="line">  --initial-cluster-state new \</div><div class="line">  --data-dir=<span class="variable">$&#123;ETCD_DATA_DIR&#125;</span></div><div class="line">Restart=on-failure</div><div class="line">RestartSec=5</div><div class="line">LimitNOFILE=65536</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure></p>
<p>编写etcd服务的配置文件/etc/etcd/etcd.conf, 文件内容如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># [member]</span></div><div class="line">ETCD_NAME=infra1</div><div class="line">ETCD_DATA_DIR=<span class="string">"/var/lib/etcd"</span></div><div class="line">ETCD_LISTEN_PEER_URLS=<span class="string">"https://192.168.204.3:2380"</span></div><div class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">"https://192.168.204.3:2379"</span></div><div class="line"></div><div class="line"><span class="comment">#[cluster]</span></div><div class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="string">"https://192.168.204.3:2380"</span></div><div class="line">ETCD_INITIAL_CLUSTER_TOKEN=<span class="string">"etcd-cluster"</span></div><div class="line">ETCD_ADVERTISE_CLIENT_URLS=<span class="string">"https://192.168.204.3:2379"</span></div></pre></td></tr></table></figure></p>
<h4 id="启动ETCD"><a href="#启动ETCD" class="headerlink" title="启动ETCD"></a>启动ETCD</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 因为在etcd的配置文件里面我们指定了etcd数据目录为: /var/lib/etcd, 因此我们需要提前建好</span></div><div class="line">$ mkdir /var/lib/etcd</div><div class="line">systemctl daemon-reload</div><div class="line">systemctl <span class="built_in">enable</span> etcd</div><div class="line">systemctl start etcd</div><div class="line">systemctl status etcd</div></pre></td></tr></table></figure>
<h4 id="验证ETCD"><a href="#验证ETCD" class="headerlink" title="验证ETCD"></a>验证ETCD</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">etcdctl \</div><div class="line">  --ca-file=/etc/kubernetes/pki/ca.pem \</div><div class="line">  --cert-file=/etc/kubernetes/pki/kubernetes.pem \</div><div class="line">  --key-file=/etc/kubernetes/pki/kubernetes-key.pem \</div><div class="line">  cluster-health</div><div class="line">member 74c10a33d24ef135 is healthy: got healthy result from https://192.168.204.3:2379</div><div class="line">cluster is health</div></pre></td></tr></table></figure>
<h3 id="部署master节点"><a href="#部署master节点" class="headerlink" title="部署master节点"></a>部署master节点</h3><p>Master是Kubernetes的大总管，主要由apiserver、controller manager与scheduler组成, 用于管理所有node.<br>目前这三个组件需要部署在同一台机器上, 注意同时只能有一个kube-scheduler、kube-controller-manager进程处于工作状态，如果运行多个，则需要通过选举产生一个leader</p>
<h4 id="下载最新版本的二进制文件"><a href="#下载最新版本的二进制文件" class="headerlink" title="下载最新版本的二进制文件"></a>下载最新版本的二进制文件</h4><p>master的服务需要下载: kubernetes-server-linux-amd64.tar.gz(1.8.7), 但是由于墙的存在, 有些无法翻墙的朋友请访问我已经下载好的文件:<a href="https://pan.baidu.com/s/1eTgeS5G#list/path=%2F" target="_blank" rel="external">国内下载</a></p>
<p>下载完成后, 安装master服务:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ tar vxf kubernetes-server-linux-amd64.tar.gz</div><div class="line">$ cd kubernetes</div><div class="line">$ cp -r server/bin/&#123;kube-apiserver,kube-controller-manager,kube-scheduler,kubectl,kube-proxy,kubelet&#125; /usr/local/bin/</div></pre></td></tr></table></figure></p>
<h4 id="配置和启动kube-apiserver"><a href="#配置和启动kube-apiserver" class="headerlink" title="配置和启动kube-apiserver"></a>配置和启动kube-apiserver</h4><p>service配置文件/usr/lib/systemd/system/kube-apiserver.service内容:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=Kubernetes API Service</div><div class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</div><div class="line">After=network.target</div><div class="line">After=etcd.service</div><div class="line"></div><div class="line">[Service]</div><div class="line">EnvironmentFile=-/etc/kubernetes/config</div><div class="line">EnvironmentFile=-/etc/kubernetes/apiserver</div><div class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/kube-apiserver \</div><div class="line">        <span class="variable">$KUBE_LOGTOSTDERR</span> \</div><div class="line">        <span class="variable">$KUBE_LOG_LEVEL</span> \</div><div class="line">        <span class="variable">$KUBE_ETCD_SERVERS</span> \</div><div class="line">        <span class="variable">$KUBE_API_ADDRESS</span> \</div><div class="line">        <span class="variable">$KUBE_API_PORT</span> \</div><div class="line">        <span class="variable">$KUBELET_PORT</span> \</div><div class="line">        <span class="variable">$KUBE_ALLOW_PRIV</span> \</div><div class="line">        <span class="variable">$KUBE_SERVICE_ADDRESSES</span> \</div><div class="line">        <span class="variable">$KUBE_ADMISSION_CONTROL</span> \</div><div class="line">        <span class="variable">$KUBE_API_ARGS</span></div><div class="line">Restart=on-failure</div><div class="line">Type=notify</div><div class="line">LimitNOFILE=65536</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure></p>
<p>由于master服务: kube-apiserver、kube-controller-manager、kube-scheduler、kubelet、kube-proxy有一部分相同的配置, 因此抽离了1个config来公用这些配置: /etc/kubernetes/config文件的内容为:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">###</span></div><div class="line"><span class="comment"># kubernetes system config</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># The following values are used to configure various aspects of all</span></div><div class="line"><span class="comment"># kubernetes services, including</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#   kube-apiserver.service</span></div><div class="line"><span class="comment">#   kube-controller-manager.service</span></div><div class="line"><span class="comment">#   kube-scheduler.service</span></div><div class="line"><span class="comment">#   kubelet.service</span></div><div class="line"><span class="comment">#   kube-proxy.service</span></div><div class="line"><span class="comment"># logging to stderr means we get it in the systemd journal</span></div><div class="line">KUBE_LOGTOSTDERR=<span class="string">"--logtostderr=true"</span></div><div class="line"></div><div class="line"><span class="comment"># journal message level, 0 is debug</span></div><div class="line">KUBE_LOG_LEVEL=<span class="string">"--v=0"</span></div><div class="line"></div><div class="line"><span class="comment"># Should this cluster be allowed to run privileged docker containers</span></div><div class="line">KUBE_ALLOW_PRIV=<span class="string">"--allow-privileged=true"</span></div><div class="line"></div><div class="line"><span class="comment"># How the controller-manager, scheduler, and proxy find the apiserver</span></div><div class="line">KUBE_MASTER=<span class="string">"--master=http://192.168.204.3:8080"</span></div></pre></td></tr></table></figure></p>
<p>apiserver配置文件/etc/kubernetes/apiserver内容为:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">###</span></div><div class="line"><span class="comment">## kubernetes system config</span></div><div class="line"><span class="comment">##</span></div><div class="line"><span class="comment">## The following values are used to configure the kube-apiserver</span></div><div class="line"><span class="comment">##</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">## The address on the local server to listen to.</span></div><div class="line"><span class="comment">#KUBE_API_ADDRESS="--insecure-bind-address=sz-pg-oam-docker-test-001.tendcloud.com"</span></div><div class="line">KUBE_API_ADDRESS=<span class="string">"--advertise-address=192.168.204.3 --bind-address=192.168.204.3 --insecure-bind-address=192.168.204.3"</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">## The port on the local server to listen on.</span></div><div class="line"><span class="comment">#KUBE_API_PORT="--port=8080"</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">## Port minions listen on</span></div><div class="line"><span class="comment">#KUBELET_PORT="--kubelet-port=10250"</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">## Comma separated list of nodes in the etcd cluster</span></div><div class="line">KUBE_ETCD_SERVERS=<span class="string">"--etcd-servers=https://192.168.204.3:2379"</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">## Address range to use for services</span></div><div class="line">KUBE_SERVICE_ADDRESSES=<span class="string">"--service-cluster-ip-range=10.254.0.0/16"</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">## default admission control policies</span></div><div class="line">KUBE_ADMISSION_CONTROL=<span class="string">"--admission-control=ServiceAccount,NamespaceLifecycle,NamespaceExists,LimitRanger,ResourceQuota"</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">## Add your own!</span></div><div class="line">KUBE_API_ARGS=<span class="string">"--authorization-mode=Node,RBAC --runtime-config=rbac.authorization.k8s.io/v1beta1 --kubelet-https=true --experimental-bootstrap-token-auth --token-auth-file=/etc/kubernetes/token.csv --service-node-port-range=30000-32767 --tls-cert-file=/etc/kubernetes/pki/kubernetes.pem --tls-private-key-file=/etc/kubernetes/pki/kubernetes-key.pem --client-ca-file=/etc/kubernetes/pki/ca.pem --service-account-key-file=/etc/kubernetes/pki/ca-key.pem --etcd-cafile=/etc/kubernetes/pki/ca.pem --etcd-certfile=/etc/kubernetes/pki/kubernetes.pem --etcd-keyfile=/etc/kubernetes/pki/kubernetes-key.pem --enable-swagger-ui=true --apiserver-count=3 --audit-log-maxage=30 --audit-log-maxbackup=3 --audit-log-maxsize=100 --audit-log-path=/var/lib/audit.log --event-ttl=1h"</span></div></pre></td></tr></table></figure></p>
<p>启动kube-apiserver<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ systemctl daemon-reload</div><div class="line">$ systemctl <span class="built_in">enable</span> kube-apiserver</div><div class="line">$ systemctl start kube-apiserver</div><div class="line">$ systemctl status kube-apiserver</div><div class="line">$ netstat -tlnup  | grep kube</div><div class="line">tcp        0      0 192.168.204.3:6443      0.0.0.0:*               LISTEN      10625/kube-apiserve</div><div class="line">tcp        0      0 192.168.204.3:8080      0.0.0.0:*               LISTEN      10625/kube-apiserve</div></pre></td></tr></table></figure></p>
<h4 id="配置和启动kube-controller-manager"><a href="#配置和启动kube-controller-manager" class="headerlink" title="配置和启动kube-controller-manager"></a>配置和启动kube-controller-manager</h4><p>创建kube-controller-manager的serivce配置文件: /usr/lib/systemd/system/kube-controller-manager.service, 内容如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=Kubernetes Controller Manager</div><div class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</div><div class="line"></div><div class="line">[Service]</div><div class="line">EnvironmentFile=-/etc/kubernetes/config</div><div class="line">EnvironmentFile=-/etc/kubernetes/controller-manager</div><div class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/kube-controller-manager \</div><div class="line">        <span class="variable">$KUBE_LOGTOSTDERR</span> \</div><div class="line">        <span class="variable">$KUBE_LOG_LEVEL</span> \</div><div class="line">        <span class="variable">$KUBE_MASTER</span> \</div><div class="line">        <span class="variable">$KUBE_CONTROLLER_MANAGER_ARGS</span></div><div class="line">Restart=on-failure</div><div class="line">LimitNOFILE=65536</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure></p>
<p>配置文件/etc/kubernetes/controller-manager内容如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">###</span></div><div class="line"><span class="comment"># The following values are used to configure the kubernetes controller-manager</span></div><div class="line"></div><div class="line"><span class="comment"># defaults from config and apiserver should be adequate</span></div><div class="line"></div><div class="line"><span class="comment"># Add your own!</span></div><div class="line">KUBE_CONTROLLER_MANAGER_ARGS=<span class="string">"--address=127.0.0.1 --service-cluster-ip-range=10.254.0.0/16 --cluster-name=kubernetes --cluster-signing-cert-file=/etc/kubernetes/pki/ca.pem --cluster-signing-key-file=/etc/kubernetes/pki/ca-key.pem  --service-account-private-key-file=/etc/kubernetes/pki/ca-key.pem --root-ca-file=/etc/kubernetes/pki/ca.pem --leader-elect=true"</span></div></pre></td></tr></table></figure></p>
<p>启动服务:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ systemctl daemon-reload</div><div class="line">$ systemctl <span class="built_in">enable</span> kube-controller-manager</div><div class="line">$ systemctl start kube-controller-manager</div><div class="line">$ netstat -tlnup | grep controll</div><div class="line">tcp        0      0 127.0.0.1:10252         0.0.0.0:*               LISTEN      10692/kube-controll</div></pre></td></tr></table></figure></p>
<h4 id="配置和启动kube-scheduler"><a href="#配置和启动kube-scheduler" class="headerlink" title="配置和启动kube-scheduler"></a>配置和启动kube-scheduler</h4><p>创建kube-scheduler的serivce配置文件/usr/lib/systemd/system/kube-scheduler.service:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=Kubernetes Scheduler Plugin</div><div class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</div><div class="line"></div><div class="line">[Service]</div><div class="line">EnvironmentFile=-/etc/kubernetes/config</div><div class="line">EnvironmentFile=-/etc/kubernetes/scheduler</div><div class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/kube-scheduler \</div><div class="line">            <span class="variable">$KUBE_LOGTOSTDERR</span> \</div><div class="line">            <span class="variable">$KUBE_LOG_LEVEL</span> \</div><div class="line">            <span class="variable">$KUBE_MASTER</span> \</div><div class="line">            <span class="variable">$KUBE_SCHEDULER_ARGS</span></div><div class="line">Restart=on-failure</div><div class="line">LimitNOFILE=65536</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure></p>
<p>配置文件/etc/kubernetes/scheduler:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">###</span></div><div class="line"><span class="comment"># kubernetes scheduler config</span></div><div class="line"></div><div class="line"><span class="comment"># default config should be adequate</span></div><div class="line"></div><div class="line"><span class="comment"># Add your own!</span></div><div class="line">KUBE_SCHEDULER_ARGS=<span class="string">"--leader-elect=true --address=127.0.0.1"</span></div></pre></td></tr></table></figure></p>
<p>启动服务:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ systemctl daemon-reload</div><div class="line">$ systemctl <span class="built_in">enable</span> kube-scheduler</div><div class="line">$ systemctl start kube-scheduler</div><div class="line">$ netstat -tlnup | grep schedule</div><div class="line">tcp        0      0 127.0.0.1:10251         0.0.0.0:*               LISTEN      10745/kube-schedule</div></pre></td></tr></table></figure></p>
<h4 id="验证master节点功能"><a href="#验证master节点功能" class="headerlink" title="验证master节点功能"></a>验证master节点功能</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ netstat -tlnup | grep kube</div><div class="line">tcp        0      0 127.0.0.1:10251         0.0.0.0:*               LISTEN      10745/kube-schedule</div><div class="line">tcp        0      0 192.168.204.3:6443      0.0.0.0:*               LISTEN      10625/kube-apiserve</div><div class="line">tcp        0      0 127.0.0.1:10252         0.0.0.0:*               LISTEN      10692/kube-controll</div><div class="line">tcp        0      0 192.168.204.3:8080      0.0.0.0:*               LISTEN      10625/kube-apiserve</div><div class="line">$ kubectl get componentstatuses</div><div class="line">NAME                 STATUS    MESSAGE              ERROR</div><div class="line">scheduler            Healthy   ok</div><div class="line">controller-manager   Healthy   ok</div><div class="line">etcd-0               Healthy   &#123;<span class="string">"health"</span>: <span class="string">"true"</span>&#125;</div></pre></td></tr></table></figure>
<p>master安装完成后, 可以查看下上面提到的clusterrolebinding的相关权限:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">$ kubectl get clusterrolebinding system:node-proxier -o yaml</div><div class="line">apiVersion: rbac.authorization.k8s.io/v1</div><div class="line">kind: ClusterRoleBinding</div><div class="line">metadata:</div><div class="line">  annotations:</div><div class="line">    rbac.authorization.kubernetes.io/autoupdate: <span class="string">"true"</span></div><div class="line">  creationTimestamp: 2018-01-19T01:23:53Z</div><div class="line">  labels:</div><div class="line">    kubernetes.io/bootstrapping: rbac-defaults</div><div class="line">  name: system:node-proxier</div><div class="line">  resourceVersion: <span class="string">"75"</span></div><div class="line">  selfLink: /apis/rbac.authorization.k8s.io/v1/clusterrolebindings/system%3Anode-proxier</div><div class="line">  uid: 6916e382-fcb7-11e7-ad2d-fa163e1ab5c5</div><div class="line">roleRef:</div><div class="line">  apiGroup: rbac.authorization.k8s.io</div><div class="line">  kind: ClusterRole</div><div class="line">  name: system:node-proxier</div><div class="line">subjects:</div><div class="line">- apiGroup: rbac.authorization.k8s.io</div><div class="line">  kind: User</div><div class="line">  name: system:kube-proxy</div><div class="line">$ kubectl get clusterrolebinding cluster-admin -o yaml</div><div class="line">apiVersion: rbac.authorization.k8s.io/v1</div><div class="line">kind: ClusterRoleBinding</div><div class="line">metadata:</div><div class="line">  annotations:</div><div class="line">    rbac.authorization.kubernetes.io/autoupdate: <span class="string">"true"</span></div><div class="line">  creationTimestamp: 2018-01-19T01:23:52Z</div><div class="line">  labels:</div><div class="line">    kubernetes.io/bootstrapping: rbac-defaults</div><div class="line">  name: cluster-admin</div><div class="line">  resourceVersion: <span class="string">"72"</span></div><div class="line">  selfLink: /apis/rbac.authorization.k8s.io/v1/clusterrolebindings/cluster-admin</div><div class="line">  uid: 69072637-fcb7-11e7-ad2d-fa163e1ab5c5</div><div class="line">roleRef:</div><div class="line">  apiGroup: rbac.authorization.k8s.io</div><div class="line">  kind: ClusterRole</div><div class="line">  name: cluster-admin</div><div class="line">subjects:</div><div class="line">- apiGroup: rbac.authorization.k8s.io</div><div class="line">  kind: Group</div><div class="line">  name: system:masters</div></pre></td></tr></table></figure></p>
<h3 id="部署node节点"><a href="#部署node节点" class="headerlink" title="部署node节点"></a>部署node节点</h3><p>Node是主要执行容器实例的节点，可视为工作节点。<br>Kubernetes node节点包含如下组件：</p>
<ul>
<li>Flanneld: flannel是容器的网络插件, 负责跨宿主机的容器的网络通信。</li>
<li>Docker1.12.6: cri的实现, docker的安装很简单, 但是需要注意docker的配置。</li>
<li>kubelet: 负责维持容器的生命周期，同时也负责Volume（CVI）和网络（CNI）的管理, 通过二进制安装</li>
<li>kube-proxy: 负责为Service提供cluster内部的服务发现和负载均衡, 通过二进制安装</li>
</ul>
<h4 id="证书与Bootstrap-TLS配置文件确认"><a href="#证书与Bootstrap-TLS配置文件确认" class="headerlink" title="证书与Bootstrap TLS配置文件确认"></a>证书与Bootstrap TLS配置文件确认</h4><p>如果该node节点已经分发了证书, 可以看到如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@k8s-node01 kubernetes]<span class="comment"># ls /etc/kubernetes/pki</span></div><div class="line">admin-key.pem  ca-key.pem  kubelet-client.crt  kubelet.crt  kube-proxy-key.pem  kubernetes-key.pem</div><div class="line">admin.pem      ca.pem      kubelet-client.key  kubelet.key  kube-proxy.pem      kubernetes.pem</div></pre></td></tr></table></figure></p>
<p>如果没分发证书, 到master节点将相应的证书copy过去<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mkdir /etc/kubernetes</div><div class="line">$ scp  root@192.168.204.3:~/pki/&#123;admin-key.pem,admin.pem,ca-key.pem,ca.pem,kube-proxy-key.pem,kube-proxy.pem,kubernetes-key.pem,kubernetes.pem&#125;  /etc/kubernetes/pki/</div><div class="line">$ scp  root@192.168.204.3:~/TLS_Bootstrapping/&#123;bootstrap.kubeconfig,kube-proxy.kubeconfig&#125; /etc/kubernetes/</div></pre></td></tr></table></figure></p>
<h4 id="部署docker和flanneld"><a href="#部署docker和flanneld" class="headerlink" title="部署docker和flanneld"></a>部署docker和flanneld</h4><p>首先我们需要安装docker和flannel<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install -y docker</div><div class="line">yum install -y flannel</div></pre></td></tr></table></figure></p>
<p>service配置文件/usr/lib/systemd/system/flanneld.service的修改:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=Flanneld overlay address etcd agent</div><div class="line">After=network.target</div><div class="line">After=network-online.target</div><div class="line">Wants=network-online.target</div><div class="line">After=etcd.service</div><div class="line">Before=docker.service</div><div class="line"></div><div class="line">[Service]</div><div class="line">Type=notify</div><div class="line">EnvironmentFile=/etc/sysconfig/flanneld</div><div class="line">EnvironmentFile=-/etc/sysconfig/docker-network</div><div class="line">ExecStart=/usr/bin/flanneld-start \</div><div class="line">  -etcd-endpoints=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> \</div><div class="line">  -etcd-prefix=<span class="variable">$&#123;ETCD_PREFIX&#125;</span> \</div><div class="line">  <span class="variable">$FLANNEL_OPTIONS</span></div><div class="line">ExecStartPost=/usr/libexec/flannel/mk-docker-opts.sh -k DOCKER_NETWORK_OPTIONS <span class="_">-d</span> /run/flannel/docker</div><div class="line">Restart=on-failure</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div><div class="line">RequiredBy=docker.service</div></pre></td></tr></table></figure></p>
<p>/etc/sysconfig/flanneld配置文件:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Flanneld configuration options  </span></div><div class="line"></div><div class="line"><span class="comment"># etcd url location.  Point this to the server where etcd runs</span></div><div class="line">ETCD_ENDPOINTS=<span class="string">"https://192.168.204.3:2379"</span></div><div class="line"></div><div class="line"><span class="comment"># etcd config key.  This is the configuration key that flannel queries</span></div><div class="line"><span class="comment"># For address range assignment</span></div><div class="line">ETCD_PREFIX=<span class="string">"/kube-centos/network"</span></div><div class="line"></div><div class="line"><span class="comment"># Any additional options that you want to pass</span></div><div class="line">FLANNEL_OPTIONS=<span class="string">"-etcd-cafile=/etc/kubernetes/pki/ca.pem -etcd-certfile=/etc/kubernetes/pki/kubernetes.pem -etcd-keyfile=/etc/kubernetes/pki/kubernetes-key.pem"</span></div></pre></td></tr></table></figure></p>
<p>在etcd中创建网络配置(因为node节点上没安装etcd客户端, 因此下面的操作在master节点上进行):<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">etcdctl --endpoints=https://192.168.204.3:2379 \</div><div class="line">  --ca-file=/etc/kubernetes/pki/ca.pem \</div><div class="line">  --cert-file=/etc/kubernetes/pki/kubernetes.pem \</div><div class="line">  --key-file=/etc/kubernetes/pki/kubernetes-key.pem \</div><div class="line">  mkdir /kube-centos/network</div><div class="line">etcdctl --endpoints=https://192.168.204.3:2379 \</div><div class="line">  --ca-file=/etc/kubernetes/pki/ca.pem \</div><div class="line">  --cert-file=/etc/kubernetes/pki/kubernetes.pem \</div><div class="line">  --key-file=/etc/kubernetes/pki/kubernetes-key.pem \</div><div class="line">  mk /kube-centos/network/config <span class="string">'&#123;"Network":"172.30.0.0/16","SubnetLen":24,"Backend":&#123;"Type":"vxlan"&#125;&#125;'</span></div></pre></td></tr></table></figure></p>
<p>启动flannel:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">systemctl daemon-reload</div><div class="line">systemctl <span class="built_in">enable</span> flanneld</div><div class="line">systemctl start flanneld</div><div class="line">systemctl status flanneld</div></pre></td></tr></table></figure></p>
<p>验证flannel正常工作(查看etcd是否有网络配置生成,在master节点上操作):<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ etcdctl --endpoints=https://192.168.204.3:2379 \</div><div class="line">  --ca-file=/etc/kubernetes/pki/ca.pem \</div><div class="line">  --cert-file=/etc/kubernetes/pki/kubernetes.pem \</div><div class="line">  --key-file=/etc/kubernetes/pki/kubernetes-key.pem \</div><div class="line">  ls /kube-centos/network/subnets</div><div class="line">/kube-centos/network/subnets/172.30.52.0-24</div><div class="line">$ etcdctl --endpoints=https://192.168.204.3:2379 \</div><div class="line">  --ca-file=/etc/kubernetes/pki/ca.pem \</div><div class="line">  --cert-file=/etc/kubernetes/pki/kubernetes.pem \</div><div class="line">  --key-file=/etc/kubernetes/pki/kubernetes-key.pem \</div><div class="line">  get /kube-centos/network/config</div><div class="line">&#123;<span class="string">"Network"</span>:<span class="string">"172.30.0.0/16"</span>,<span class="string">"SubnetLen"</span>:24,<span class="string">"Backend"</span>:&#123;<span class="string">"Type"</span>:<span class="string">"host-gw"</span>&#125;&#125;</div><div class="line">$ etcdctl --endpoints=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> \</div><div class="line">  --ca-file=/etc/kubernetes/ssl/ca.pem \</div><div class="line">  --cert-file=/etc/kubernetes/ssl/kubernetes.pem \</div><div class="line">  --key-file=/etc/kubernetes/ssl/kubernetes-key.pem \</div><div class="line">  get /kube-centos/network/subnets/172.30.52.0-24</div><div class="line">&#123;<span class="string">"PublicIP"</span>:<span class="string">"192.168.204.6"</span>,<span class="string">"BackendType"</span>:<span class="string">"host-gw"</span>&#125;</div></pre></td></tr></table></figure></p>
<p>配置docker使用flannel网络插件:<br>systemctl命令启动flanneld后，会自动执行./mk-docker-opts.sh -i生成/run/flannel/subnet.env文件, 同时flanneld启动是还生成了一个docker的配置文件:-/run/flannel/docker 我们修改docker启动的配置文件/usr/lib/systemd/system/docker.service加入该文件即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">EnvironmentFile=-/run/flannel/docker</div><div class="line">EnvironmentFile=-/run/flannel/subnet.env</div></pre></td></tr></table></figure></p>
<p>同时为了加速docker官方镜像的下载速度, 配置加速器:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mkdir -p /etc/docker</div><div class="line">tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://v5d7kh0f.mirror.aliyuncs.com"</span>]</div><div class="line">&#125;</div><div class="line">EOF</div></pre></td></tr></table></figure></p>
<p>然后重启docker:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">systemctl daemon-reload</div><div class="line">systemctl restart docker</div><div class="line">systemctl status docker</div></pre></td></tr></table></figure></p>
<h4 id="下载最新的node节点的二进制包"><a href="#下载最新的node节点的二进制包" class="headerlink" title="下载最新的node节点的二进制包"></a>下载最新的node节点的二进制包</h4><p>node节点的二进制包: kubernetes-node-linux-amd64.tar.gz, 已下载到我们百度云盘: <a href="https://pan.baidu.com/s/1eTgeS5G#list/path=%2F" target="_blank" rel="external">国内下载</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ tar vxf kubernetes-node-linux-amd64.tar.gz</div><div class="line">$ <span class="built_in">cd</span> kubernetes</div><div class="line">$ cp  ./node/bin/&#123;kube-proxy,kubelet&#125; /usr/<span class="built_in">local</span>/bin/</div></pre></td></tr></table></figure></p>
<h4 id="部署kubelet"><a href="#部署kubelet" class="headerlink" title="部署kubelet"></a>部署kubelet</h4><p>创建kubelet的service配置文件:/usr/lib/systemd/system/kubelet.service<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=Kubernetes Kubelet Server</div><div class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</div><div class="line">After=docker.service</div><div class="line">Requires=docker.service</div><div class="line"></div><div class="line">[Service]</div><div class="line">EnvironmentFile=-/etc/kubernetes/kubelet</div><div class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/kubelet \</div><div class="line">            <span class="variable">$KUBE_LOGTOSTDERR</span> \</div><div class="line">            <span class="variable">$KUBE_LOG_LEVEL</span> \</div><div class="line">            <span class="variable">$KUBELET_API_SERVER</span> \</div><div class="line">            <span class="variable">$KUBELET_ADDRESS</span> \</div><div class="line">            <span class="variable">$KUBELET_PORT</span> \</div><div class="line">            <span class="variable">$KUBELET_HOSTNAME</span> \</div><div class="line">            <span class="variable">$KUBE_ALLOW_PRIV</span> \</div><div class="line">            <span class="variable">$KUBELET_POD_INFRA_CONTAINER</span> \</div><div class="line">            <span class="variable">$KUBELET_ARGS</span></div><div class="line">Restart=on-failure</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure></p>
<p>创建kubelet的配置文件/etc/kubernetes/kubelet:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">###</span></div><div class="line"><span class="comment">## kubernetes kubelet (minion) config</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">## The address for the info server to serve on (set to 0.0.0.0 or "" for all interfaces)</span></div><div class="line">KUBELET_ADDRESS=<span class="string">"--address=192.168.204.6"</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">## The port for the info server to serve on</span></div><div class="line"><span class="comment">#KUBELET_PORT="--port=10250"</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">## You may leave this blank to use the actual hostname</span></div><div class="line">KUBELET_HOSTNAME=<span class="string">"--hostname-override=192.168.204.6"</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">## location of the api-server</span></div><div class="line"><span class="comment">## COMMENT THIS ON KUBERNETES 1.8+</span></div><div class="line"><span class="comment"># KUBELET_API_SERVER="--api-servers=192.168.204.3:8080"</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">## pod infrastructure container</span></div><div class="line">KUBELET_POD_INFRA_CONTAINER=<span class="string">"--pod-infra-container-image=index.tenxcloud.com/jimmy/pod-infrastructure:rhel7"</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">## Add your own!</span></div><div class="line">KUBELET_ARGS=<span class="string">"--cgroup-driver=systemd --cluster-dns=10.254.0.2 --experimental-bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig --kubeconfig=/etc/kubernetes/kubelet.kubeconfig --cert-dir=/etc/kubernetes/pki --cluster-domain=cluster.local --hairpin-mode promiscuous-bridge --serialize-image-pulls=false --runtime-cgroups=/systemd/system.slice --kubelet-cgroups=/systemd/system.slice"</span></div></pre></td></tr></table></figure></p>
<p>kubelet 启动时向 kube-apiserver 发送 TLS bootstrapping 请求，需要先将 bootstrap token 文件中的 kubelet-bootstrap 用户赋予 system:node-bootstrapper cluster 角色(role)， 然后 kubelet 才能有权限创建认证请求(certificate signing requests):<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 注意 请在master节点上执行, node节点没有配置客户端</span></div><div class="line"><span class="built_in">cd</span> /etc/kubernetes</div><div class="line">kubectl create clusterrolebinding kubelet-bootstrap \</div><div class="line">  --clusterrole=system:node-bootstrapper \</div><div class="line">  --user=kubelet-bootstrap</div></pre></td></tr></table></figure></p>
<p>启动服务:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 启动前手动拉取镜像</span></div><div class="line">docker pull index.tenxcloud.com/jimmy/pod-infrastructure:rhel7</div><div class="line">systemctl daemon-reload</div><div class="line">systemctl <span class="built_in">enable</span> kubelet</div><div class="line">systemctl start kubelet</div><div class="line">systemctl status kubelet</div></pre></td></tr></table></figure></p>
<p>kubelet 首次启动时向kube-apiserver发送证书签名请求，必须通过后kubernetes系统才会将该Node加入到集群, 因此需要在master节点上对这些node的加入进行审计, 通过后会自动为这些node颁发证书<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看未授权的CSR请求</span></div><div class="line">$ kubectl get csr</div><div class="line">NAME                                                   AGE       REQUESTOR           CONDITION</div><div class="line">node-csr-D0qfDbLl4sA2uFOuEkEXt0pqYr0DjqCTNqxyaocvgq0   30m       kubelet-bootstrap   Pending</div><div class="line"><span class="comment"># 通过CSR请求</span></div><div class="line">$ kubectl certificate approve node-csr-D0qfDbLl4sA2uFOuEkEXt0pqYr0DjqCTNqxyaocvgq0</div><div class="line"><span class="comment"># 查看才加入的node</span></div><div class="line">$ kubectl get nodes</div><div class="line">NAME            STATUS    ROLES     AGE       VERSION</div><div class="line">192.168.204.6   Ready     &lt;none&gt;    47s       v1.8.7</div></pre></td></tr></table></figure></p>
<h4 id="部署kub-proxy"><a href="#部署kub-proxy" class="headerlink" title="部署kub-proxy"></a>部署kub-proxy</h4><p>创建 kube-proxy 的service配置文件: /usr/lib/systemd/system/kube-proxy.service<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=Kubernetes Kube-Proxy Server</div><div class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</div><div class="line">After=network.target</div><div class="line"></div><div class="line">[Service]</div><div class="line">EnvironmentFile=-/etc/kubernetes/config</div><div class="line">EnvironmentFile=-/etc/kubernetes/proxy</div><div class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/kube-proxy \</div><div class="line">        <span class="variable">$KUBE_LOGTOSTDERR</span> \</div><div class="line">        <span class="variable">$KUBE_LOG_LEVEL</span> \</div><div class="line">        <span class="variable">$KUBE_MASTER</span> \</div><div class="line">        <span class="variable">$KUBE_PROXY_ARGS</span></div><div class="line">Restart=on-failure</div><div class="line">LimitNOFILE=65536</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure></p>
<p>kube-proxy配置文件/etc/kubernetes/proxy<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">###</span></div><div class="line"><span class="comment"># kubernetes proxy config</span></div><div class="line"></div><div class="line"><span class="comment"># default config should be adequate</span></div><div class="line"></div><div class="line"><span class="comment"># Add your own!</span></div><div class="line">KUBE_PROXY_ARGS=<span class="string">"--bind-address=192.168.204.6 --hostname-override=192.168.204.6 --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig --cluster-cidr=10.254.0.0/16"</span></div></pre></td></tr></table></figure></p>
<p>启动服务:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">systemctl daemon-reload</div><div class="line">systemctl <span class="built_in">enable</span> kube-proxy</div><div class="line">systemctl start kube-proxy</div><div class="line">systemctl status kube-proxy</div><div class="line">$ netstat -tlnup | grep kub</div><div class="line">tcp        0      0 192.168.204.6:10250     0.0.0.0:*               LISTEN      12437/kubelet</div><div class="line">tcp        0      0 192.168.204.6:10255     0.0.0.0:*               LISTEN      12437/kubelet</div><div class="line">tcp        0      0 192.168.204.6:4194      0.0.0.0:*               LISTEN      12437/kubelet</div><div class="line">tcp        0      0 127.0.0.1:10248         0.0.0.0:*               LISTEN      12437/kubelet</div><div class="line">tcp        0      0 127.0.0.1:10249         0.0.0.0:*               LISTEN      12776/kube-proxy</div><div class="line">tcp6       0      0 :::10256                :::*                    LISTEN      12776/kube-proxy</div></pre></td></tr></table></figure></p>
<p>剩下的2个node节点: 192.168.204.13和192.168.204.14 如法炮制, 然后我们在master看看所有已经添加好的node节点:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@k8s-apiserver01 ~]<span class="comment"># kubectl get nodes</span></div><div class="line">NAME             STATUS    ROLES     AGE       VERSION</div><div class="line">192.168.204.13   Ready     &lt;none&gt;    6s        v1.8.7</div><div class="line">192.168.204.14   Ready     &lt;none&gt;    32m       v1.8.7</div><div class="line">192.168.204.6    Ready     &lt;none&gt;    18h       v1.8.7</div></pre></td></tr></table></figure></p>
<h3 id="集群测试"><a href="#集群测试" class="headerlink" title="集群测试"></a>集群测试</h3><p>我们通过部署一个nginx服务来验证集群是否正常工作:<br>为了加快验证的效果, 我们先在node节点上拉取nginx的镜像:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull nginx</div></pre></td></tr></table></figure></p>
<p>然后在master节点上部署服务，并暴露出来:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ kubectl run nginx --replicas=2 --labels=<span class="string">"run=load-balancer-example"</span> --image=nginx  --port=80</div><div class="line">deployment <span class="string">"nginx"</span> created</div><div class="line">$ kubectl expose deployment nginx --type=NodePort --name=example-service</div><div class="line">service <span class="string">"example-service"</span> exposed</div><div class="line">$ kubectl describe svc example-service</div><div class="line">Name:                     example-service</div><div class="line">Namespace:                default</div><div class="line">Labels:                   run=load-balancer-example</div><div class="line">Annotations:              &lt;none&gt;</div><div class="line">Selector:                 run=load-balancer-example</div><div class="line">Type:                     NodePort</div><div class="line">IP:                       10.254.100.109</div><div class="line">Port:                     &lt;<span class="built_in">unset</span>&gt;  80/TCP</div><div class="line">TargetPort:               80/TCP</div><div class="line">NodePort:                 &lt;<span class="built_in">unset</span>&gt;  30924/TCP</div><div class="line">Endpoints:                172.30.52.2:80,172.30.52.3:80</div><div class="line">Session Affinity:         None</div><div class="line">External Traffic Policy:  Cluster</div><div class="line">Events:                   &lt;none&gt;</div></pre></td></tr></table></figure></p>
<p>然后访问暴露出来的服务:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[root@k8s-apiserver01 ~]<span class="comment"># curl 192.168.204.6:30924</span></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</div><div class="line">&lt;style&gt;</div><div class="line">    body &#123;</div><div class="line">        width: 35em;</div><div class="line">        margin: 0 auto;</div><div class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</div><div class="line">    &#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</div><div class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</div><div class="line">working. Further configuration is required.&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;p&gt;For online documentation and support please refer to</div><div class="line">&lt;a href=<span class="string">"http://nginx.org/"</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</div><div class="line">Commercial support is available at</div><div class="line">&lt;a href=<span class="string">"http://nginx.com/"</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h3 id="部署dashboard应用"><a href="#部署dashboard应用" class="headerlink" title="部署dashboard应用"></a>部署dashboard应用</h3><p>这里不是1.7.1的dashboard, yaml文件内容如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Copyright 2017 The Kubernetes Authors.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the "License");</span></div><div class="line"><span class="comment"># you may not use this file except in compliance with the License.</span></div><div class="line"><span class="comment"># You may obtain a copy of the License at</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></div><div class="line"><span class="comment"># distributed under the License is distributed on an "AS IS" BASIS,</span></div><div class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div><div class="line"><span class="comment"># See the License for the specific language governing permissions and</span></div><div class="line"><span class="comment"># limitations under the License.</span></div><div class="line"></div><div class="line"><span class="comment"># Configuration to deploy release version of the Dashboard UI compatible with</span></div><div class="line"><span class="comment"># Kubernetes 1.7.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Example usage: kubectl create -f &lt;this_file&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># ------------------- Dashboard Secret ------------------- #</span></div><div class="line"></div><div class="line">apiVersion: v1</div><div class="line">kind: Secret</div><div class="line">metadata:</div><div class="line">  labels:</div><div class="line">    k8s-app: kubernetes-dashboard</div><div class="line">  name: kubernetes-dashboard-certs</div><div class="line">  namespace: kube-system</div><div class="line"><span class="built_in">type</span>: Opaque</div><div class="line"></div><div class="line">---</div><div class="line"><span class="comment"># ------------------- Dashboard Service Account ------------------- #</span></div><div class="line"></div><div class="line">apiVersion: v1</div><div class="line">kind: ServiceAccount</div><div class="line">metadata:</div><div class="line">  labels:</div><div class="line">    k8s-app: kubernetes-dashboard</div><div class="line">  name: kubernetes-dashboard</div><div class="line">  namespace: kube-system</div><div class="line"></div><div class="line">---</div><div class="line"><span class="comment"># ------------------- Dashboard Role &amp; Role Binding ------------------- #</span></div><div class="line"></div><div class="line">kind: Role</div><div class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</div><div class="line">metadata:</div><div class="line">  name: kubernetes-dashboard-minimal</div><div class="line">  namespace: kube-system</div><div class="line">rules:</div><div class="line">  <span class="comment"># Allow Dashboard to create and watch for changes of 'kubernetes-dashboard-key-holder' secret.</span></div><div class="line">- apiGroups: [<span class="string">""</span>]</div><div class="line">  resources: [<span class="string">"secrets"</span>]</div><div class="line">  verbs: [<span class="string">"create"</span>, <span class="string">"watch"</span>]</div><div class="line">- apiGroups: [<span class="string">""</span>]</div><div class="line">  resources: [<span class="string">"secrets"</span>]</div><div class="line">  <span class="comment"># Allow Dashboard to get, update and delete 'kubernetes-dashboard-key-holder' secret.</span></div><div class="line">  resourceNames: [<span class="string">"kubernetes-dashboard-key-holder"</span>, <span class="string">"kubernetes-dashboard-certs"</span>]</div><div class="line">  verbs: [<span class="string">"get"</span>, <span class="string">"update"</span>, <span class="string">"delete"</span>]</div><div class="line">  <span class="comment"># Allow Dashboard to get metrics from heapster.</span></div><div class="line">- apiGroups: [<span class="string">""</span>]</div><div class="line">  resources: [<span class="string">"services"</span>]</div><div class="line">  resourceNames: [<span class="string">"heapster"</span>]</div><div class="line">  verbs: [<span class="string">"proxy"</span>]</div><div class="line"></div><div class="line">---</div><div class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</div><div class="line">kind: RoleBinding</div><div class="line">metadata:</div><div class="line">  name: kubernetes-dashboard-minimal</div><div class="line">  namespace: kube-system</div><div class="line">roleRef:</div><div class="line">  apiGroup: rbac.authorization.k8s.io</div><div class="line">  kind: Role</div><div class="line">  name: kubernetes-dashboard-minimal</div><div class="line">subjects:</div><div class="line">- kind: ServiceAccount</div><div class="line">  name: kubernetes-dashboard</div><div class="line">  namespace: kube-system</div><div class="line"></div><div class="line">---</div><div class="line"><span class="comment"># ------------------- Dashboard Deployment ------------------- #</span></div><div class="line"></div><div class="line">kind: Deployment</div><div class="line">apiVersion: extensions/v1beta1</div><div class="line">metadata:</div><div class="line">  labels:</div><div class="line">    k8s-app: kubernetes-dashboard</div><div class="line">  name: kubernetes-dashboard</div><div class="line">  namespace: kube-system</div><div class="line">spec:</div><div class="line">  replicas: 1</div><div class="line">  revisionHistoryLimit: 10</div><div class="line">  selector:</div><div class="line">    matchLabels:</div><div class="line">      k8s-app: kubernetes-dashboard</div><div class="line">  template:</div><div class="line">    metadata:</div><div class="line">      labels:</div><div class="line">        k8s-app: kubernetes-dashboard</div><div class="line">    spec:</div><div class="line">      initContainers:</div><div class="line">      - name: kubernetes-dashboard-init</div><div class="line">        image: index.tenxcloud.com/jimmy/kubernetes-dashboard-init-amd64:v1.0.1</div><div class="line">        volumeMounts:</div><div class="line">        - name: kubernetes-dashboard-certs</div><div class="line">          mountPath: /certs</div><div class="line">      containers:</div><div class="line">      - name: kubernetes-dashboard</div><div class="line">        image: index.tenxcloud.com/jimmy/kubernetes-dashboard-amd64:v1.7.1</div><div class="line">        ports:</div><div class="line">        - containerPort: 8443</div><div class="line">          protocol: TCP</div><div class="line">        args:</div><div class="line">          - --tls-key-file=/certs/dashboard.key</div><div class="line">          - --tls-cert-file=/certs/dashboard.crt</div><div class="line">          <span class="comment"># Uncomment the following line to manually specify Kubernetes API server Host</span></div><div class="line">          <span class="comment"># If not specified, Dashboard will attempt to auto discover the API server and connect</span></div><div class="line">          <span class="comment"># to it. Uncomment only if the default does not work.</span></div><div class="line">          <span class="comment"># - --apiserver-host=http://my-address:port</span></div><div class="line">        volumeMounts:</div><div class="line">        - name: kubernetes-dashboard-certs</div><div class="line">          mountPath: /certs</div><div class="line">          <span class="built_in">read</span>Only: <span class="literal">true</span></div><div class="line">          <span class="comment"># Create on-disk volume to store exec logs</span></div><div class="line">        - mountPath: /tmp</div><div class="line">          name: tmp-volume</div><div class="line">        livenessProbe:</div><div class="line">          httpGet:</div><div class="line">            scheme: HTTPS</div><div class="line">            path: /</div><div class="line">            port: 8443</div><div class="line">          initialDelaySeconds: 30</div><div class="line">          timeoutSeconds: 30</div><div class="line">      volumes:</div><div class="line">      - name: kubernetes-dashboard-certs</div><div class="line">        secret:</div><div class="line">          secretName: kubernetes-dashboard-certs</div><div class="line">      - name: tmp-volume</div><div class="line">        emptyDir: &#123;&#125;</div><div class="line">      serviceAccountName: kubernetes-dashboard</div><div class="line">      <span class="comment"># Comment the following tolerations if Dashboard must not be deployed on master</span></div><div class="line">      tolerations:</div><div class="line">      - key: node-role.kubernetes.io/master</div><div class="line">        effect: NoSchedule</div><div class="line"></div><div class="line">---</div><div class="line"><span class="comment"># ------------------- Dashboard Service ------------------- #</span></div><div class="line"></div><div class="line">kind: Service</div><div class="line">apiVersion: v1</div><div class="line">metadata:</div><div class="line">  labels:</div><div class="line">    k8s-app: kubernetes-dashboard</div><div class="line">  name: kubernetes-dashboard</div><div class="line">  namespace: kube-system</div><div class="line">spec:</div><div class="line">  ports:</div><div class="line">    - port: 443</div><div class="line">      targetPort: 8443</div><div class="line">  selector:</div><div class="line">    k8s-app: kubernetes-dashboard</div><div class="line">  <span class="built_in">type</span>: NodePort</div></pre></td></tr></table></figure></p>
<p>为了加快访问, 先在node节点上提前拉取镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker pull index.tenxcloud.com/jimmy/kubernetes-dashboard-init-amd64:v1.0.1</div><div class="line">docker pull index.tenxcloud.com/jimmy/kubernetes-dashboard-amd64:v1.7.1</div></pre></td></tr></table></figure></p>
<p>然后到master节点上 创建应用:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@k8s-apiserver01 apps]<span class="comment"># kubectl create -f kubernetes-dashboard.yaml</span></div><div class="line">secret <span class="string">"kubernetes-dashboard-certs"</span> created</div><div class="line">serviceaccount <span class="string">"kubernetes-dashboard"</span> created</div><div class="line">role <span class="string">"kubernetes-dashboard-minimal"</span> created</div><div class="line">rolebinding <span class="string">"kubernetes-dashboard-minimal"</span> created</div><div class="line">deployment <span class="string">"kubernetes-dashboard"</span> created</div><div class="line">service <span class="string">"kubernetes-dashboard"</span> created</div><div class="line">[root@k8s-apiserver01 apps]<span class="comment"># kubectl -n kube-system get svc kubernetes-dashboard</span></div><div class="line">NAME                   TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE</div><div class="line">kubernetes-dashboard   NodePort   10.254.75.168   &lt;none&gt;        443:32101/TCP   2m</div></pre></td></tr></table></figure></p>
<p>然后访问对用的port<br><img src="http://oiw1gzfww.bkt.clouddn.com/k8s-dashboard.jpg" alt="dashboard-login-page"></p>
<p>登陆dashboard的时候支持kubeconfig和token两种认证方式，kubeconfig中也依赖token字段, 因此之前为admin用户生成的那个配置也缺少token, 所有之前CLI使用的kubeconfig是登录不了的, 下是生成token的操作:<br>首先我们得创建一个admin角色的账号, 比如就叫admin, 我们通过 admin-role.yaml进行创建, 内容如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">kind: ClusterRoleBinding</div><div class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</div><div class="line">metadata:</div><div class="line">  name: admin</div><div class="line">  annotations:</div><div class="line">    rbac.authorization.kubernetes.io/autoupdate: <span class="string">"true"</span></div><div class="line">roleRef:</div><div class="line">  kind: ClusterRole</div><div class="line">  name: cluster-admin</div><div class="line">  apiGroup: rbac.authorization.k8s.io</div><div class="line">subjects:</div><div class="line">- kind: ServiceAccount</div><div class="line">  name: admin</div><div class="line">  namespace: kube-system</div><div class="line">---</div><div class="line">apiVersion: v1</div><div class="line">kind: ServiceAccount</div><div class="line">metadata:</div><div class="line">  name: admin</div><div class="line">  namespace: kube-system</div><div class="line">  labels:</div><div class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></div><div class="line">    addonmanager.kubernetes.io/mode: Reconcile</div></pre></td></tr></table></figure></p>
<p>创建并获取token:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">[root@k8s-apiserver01 apps]<span class="comment"># kubectl create -f admin-role.yaml</span></div><div class="line">clusterrolebinding <span class="string">"admin"</span> created</div><div class="line">serviceaccount <span class="string">"admin"</span> created</div><div class="line">[root@k8s-apiserver01 apps]<span class="comment"># kubectl -n kube-system get secret|grep admin-token</span></div><div class="line">admin-token-2p7l7                  kubernetes.io/service-account-token   3         21s</div><div class="line">[root@k8s-apiserver01 apps]<span class="comment"># kubectl -n kube-system describe secret admin-token-2p7l7</span></div><div class="line">Name:         admin-token-2p7l7</div><div class="line">Namespace:    kube-system</div><div class="line">Labels:       &lt;none&gt;</div><div class="line">Annotations:  kubernetes.io/service-account.name=admin</div><div class="line">              kubernetes.io/service-account.uid=c9aad066-fe8d-11e7-8479-fa163ee6f9f6</div><div class="line"></div><div class="line">Type:  kubernetes.io/service-account-token</div><div class="line"></div><div class="line">Data</div><div class="line">====</div><div class="line">ca.crt:     1359 bytes</div><div class="line">namespace:  11 bytes</div><div class="line">token:      eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi10b2tlbi0ycDdsNyIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJhZG1pbiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6ImM5YWFkMDY2LWZlOGQtMTFlNy04NDc5LWZhMTYzZWU2ZjlmNiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlLXN5c3RlbTphZG1pbiJ9.dv9Rt6EA08KFvYDqHYJlHu188vwfPPxf8Yf0cOhHswOsGWhgsoq-UmugcKcq1nqiVEEXR_EXb657ftPrpKOJrt3pkS2__5FdI-h3D6mKj1-zFae-dj8y_tVi4oaHQExIoxgbrzvBVKTpNxDbzWPKf2CChzRPRWqMmAuPlxK8iSvOf11wGe5B_Fh3okObFk5p_CA1Iz9NFRfD3OSR1_9Bt13SfwdKC3oodVBjrrTB-4O00gYM1RHV54_UmhSVJJkZCfvGhfqVt0h0f1Jmihju_D1OyQY5Lp-LpHN0hP<span class="_">-a</span>8TOidmjNYmy96euiZcDPhnb932GYaA2xVzgcIag72bIzbw</div></pre></td></tr></table></figure></p>
<p>使用获取后的token进行登录<br><img src="http://oiw1gzfww.bkt.clouddn.com/k8s-dash.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭建kubernetes集群最大的麻烦其实不在于其复杂度(相对Openstack集群)而在于有GFW, 所以为了避免墙带来的麻烦, 也为了加深对kubernetes的理解, 这里将使用纯手工离线的方式进行部署(相应的文件我已经下载到百度云盘里面)。&lt;br&gt;
    
    </summary>
    
      <category term="运维" scheme="https://blog.yumaojun.net/categories/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="kubernetes" scheme="https://blog.yumaojun.net/categories/%E8%BF%90%E7%BB%B4/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="https://blog.yumaojun.net/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>OAuth2.0授权机制详解</title>
    <link href="https://blog.yumaojun.net/2017/12/07/oauth2/"/>
    <id>https://blog.yumaojun.net/2017/12/07/oauth2/</id>
    <published>2017-12-07T07:13:08.000Z</published>
    <updated>2017-12-11T14:48:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>当今互联网的功能可谓是五花八门, 而很多服务需要依赖用户已有的数据才能提供服务, 比如云冲印, 需要访问用户云盘里面的照片数据, 再比如ci服务, 需要访问用户代码仓库里面的项目数据。如何安全得将用户的数据暴露给第三方应用访问是一个很常见的需求, 而OAuth的出现就是解决这类问题的。<br><a id="more"></a></p>
<h2 id="传统认证的问题"><a href="#传统认证的问题" class="headerlink" title="传统认证的问题"></a>传统认证的问题</h2><p>在传统的<code>client-server</code>身份认证模型中, 客户端通过资源所有者(resource owner)的凭证来访问服务端的受保护的资源， 为了让第三方应用访问受限资源， 则第三方应用必须分享资源所有者的凭证,<br>这就产生了一些问题和局限性：</p>
<ol>
<li>Third-party app都需要存储resource owner的凭证(credentials), 以备将来之用, 而credentials往往都是明文</li>
<li>servers必须支持credential认证，也就是用户名/密码的认证</li>
<li>Third-party app获取的访问resource owner的所有资源的权限，并且无时间和子集限制</li>
<li>resource owner不能单独撤销某一个Third-party app的资源访问权限，而撤销方法只能通过修改credential完成，这将撤销掉所有Third-party app的资源访问权限</li>
<li>任何一个 Third-party app 的密码泄露，都将导致用户数据的泄露</li>
</ol>
<p>举一个简单一点的栗子:</p>
<blockquote>
<p>你有一座别墅, 这个别墅是你的资产, 清洁公司提供别墅清洁服务(第三方服务商), 园艺公司提供修剪花园的服务(第三方服务商), 而进入你别墅的凭证就是别墅的钥匙, 如果你直接将钥匙(资产访问凭证)给这2个服务商, 这是很危险的, 因为他们也可以复制你的钥匙, 此时你的别墅的安全体系就崩塌了, 假如你真的很信任他们, 但是如果园艺公司的人有问题, 他可能盗走了你给他的钥匙, 此时咋办, 唯有换锁, 但是锁换了 别墅的清洁服务也会受到影响, 因此你会发现 把钥匙直接给第三方是很不安全的, 会引发很多安全隐患问题。</p>
</blockquote>
<h2 id="OAuth2的解决思路"><a href="#OAuth2的解决思路" class="headerlink" title="OAuth2的解决思路"></a>OAuth2的解决思路</h2><p>对于上面的栗子, 当有多个第三方服务商要访问我们的资源时(进入别墅), 仅通过1把锁的方式来保证资产的安全访问是很成问题的, 因此我们需要一层中间层来管理这些人的访问权限, 常见的做法是招一个管家, 每次访问时由管家询问别墅主人进行授权。</p>
<p>OAuth的实现方式与此类似, OAuth在”客户端”(第三方服务)与”服务提供商”(用户自己的资产服务)之间，设置了一个授权层(类似于上面的管家)。”客户端”不能直接登录”服务提供商”(第三方无法直接进入别墅), 只能登录授权层(询问管家)，以此将用户(资产的主人)与客户端(第三方)区分开来。</p>
<p>“客户端”登录授权层所用的令牌(token), 与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。”客户端”登录授权层以后，”服务提供商”根据令牌的权限范围和有效期，向”客户端”开放用户资产访问的权限。</p>
<p>具体过程可以用以下这张图来描述(图中client就代表中间层):<br><img src="http://oiw1gzfww.bkt.clouddn.com/layer_oauth2.0.png" alt=""></p>
<h2 id="OAuth2简介"><a href="#OAuth2简介" class="headerlink" title="OAuth2简介"></a>OAuth2简介</h2><p>OAuth(开放授权)是一个开放标准，允许用户让第三方应用访问该用户在某一网站上存储的私密的资源(如照片，视频，联系人列表)，而无需将用户名和密码提供给第三方应用。</p>
<p>OAuth1.0在2007年的12月底发布并迅速成为工业标准, 在OAuth1.0中通过HMAC和token secret加密并发送的方式为第三方应用颁发一个有效期非常长的token(典型的是一年有效期或者无有效期限制)。</p>
<p>OAuth2.0在2012年10月协议正式发布为RFC 6749. 现在很多开放平台都是使用的OAuth 2.0协议作为支撑。比如百度开发平台, 微薄开放平台, 微信开放平台, Google以及Facebook的开放服务, 显然OAuth2.0已经成为了下一代的“用户验证和授权”的互联网标准协议。但是, 值得注意的是OAuth 2.0 的出现，将完全取代OAuth 1.0, 并且2.0完全不兼容1.0， 所有1.0将废弃。</p>
<p>相对于OAuth1.0中发行一个有效期非常长的token, OAuth2.0采用短有效期token(access token)和长生命周期(refresh token)的方式, 这将允许客户端无需用户再次操作而获取一个新的access token，并且也限制了access token的有效期。</p>
<p>OAuth2.0将角色进行了拆分, 分为:</p>
<ul>
<li>Authorization Server: 负责获取用户的授权并且发布token</li>
<li>Resource Server: 负责处理API calls</li>
</ul>
<p>在扩展性上得到了进一步提升, 而且这种方式极其方便开发分布式应用, 是微服务时代授权中心的不二之选。</p>
<h2 id="OAuth2的应用场景"><a href="#OAuth2的应用场景" class="headerlink" title="OAuth2的应用场景"></a>OAuth2的应用场景</h2><p>现在很多网站都允许通过Google, QQ, 新浪, 微信等账号直接登录网站，这就是OAuth最常见的一种使用场景，他让第三方应用访问你存储在QQ或者微信上的用户信息, 比如拉勾网:<br><img src="http://oiw1gzfww.bkt.clouddn.com/lagou_oauth2.0.png" alt=""><br>当你点击任意一个时, 都将会跳转到他们的认证服务器进行认证, 所以第三方应用是不会获取用户的credential(用户名和密码), 并且可以选择哪些资源被访问， 而且访问也是有时效性的， 一般在1小时或者2个小时后 访问token就会过期。<br><img src="http://oiw1gzfww.bkt.clouddn.com/lagou1_oauth2.0.png" alt=""></p>
<p>凡是用户自己的数据, 都可以通过OAuth2来开放给第三方应用访问, 上面这种通过访问用户的profile信息实现第三方登录仅仅是比较普遍而已, 你也可以分享你对资源的其他权限, 比如微薄可以让第三方应用访问用户发表微薄,以及分享微薄:<br><img src="http://www.sinaimg.cn/blog/developer/wiki/OAuth2_intro.png" alt=""></p>
<p>总之通过OAuth2.0用户可以选择性的暴露自己的信息, 甚至是API的访问权限。比如授权某些第三方应用可以删除你的微薄信息。</p>
<h2 id="OAuth2的授权流程"><a href="#OAuth2的授权流程" class="headerlink" title="OAuth2的授权流程"></a>OAuth2的授权流程</h2><p>在OAuth 2.0定义了4种角色，以上面提到的应用场景的例子进行说明:</p>
<ul>
<li>Resource Owner: 资源所有者，这里指的QQ的最终用户我，  而资源指我存储在QQ服务里面的一些个人信息: 昵称、头像、性别等。</li>
<li>Resource Server: 资源服务器，及保存我qq昵称、头像、性别这些资源的后端服务, 一般需要通过access_token来访问这些受保护的资源。</li>
<li>Client: 第三方应用， 这里指代拉钩网</li>
<li>Authorization Server: 授权服务器，这里指qq的授权服务器, 及提供授权确认页面的后端授权服务。当用户认证和授权成功后,由该服务向client(第三方应用)颁发access_token</li>
</ul>
<h3 id="授权流程"><a href="#授权流程" class="headerlink" title="授权流程"></a>授权流程</h3><p>围绕着这4个概念, 我们来说明下OAuth2.0的授权流程:<br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b10000_10000&amp;sec=1512645676&amp;di=8e090cb8fcd158a0f7a78e264f026635&amp;src=http://img2.shangxueba.com/img/kaifa/20140904/10/5BC0114C4E4C04866AADE7D26D2A83A4.bmp" alt=""></p>
<ol>
<li>第三方应用请求资源所有者授权, 授权请求往往通过中转到授权服务来验证资源所有者的身份, 比如应用场景里面那些需要用户登录的页面</li>
<li>第三方应用获得资源所有者的授权, 比如应用场景里面需要用户点击的授权按钮, OAuth2定义了4种授权的方式,简称授权模式, 后面马上讲到,当然你也可以扩展自己的授权模式。</li>
<li>第三方应用根据用户的授权 向授权服务 请求访问资源的token</li>
<li>授权服务 根据用户的授权 返回给第三方应用访问资源的token</li>
<li>第三方应用根据获取到的token 向资源服务 请求资源</li>
<li>资源服务 响应资源给第三方应用</li>
</ol>
<p>由此可见流程的关键在于第二部(2), 因为这里是Authorization layer, 它决定了用户提供的授权批准信息以何种形式返回给client让其凭借此信息获取访问令牌(access token)</p>
<h3 id="客户端的授权模式"><a href="#客户端的授权模式" class="headerlink" title="客户端的授权模式"></a>客户端的授权模式</h3><p>授权许可(Authorization Grant)是一个代表资源所有者访问自己资源的一种凭证, 用于第三方应用申请访问令牌(access token), oauth定义了4种授权模式:</p>
<ul>
<li>授权码模式（authorization code）</li>
<li>简化模式（implicit）</li>
<li>密码模式（resource owner password credentials）</li>
<li>客户端模式（client credentials）</li>
</ul>
<p>每一种模式应对不同的授权场景, 如果oauth定义的这4种模式无法满足你的授权需求, 你可以自定义一种授权模式进行实现, 因此灵活性上有很大的保证。</p>
<h4 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h4><p>授权码模式(authorization code)是功能最完整、流程最严密的授权模式, 也是各大开放平台主要使用的模式, 它的特点就是在client与resource owner直接加入一层授权服务(authorization server)作为中介, 规避了resource owner和client直接交互产生的安全隐患, 该模式完美的解决了之前提到的传统<code>client-server</code>认证模式中的第三方应用访问资产所有者数据的难题。</p>
<p>应用场景: 第三方应用需要访问资产所有者的数据。并且第三方应用有自己的服务端, 也就是常见的<code>Server-Side Application</code><br>典型应用: 第三方登录, 比如上面提到的场景<br>流程图:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">+----------+</div><div class="line">| Resource |</div><div class="line">|   Owner  |</div><div class="line">|          |</div><div class="line">+----------+</div><div class="line">     ^</div><div class="line">     |</div><div class="line">    (B)</div><div class="line">+----|-----+          Client Identifier      +---------------+</div><div class="line">|         -+----(A)-- &amp; Redirection URI ----&gt;|               |</div><div class="line">|  User-   |                                 | Authorization |</div><div class="line">|  Agent  -+----(B)-- User authenticates ---&gt;|     Server    |</div><div class="line">|          |                                 |               |</div><div class="line">|         -+----(C)-- Authorization Code ---&lt;|               |</div><div class="line">+-|----|---+                                 +---------------+</div><div class="line">  |    |                                         ^      v</div><div class="line">(A)  (C)                                         |      |</div><div class="line">  |    |                                         |      |</div><div class="line">  ^    v                                         |      |</div><div class="line">+---------+                                      |      |</div><div class="line">|         |&gt;---(D)-- Authorization Code ---------&apos;      |</div><div class="line">|  Client |          &amp; Redirection URI                  |</div><div class="line">|         |                                             |</div><div class="line">|         |&lt;---(E)----- Access Token -------------------&apos;</div><div class="line">+---------+       (w/ Optional Refresh Token)</div></pre></td></tr></table></figure></p>
<p><strong>A. 用户通过浏览器访问授权服务器, 一般是第三方应用放置链接, 将用户引导至相应的授权服务器</strong><br>比如以上面拉勾为例, 他会放置有可能存储用户profile信息的授权服务器的访问地址:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/oauth20/auth_sinaWeiboProvider.html"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"icon_wb"</span> <span class="attr">title</span>=<span class="string">"使用新浪微博帐号登录"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/oauth20/auth_qqProvider.html"</span> <span class="attr">class</span>=<span class="string">"icon_qq"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"使用腾讯QQ帐号登录"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/oauth20/auth_weixinProvider.html"</span> <span class="attr">class</span>=<span class="string">"icon_weixin"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"使用微信帐号登录"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>比如我让拉勾网读取我存储在微博上面的用户资料, 因此我会被引导至微博的授权服务,进行授权, 同时拉勾网会带上自己在微博开放平台注册的客户端信息, 如下图:<br><img src="http://oiw1gzfww.bkt.clouddn.com/weibo_oaut2.png" alt=""><br>而具体的授权请求格式如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GET /authorize?response_type=code&amp;client_id=s6BhdRkqt3&amp;state=xyz</div><div class="line">    &amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1</div><div class="line">Host: server.example.com</div></pre></td></tr></table></figure></p>
<p>其中的参数:</p>
<ul>
<li>response_type：表示授权类型，必选项，此处的值固定为”code”</li>
<li>client_id：表示客户端的ID，必选项</li>
<li>redirect_uri：表示重定向URI，可选项</li>
<li>scope：表示申请的权限范围，可选项</li>
<li>state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。</li>
</ul>
<p><strong>B. 用户授权</strong><br>现在我已经到了微薄的授权服务页面, 需要我对拉勾网访问的相应数据进行授权, 因此我需要登录, 然后进行授权:</p>
<ol>
<li>登录<br><img src="http://oiw1gzfww.bkt.clouddn.com/weibo_login_oauth2.png" alt=""></li>
<li>授权<br><img src="http://oiw1gzfww.bkt.clouddn.com/weibo_auth2.png" alt=""></li>
</ol>
<p>然后我点击连接(其实这个按钮改成授权比较合适, 其他oauth对于的这里也基本都叫授权), 此时我完成了我对拉勾网响应权限的授权。</p>
<p><strong>C. Authorization server 将用户导向第三方应用(拉勾网)端事先指定的”重定向URI”(A 步骤中传入的redirection_uri),同时附上一个授权码</strong><br><img src="http://oiw1gzfww.bkt.clouddn.com/oauth2_redirect.png" alt=""><br>从上图中的referer可以看出, 跳转是来自微博的授权服务器的, 并且<code>query string</code>携带这code</p>
<p>具体格式如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 302 Found</div><div class="line">Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA</div><div class="line">          &amp;state=xyz</div></pre></td></tr></table></figure></p>
<p>其中参数:</p>
<ul>
<li>code：表示授权码，必选项。该码的有效期应该很短，通常设为10分钟，客户端只能使用该码一次，否则会被授权服务器拒绝。该码与客户端ID和重定向URI，是一一对应关系。</li>
<li>state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。</li>
</ul>
<p><strong>D. 第三方应用(拉勾网)像Authorization server请求token</strong><br>这一步在拉勾网的后台服务器进行, 从界面上是看不到, 具体过程为: 拉勾网获取到code过后, 以code向微博收取服务器请求, 换取可以访问微博资源服务的token.<br>请求的样例大致如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">POST /token HTTP/1.1</div><div class="line">Host: server.example.com</div><div class="line">Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line"></div><div class="line">grant_type=authorization_code&amp;code=SplxlOBeZQQYbYS6WxSbIA</div><div class="line">&amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb</div></pre></td></tr></table></figure></p>
<p>其中参数:</p>
<ul>
<li>grant_type：表示使用的授权模式，必选项，此处的值固定为”<code>authorization_code</code>“。</li>
<li>code：表示上一步获得的授权码，必选项。</li>
<li>redirect_uri：表示重定向URI，必选项，且必须与A步骤中的该参数值保持一致。</li>
<li>client_id：表示客户端ID，必选项。</li>
</ul>
<p><strong>E. Authorization server验证code合法过后返回token</strong><br>返回的token数据样例大致如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Type: application/json;charset=UTF-8</div><div class="line">Cache-Control: no-store</div><div class="line">Pragma: no-cache</div><div class="line"></div><div class="line">&#123;</div><div class="line">  &quot;access_token&quot;:&quot;2YotnFZFEjr1zCsicMWpAA&quot;,</div><div class="line">  &quot;token_type&quot;:&quot;example&quot;,</div><div class="line">  &quot;expires_in&quot;:3600,</div><div class="line">  &quot;refresh_token&quot;:&quot;tGzv3JOkF0XG5Qx2TlKWIA&quot;,</div><div class="line">  &quot;example_parameter&quot;:&quot;example_value&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中参数:</p>
<ul>
<li>access_token：表示访问令牌，必选项。</li>
<li>token_type：表示令牌类型，该值大小写不敏感，必选项，可以是bearer类型或mac类型。</li>
<li>expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。</li>
<li>refresh_token：表示更新令牌，用来获取下一次的访问令牌，可选项。</li>
<li>scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。</li>
</ul>
<h4 id="简化模式"><a href="#简化模式" class="headerlink" title="简化模式"></a>简化模式</h4><p>采用Implicit Grant方式获取Access Token的授权验证流程又被称为User-Agent Flow, 它不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了”授权码”这个步骤，因此得名。所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。</p>
<p>应用场景: 适用于所有无Server端配合的应用(由于应用往往位于一个User Agent里，如浏览器里面，因此这类应用在某些平台下又被称为<code>Client-Side Application</code>), 如手机/桌面客户端程序、浏览器插件等，以及基于JavaScript等脚本客户端脚本语言实现的应用，他们的一个共同特点是，无服务端,无法监听端口直接收到回调token, 并且应用无法妥善保管其应用密钥(App Secret Key), 如果采取Authorization Code模式，则会存在泄漏其应用密钥(api_scret)的可能性<br>典型应用: 暂时没看到相关应用使用该模式<br>流程图:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">+----------+</div><div class="line">| Resource |</div><div class="line">|  Owner   |</div><div class="line">|          |</div><div class="line">+----------+</div><div class="line">    ^</div><div class="line">    |</div><div class="line">    (B)</div><div class="line">+----|-----+          Client Identifier     +---------------+</div><div class="line">|         -+----(A)-- &amp; Redirection URI ---&gt;|               |</div><div class="line">|  User-   |                                | Authorization |</div><div class="line">|  Agent  -|----(B)-- User authenticates --&gt;|     Server    |</div><div class="line">|          |                                |               |</div><div class="line">|          |&lt;---(C)--- Redirection URI ----&lt;|               |</div><div class="line">|          |          with Access Token     +---------------+</div><div class="line">|          |            in Fragment</div><div class="line">|          |                                +---------------+</div><div class="line">|          |----(D)--- Redirection URI ----&gt;|   Web-Hosted  |</div><div class="line">|          |          without Fragment      |     Client    |</div><div class="line">|          |                                |    Resource   |</div><div class="line">|     (F)  |&lt;---(E)------- Script ---------&lt;|               |</div><div class="line">|          |                                +---------------+</div><div class="line">+-|--------+</div><div class="line">  |    |</div><div class="line">(A)  (G) Access Token</div><div class="line">  |    |</div><div class="line">  ^    v</div><div class="line">+---------+</div><div class="line">|         |</div><div class="line">|  Client |</div><div class="line">|         |</div><div class="line">+---------+</div></pre></td></tr></table></figure></p>
<p><strong>A. 客户端将用户导向认证服务器</strong><br>和之前的auth code模式比起来, 仅仅是response_type变成了token, 其他过程不变。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GET /authorize?response_type=token&amp;client_id=s6BhdRkqt3&amp;state=xyz</div><div class="line">    &amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1</div><div class="line">Host: server.example.com</div></pre></td></tr></table></figure></p>
<p><strong>B. 用户决定是否给于客户端授权</strong><br>这部分同auth code模式一样</p>
<p><strong>C. 假设用户给予授权，认证服务器将用户导向客户端指定的”重定向URI”，并在URI的Hash部分包含了访问令牌</strong><br>这里最大的区别就是: 直接返回token, 而不是code.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 302 Found</div><div class="line">Location: http://example.com/cb#access_token=2YotnFZFEjr1zCsicMWpAA</div><div class="line">          &amp;state=xyz&amp;token_type=example&amp;expires_in=3600</div></pre></td></tr></table></figure></p>
<p>注意这里的这个回调地址, 在授权码模式下 该地址以及query string都是需要服务端处理的, 但是在简化模式下, 是没有服务端程序参加的, 因此简化模式下该callback url仅仅是一个静态页面地址.<br>因此在简化模式下, 需要通过浏览器获取到callback url中的参数, 这也是为什么有接下来2步的原因。</p>
<p><strong>D. 浏览器向资源服务器发出请求，其中不包括上一步收到的Hash值。</strong><br>浏览器向Web-Hosted请求获取token的脚本代码</p>
<p><strong>E. 资源服务器返回一个网页，其中包含的代码可以获取Hash值中的令牌。</strong><br>Web-Hosted返回给浏览器(user-agent)一段提前access token的脚本</p>
<p><strong>F.浏览器执行上一步获得的脚本，提取出令牌。</strong><br>浏览器执行该脚本, 提取出access token</p>
<p>注意在该模式的实现过程中, D和E步一般都会省略掉, 因为Web-Hosted Client Resource提供的这段token提取脚本, 客户端可以自己实现:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt; </div><div class="line">    function callback(user) </div><div class="line">    &#123;</div><div class="line">      var userName = document.getElementById('userName');</div><div class="line">      var greetingText = document.createTextNode('Greetings, '+ user.openid + '.');</div><div class="line">      userName.appendChild(greetingText);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //应用的APPID，请改为你自己的</div><div class="line">    var appID = "YOUR_APP_ID";</div><div class="line">    //成功授权后的回调地址，请改为你自己的</div><div class="line">    var redirectURI = "http://qzs.qq.com/qzone/openapi/success.html";</div><div class="line"></div><div class="line">    //构造请求</div><div class="line">    if (window.location.hash.length == 0) </div><div class="line">    &#123;</div><div class="line">      var path = 'https://graph.qq.com/oauth2.0/authorize?';</div><div class="line">      var queryParams = ['client_id=' + appID,'redirect_uri=' + redirectURI,'</div><div class="line">      scope=' + 'get_user_info,list_album,upload_pic,add_feeds,do_like','response_type=token'];</div><div class="line"></div><div class="line">      var query = queryParams.join('&amp;');</div><div class="line">      var url = path + query;</div><div class="line">      window.open(url);</div><div class="line">    &#125;</div><div class="line">    else </div><div class="line">    &#123;</div><div class="line">      //获取access token(直接获取url参数里面的第一个参数就是access token)</div><div class="line">      var accessToken = window.location.hash.substring(1);</div><div class="line">      //使用Access Token来获取用户的OpenID</div><div class="line">      var path = "https://graph.qq.com/oauth2.0/me?";</div><div class="line">      var queryParams = [accessToken, 'callback=callback'];</div><div class="line">      var query = queryParams.join('&amp;');</div><div class="line">      var url = path + query;</div><div class="line">      var script = document.createElement('script');</div><div class="line">      script.src = url;</div><div class="line">      document.body.appendChild(script);        </div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p><strong>G.浏览器将令牌发给客户端</strong><br>浏览器将access token交给客户端, 典型的办法就是将token存入浏览器, 等待client获取。</p>
<h4 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h4><p>密码模式(Resource Owner Password Credentials Grant)中，用户向客户端(第三方应用)直接提供自己的用户名和密码。客户端使用这些信息, 向”服务商提供商”索要授权。<br>在这种模式中, 用户必须把自己的密码给客户端，但是客户端不得储存密码。这通常用在用户对客户端(第三方应用)高度信任的情况下，比如客户端是操作系统的一部分，或者由一个著名公司出品。而认证服务器只有在其他授权模式无法执行的情况下，才能考虑使用这种模式。</p>
<p>应用场景: 第该应用绝对信任<br>典型应用: 应用程序自己的dashboard程序<br>流程图:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">+----------+</div><div class="line">| Resource |</div><div class="line">|  Owner   |</div><div class="line">|          |</div><div class="line">+----------+</div><div class="line">    v</div><div class="line">    |    Resource Owner</div><div class="line">    (A) Password Credentials</div><div class="line">    |</div><div class="line">    v</div><div class="line">+---------+                                  +---------------+</div><div class="line">|         |&gt;--(B)---- Resource Owner -------&gt;|               |</div><div class="line">|         |         Password Credentials     | Authorization |</div><div class="line">| Client  |                                  |     Server    |</div><div class="line">|         |&lt;--(C)---- Access Token ---------&lt;|               |</div><div class="line">|         |    (w/ Optional Refresh Token)   |               |</div><div class="line">+---------+                                  +---------------+</div></pre></td></tr></table></figure></p>
<p><strong>A. 用户向第三方应用提供自己的用户名和密码</strong><br>用户将自己的密码给第三方应用。</p>
<p><strong>B. 第三方应用将用户名和密码发给认证服务器，向后者请求令牌</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">POST /token HTTP/1.1</div><div class="line">Host: server.example.com</div><div class="line">Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line"></div><div class="line">grant_type=password&amp;username=johndoe&amp;password=A3ddj3w</div></pre></td></tr></table></figure></p>
<p>其中参数:</p>
<ul>
<li>grant_type: 表示授权类型，此处的值固定为”password”，必选项。</li>
<li>username: 表示用户名，必选项。</li>
<li>password: 表示用户的密码，必选项。</li>
<li>scope: 表示权限范围，可选项。</li>
</ul>
<p><strong>C. 认证服务器确认无误后，向客户端提供访问令牌</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Type: application/json;charset=UTF-8</div><div class="line">Cache-Control: no-store</div><div class="line">Pragma: no-cache</div><div class="line"></div><div class="line">&#123;</div><div class="line">  &quot;access_token&quot;:&quot;2YotnFZFEjr1zCsicMWpAA&quot;,</div><div class="line">  &quot;token_type&quot;:&quot;example&quot;,</div><div class="line">  &quot;expires_in&quot;:3600,</div><div class="line">  &quot;refresh_token&quot;:&quot;tGzv3JOkF0XG5Qx2TlKWIA&quot;,</div><div class="line">  &quot;example_parameter&quot;:&quot;example_value&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中参数:</p>
<ul>
<li>access_token：表示访问令牌，必选项。</li>
<li>token_type：表示令牌类型，该值大小写不敏感，必选项，可以是bearer类型或mac类型。</li>
<li>expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。</li>
<li>refresh_token：表示更新令牌，用来获取下一次的访问令牌，可选项。</li>
<li>scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。</li>
</ul>
<h4 id="客户端模式"><a href="#客户端模式" class="headerlink" title="客户端模式"></a>客户端模式</h4><p>客户端模式（Client Credentials Grant）指客户端以自己的名义，而不是以用户的名义，向”服务提供商”进行认证。严格地说，客户端模式并不属于OAuth框架所要解决的问题。在这种模式中，用户直接向客户端注册，客户端以自己的名义要求”服务提供商”提供服务，其实不存在授权问题。</p>
<p>应用场景: <br>典型应用: 内部服务, Resource Server A 和 Resource Server B 的访问问题。<br>流程图:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+---------+                                  +---------------+</div><div class="line">|         |                                  |               |</div><div class="line">|         |&gt;--(A)- Client Authentication ---&gt;| Authorization |</div><div class="line">| Client  |                                  |     Server    |</div><div class="line">|         |&lt;--(B)---- Access Token ---------&lt;|               |</div><div class="line">|         |                                  |               |</div><div class="line">+---------+                                  +---------------+</div></pre></td></tr></table></figure></p>
<p><strong>A. 客户端向认证服务器进行身份认证，并要求一个访问令牌。</strong><br>客户端直接使用client凭证获取tokne<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">POST /token HTTP/1.1</div><div class="line">Host: server.example.com</div><div class="line">Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line"></div><div class="line">grant_type=client_credentials</div></pre></td></tr></table></figure></p>
<p><strong>B. 认证服务器确认无误后，向客户端提供访问令牌。</strong><br>授权服务直接返回token<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Type: application/json;charset=UTF-8</div><div class="line">Cache-Control: no-store</div><div class="line">Pragma: no-cache</div><div class="line"></div><div class="line">&#123;</div><div class="line">  &quot;access_token&quot;:&quot;2YotnFZFEjr1zCsicMWpAA&quot;,</div><div class="line">  &quot;token_type&quot;:&quot;example&quot;,</div><div class="line">  &quot;expires_in&quot;:3600,</div><div class="line">  &quot;example_parameter&quot;:&quot;example_value&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://wiki.open.qq.com/wiki/website/%E5%BC%80%E5%8F%91%E6%94%BB%E7%95%A5_Client-side" target="_blank" rel="external">腾讯开发平台-开发攻略_Client-side</a></li>
<li><a href="https://tools.ietf.org/html/rfc6749" target="_blank" rel="external">OAuth2.0 RFC文档</a></li>
<li><a href="https://tools.ietf.org/html/rfc7636#ref-BCP195" target="_blank" rel="external">PKCE 扩展RFC文档</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当今互联网的功能可谓是五花八门, 而很多服务需要依赖用户已有的数据才能提供服务, 比如云冲印, 需要访问用户云盘里面的照片数据, 再比如ci服务, 需要访问用户代码仓库里面的项目数据。如何安全得将用户的数据暴露给第三方应用访问是一个很常见的需求, 而OAuth的出现就是解决这类问题的。&lt;br&gt;
    
    </summary>
    
      <category term="协议详解" scheme="https://blog.yumaojun.net/categories/%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
    
      <category term="OAUTH2" scheme="https://blog.yumaojun.net/categories/%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/OAUTH2/"/>
    
    
      <category term="oauth2" scheme="https://blog.yumaojun.net/tags/oauth2/"/>
    
  </entry>
  
  <entry>
    <title>Golang日志之logrus的使用</title>
    <link href="https://blog.yumaojun.net/2017/11/27/golang-log/"/>
    <id>https://blog.yumaojun.net/2017/11/27/golang-log/</id>
    <published>2017-11-27T05:04:55.000Z</published>
    <updated>2017-12-06T09:35:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为标准库的日志库缺少Log Level, 如果基于标准库扩展自己的logger也需要花一点时间, 看github的上很多开源项目都使用一个叫logrus的模块, 于是研究了下, 发现它具有高度的灵活性, 而且已经有很多写好了的插件, 比如和logstach对接的插件,所以项目后面就切换日志模块为logrus, 这篇博客就是介绍我们使用logrus时遇到的坑, 以及一些解决之道。<br><a id="more"></a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://github.com/sirupsen/logrus" target="_blank" rel="external">logrus</a>在github上相当受欢迎, 截止目前为止已经6k+的star了, 在很多开源项目中被使用, 比如docker, prometheus等使用该库进行日志记录.<br>官方声称API完全兼容标准包logger, 项目地址: <a href="https://github.com/sirupsen/logrus" target="_blank" rel="external">logrus github 地址</a>, 因此如果你之前项目使用的标准库那么可以无缝迁移.<br>logrus是一个结构化的、可插拔的日志记录器, 你可以通过插件将你的日志发往任意地方, 比如文件, 标准输出, logstash, influxdb, …。这正式它最吸引人的地方。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>logrus有6个日志等级, 分别为: Debug,Info,Warn,Error,Fatal,Panic, 经过简单的配置就可以使用了。<br>logrus有2种formater, 分别是: JSONFormatter, TextFormatter, 当然如果你觉得都不是你想要的, 可以通过实现Formatter接口定制自己的formater</p>
<h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><p>当初始化好logrus后, 可以直接调用Debug等进行日志记录。<br>WithFields是一个很好用的功能, 它用于记录你这条message的一些元数据信息, 比如你可以记录是有那个访问触发的(request_id)</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"github.com/sirupsen/logrus"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	logrus.WithFields(logrus.Fields&#123;<span class="string">"animal"</span>: <span class="string">"walrus"</span>,<span class="string">"size"</span>: <span class="number">10</span>&#125;).Info(<span class="string">"A group of walrus emerges from the ocean"</span>)</div><div class="line">	logrus.WithFields(logrus.Fields&#123;<span class="string">"request_id"</span>: <span class="string">"requestA"</span>&#125;).Warn(<span class="string">"The group's number increased tremendously!"</span>)</div><div class="line">	logrus.WithFields(logrus.Fields&#123;<span class="string">"request_id"</span>: <span class="string">"requestB"</span>&#125;).Fatal(<span class="string">"The ice breaks!"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="comment">// 以JSON格式为输出，代替默认的ASCII格式</span></div><div class="line">	logrus.SetFormatter(&amp;logrus.JSONFormatter&#123;&#125;)</div><div class="line">	<span class="comment">// 以Stdout为输出，代替默认的stderr</span></div><div class="line">	logrus.SetOutput(os.Stdout)</div><div class="line">	<span class="comment">// 设置日志等级</span></div><div class="line">	logrus.SetLevel(logrus.WarnLevel)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用Logger"><a href="#使用Logger" class="headerlink" title="使用Logger"></a>使用Logger</h3><p>logger是一种相对高级的用法, 对于一个大型项目, 往往需要一个全局的logger对象, 用于记录项目所有的日志</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">logger := logrus.New()</div><div class="line">logger.Formatter = &amp;logrus.JSONFormatter&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// Use logrus for standard log output</span></div><div class="line"><span class="comment">// Note that `log` here references stdlib's log</span></div><div class="line"><span class="comment">// Not logrus imported under the name `log`.</span></div><div class="line">log.SetOutput(logger.Writer())</div></pre></td></tr></table></figure>
<h3 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h3><p>官方有很多现成的Hook, 可以实现 记录日志到文件(日志文件轮转), 记录到kafka, 记录到influxDB, 记录到MySQL…</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> (</div><div class="line">  log <span class="string">"github.com/sirupsen/logrus"</span></div><div class="line">  <span class="string">"gopkg.in/gemnasium/logrus-airbrake-hook.v2"</span> <span class="comment">// the package is named "aibrake"</span></div><div class="line">  logrus_syslog <span class="string">"github.com/sirupsen/logrus/hooks/syslog"</span></div><div class="line">  <span class="string">"log/syslog"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">  <span class="comment">// Use the Airbrake hook to report errors that have Error severity or above to</span></div><div class="line">  <span class="comment">// an exception tracker. You can create custom hooks, see the Hooks section.</span></div><div class="line">  log.AddHook(airbrake.NewHook(<span class="number">123</span>, <span class="string">"xyz"</span>, <span class="string">"production"</span>))</div><div class="line"></div><div class="line">  hook, err := logrus_syslog.NewSyslogHook(<span class="string">"udp"</span>, <span class="string">"localhost:514"</span>, syslog.LOG_INFO, <span class="string">""</span>)</div><div class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">    log.Error(<span class="string">"Unable to connect to local syslog daemon"</span>)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    log.AddHook(hook)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>下面这个问题是我们遇到的最郁闷的问题, 因为就连标准库都已经实现的功能,没想到logrus会不提供。</p>
<h3 id="不记录文件名和行号"><a href="#不记录文件名和行号" class="headerlink" title="不记录文件名和行号"></a>不记录文件名和行号</h3><p>使用logrus有一个很要命的问题: 不会记录日志打印的行号和文件名, 这在排错时会显得很不方便, 而github上关于<a href="https://github.com/sirupsen/logrus/issues/63" target="_blank" rel="external">log filename and line number</a>的issue已经挂了3年了, 大家解决的办法大致为2类:</p>
<ul>
<li><p>自己写hook来记录</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> ContextHook <span class="keyword">struct</span> &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(hook ContextHook)</span> <span class="title">Levels</span><span class="params">()</span> []<span class="title">log</span>.<span class="title">Level</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> log.AllLevels</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(hook ContextHook)</span> <span class="title">Fire</span><span class="params">(entry *log.Entry)</span> <span class="title">error</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> pc, file, line, ok := runtime.Caller(<span class="number">8</span>); ok &#123;</div><div class="line">        funcName := runtime.FuncForPC(pc).Name()</div><div class="line"></div><div class="line">        entry.Data[<span class="string">"file"</span>] = path.Base(file)</div><div class="line">        entry.Data[<span class="string">"func"</span>] = path.Base(funcName)</div><div class="line">        entry.Data[<span class="string">"line"</span>] = line</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    log.AddHook(ContextHook&#123;&#125;)</div><div class="line">        …</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>通过装饰器模式来包装一层</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> logger</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">	<span class="string">"runtime"</span></div><div class="line">	<span class="string">"strings"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/Sirupsen/logrus"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">/* truncated */</span></div><div class="line"></div><div class="line"><span class="comment">// Decorate appends line, file and function context to the logger and returns a function to call before</span></div><div class="line"><span class="comment">// each log</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Decorate</span><span class="params">(logger *logrus.Entry)</span> <span class="title">func</span><span class="params">()</span> *<span class="title">logrus</span>.<span class="title">Entry</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> *<span class="title">logrus</span>.<span class="title">Entry</span></span> &#123;</div><div class="line">		<span class="keyword">if</span> pc, f, line, ok := runtime.Caller(<span class="number">1</span>); ok &#123;</div><div class="line">			fnName := runtime.FuncForPC(pc).Name()</div><div class="line">			file := strings.Split(f, <span class="string">"mobilebid"</span>)[<span class="number">1</span>]</div><div class="line">			caller := fmt.Sprintf(<span class="string">"%s:%v %s"</span>, file, line, fnName)</div><div class="line"></div><div class="line">			<span class="keyword">return</span> logrus.WithField(<span class="string">"caller"</span>, caller)</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> logger</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Log appends line, file and function context to the logger</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Log</span><span class="params">()</span> *<span class="title">logrus</span>.<span class="title">Entry</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> pc, f, line, ok := runtime.Caller(<span class="number">1</span>); ok &#123;</div><div class="line">		fnName := runtime.FuncForPC(pc).Name()</div><div class="line">		file := strings.Split(f, <span class="string">"mobilebid"</span>)[<span class="number">1</span>]</div><div class="line">		caller := fmt.Sprintf(<span class="string">"%s:%v %s"</span>, file, line, fnName)</div><div class="line"></div><div class="line">		<span class="keyword">return</span> logrus.WithField(<span class="string">"caller"</span>, caller)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &amp;logrus.Entry&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>个人偏向于自己实现一个hook的处理方式, 这也是作者比较认可的一种方式, 作者原话是这样说的<code>Yes, unless someone can prove a negligible performance impact I think this should be a hook.</code>,  因此我测试了上面那段自己实现ContextHook的代码, 很遗憾, 居然没成功, 因此不得不自己写一个ContextHook, 顺便了解下获取filename和line number的原理。</p>
<h3 id="获取文件名和行号的原理"><a href="#获取文件名和行号的原理" class="headerlink" title="获取文件名和行号的原理"></a>获取文件名和行号的原理</h3><p>在runtime里面有一个caller函数, 源码里面是这样描述caller的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Caller reports file and line number information about function invocations on the calling goroutine&apos;s stack. </div><div class="line">The argument skip is the number of stack frames to ascend, with 0 identifying the caller of Caller.  </div><div class="line">(For historical reasons the meaning of skip differs between Caller and Callers.) </div><div class="line">The return values report the program counter, file name, and line number within the file of the corresponding call. </div><div class="line">The boolean ok is false if it was not possible to recover the information.</div></pre></td></tr></table></figure></p>
<p>简而言之, 我们通过caller可以追踪每一次函数调用的文件和行号信息, 但是我们的函数调用链往往有深, 而我们需要的仅仅是记录日志时的那一层的函数调用信息。如何找到这一层喃?<br>我们可以把每一层都打印出来, 看看有啥规律:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/Users/maojun/GoWorkDir/src/openauth/vendor/github.com/sirupsen/logrus/entry.go: 98</div><div class="line">/Users/maojun/GoWorkDir/src/openauth/vendor/github.com/sirupsen/logrus/entry.go: 134</div><div class="line">/Users/maojun/GoWorkDir/src/openauth/vendor/github.com/sirupsen/logrus/logger.go: 181</div><div class="line">/Users/maojun/GoWorkDir/src/openauth/cmd/openauth/cmd/service.go: 55</div><div class="line">...</div><div class="line"></div><div class="line">/Users/maojun/GoWorkDir/src/openauth/vendor/github.com/sirupsen/logrus/entry.go: 98</div><div class="line">/Users/maojun/GoWorkDir/src/openauth/vendor/github.com/sirupsen/logrus/entry.go: 134</div><div class="line">/Users/maojun/GoWorkDir/src/openauth/vendor/github.com/sirupsen/logrus/entry.go: 182</div><div class="line">/Users/maojun/GoWorkDir/src/openauth/vendor/github.com/sirupsen/logrus/logger.go: 118</div><div class="line">/Users/maojun/GoWorkDir/src/openauth/api/http/handler/init.go: 42</div><div class="line">...</div><div class="line"></div><div class="line">/Users/maojun/GoWorkDir/src/openauth/vendor/github.com/sirupsen/logrus/entry.go: 98</div><div class="line">/Users/maojun/GoWorkDir/src/openauth/vendor/github.com/sirupsen/logrus/entry.go: 144</div><div class="line">/Users/maojun/GoWorkDir/src/openauth/vendor/github.com/sirupsen/logrus/logger.go: 189</div><div class="line">/Users/maojun/GoWorkDir/src/openauth/api/http/server.go: 71</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>我们可以看出前面几次调用链, 都被logrus自己使用了, 因此我们仅需要除去logrus调用链的函数, 然后第一个被找到的就是我们记录日志的调用了, 比如最后一个: http/server.go: 71, 我在这里调用logrus: logger.Debug(“msg”)</p>
<p>那么logrus的调用链最多有几层喃？我们执行多少次递归才能找到我们自己的debug call？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cmd/service.go: 55 [logger.Debug()] ---&gt; logrus/logger.go: 181 [entry.Debug()] ---&gt; logrus/entry.go: 134 [entry.log()] ---&gt; logrus/entry.go: 98 [entry.Logger.Hooks.Fire()]</div><div class="line">handler/init.go: 42 [logger.Debugf()] ---&gt; logrus/logger.go: 118 [entry.Debug()]  ---&gt; logrus/entry.go: 182 [logger.releaseEntry()] ---&gt; logrus/entry.go: 134 [entry.log()] ---&gt; logrus/entry.go: 98 [entry.Logger.Hooks.Fire()]</div></pre></td></tr></table></figure></p>
<p>由此我们可以看出当我们使用(Debug, Debugf, Debugln), 底层调用链的长度大致为3~4层, 因此我们最少需要递归5次才能找到我们自己的debug call.</p>
<p>最后找到了记录下来就ok了。</p>
<h3 id="自己实现一个ContextHook"><a href="#自己实现一个ContextHook" class="headerlink" title="自己实现一个ContextHook"></a>自己实现一个ContextHook</h3><p>如何实现一个logrus的hook喃?<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// A hook to be fired when logging on the logging levels returned from</span></div><div class="line"><span class="comment">// `Levels()` on your implementation of the interface. Note that this is not</span></div><div class="line"><span class="comment">// fired in a goroutine or a channel with workers, you should handle such</span></div><div class="line"><span class="comment">// functionality yourself if your call is non-blocking and you don't wish for</span></div><div class="line"><span class="comment">// the logging calls for levels returned from `Levels()` to block.</span></div><div class="line"><span class="keyword">type</span> Hook <span class="keyword">interface</span> &#123;</div><div class="line">	Levels() []Level</div><div class="line">	Fire(*Entry) error</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一个Entry为一条日志记录, 我们的Hook需要做的就是在每一个条的日志记录里面添加调用时的文件名和行号. 核心就是实现自己的Fire方法, 以下是参考实现:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hooks</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"runtime"</span></div><div class="line">	<span class="string">"strings"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/sirupsen/logrus"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// ContextHook for log the call context</span></div><div class="line"><span class="keyword">type</span> contextHook <span class="keyword">struct</span> &#123;</div><div class="line">	Field  <span class="keyword">string</span></div><div class="line">	Skip   <span class="keyword">int</span></div><div class="line">	levels []logrus.Level</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// NewContextHook use to make an hook</span></div><div class="line"><span class="comment">// 根据上面的推断, 我们递归深度可以设置到5即可.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewContextHook</span><span class="params">(levels ...logrus.Level)</span> <span class="title">logrus</span>.<span class="title">Hook</span></span> &#123;</div><div class="line">	hook := contextHook&#123;</div><div class="line">		Field:  <span class="string">"source"</span>,</div><div class="line">		Skip:   <span class="number">5</span>,</div><div class="line">		levels: levels,</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(hook.levels) == <span class="number">0</span> &#123;</div><div class="line">		hook.levels = logrus.AllLevels</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> &amp;hook</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Levels implement levels</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(hook contextHook)</span> <span class="title">Levels</span><span class="params">()</span> []<span class="title">logrus</span>.<span class="title">Level</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> logrus.AllLevels</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Fire implement fire</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(hook contextHook)</span> <span class="title">Fire</span><span class="params">(entry *logrus.Entry)</span> <span class="title">error</span></span> &#123;</div><div class="line">	entry.Data[hook.Field] = findCaller(hook.Skip)</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 对caller进行递归查询, 直到找到非logrus包产生的第一个调用.</span></div><div class="line"><span class="comment">// 因为filename我获取到了上层目录名, 因此所有logrus包的调用的文件名都是 logrus/...</span></div><div class="line"><span class="comment">// 因此通过排除logrus开头的文件名, 就可以排除所有logrus包的自己的函数调用</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findCaller</span><span class="params">(skip <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</div><div class="line">	file := <span class="string">""</span></div><div class="line">	line := <span class="number">0</span></div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">		file, line = getCaller(skip + i)</div><div class="line">		<span class="keyword">if</span> !strings.HasPrefix(file, <span class="string">"logrus"</span>) &#123;</div><div class="line">			<span class="keyword">break</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">"%s:%d"</span>, file, line)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 这里其实可以获取函数名称的: fnName := runtime.FuncForPC(pc).Name()</span></div><div class="line"><span class="comment">// 但是我觉得有 文件名和行号就够定位问题, 因此忽略了caller返回的第一个值:pc</span></div><div class="line"><span class="comment">// 在标准库log里面我们可以选择记录文件的全路径或者文件名, 但是在使用过程成并发最合适的,</span></div><div class="line"><span class="comment">// 因为文件的全路径往往很长, 而文件名在多个包中往往有重复, 因此这里选择多取一层, 取到文件所在的上层目录那层.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getCaller</span><span class="params">(skip <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">	_, file, line, ok := runtime.Caller(skip)</div><div class="line">	fmt.Println(file)</div><div class="line">	fmt.Println(line)</div><div class="line">	<span class="keyword">if</span> !ok &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">""</span>, <span class="number">0</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	n := <span class="number">0</span></div><div class="line">	<span class="keyword">for</span> i := <span class="built_in">len</span>(file) - <span class="number">1</span>; i &gt; <span class="number">0</span>; i-- &#123;</div><div class="line">		<span class="keyword">if</span> file[i] == <span class="string">'/'</span> &#123;</div><div class="line">			n++</div><div class="line">			<span class="keyword">if</span> n &gt;= <span class="number">2</span> &#123;</div><div class="line">				file = file[i+<span class="number">1</span>:]</div><div class="line">				<span class="keyword">break</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> file, line</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为标准库的日志库缺少Log Level, 如果基于标准库扩展自己的logger也需要花一点时间, 看github的上很多开源项目都使用一个叫logrus的模块, 于是研究了下, 发现它具有高度的灵活性, 而且已经有很多写好了的插件, 比如和logstach对接的插件,所以项目后面就切换日志模块为logrus, 这篇博客就是介绍我们使用logrus时遇到的坑, 以及一些解决之道。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="log" scheme="https://blog.yumaojun.net/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB介绍与Golang驱动使用</title>
    <link href="https://blog.yumaojun.net/2017/11/22/golang-mongodb/"/>
    <id>https://blog.yumaojun.net/2017/11/22/golang-mongodb/</id>
    <published>2017-11-22T05:37:45.000Z</published>
    <updated>2017-11-24T01:55:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>在上篇博客中介绍了NoSQL以及文档数据库, 这篇博客介绍当下最流行的文档数据库:MongoDB。<br><a id="more"></a></p>
<h2 id="MongoDB简介"><a href="#MongoDB简介" class="headerlink" title="MongoDB简介"></a>MongoDB简介</h2><p>mongodb是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。它是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p>
<p>mongodb被各种规模的公司、各个行业、以及各种应用程序所使用, 它是灵活的数据库, 随着应用程序的发展, mongodb能适应程序schema的快速改变(schema free), 同时还提供开发人员所期望的传统数据库的功能，比如二级索引，完整的查询语言和严格的一致性。</p>
<p>mongodb有着一个丰富的客户端生态系统, 包括hadoop的集成, 官方提供10多种编程语言的驱动, 而用户社区提供高达40多种的驱动, 后面会专门介绍Golang的MongoDB驱动<code>mgo</code>的使用。</p>
<p>mongodb的流行离不开他的这些优点:</p>
<ul>
<li>json: 面向json的文档存储，操作起来比较简单和容易, 底层存储为Bson(二进制的json)</li>
<li>schema free: 特别适合存储半结构化的数据。</li>
<li>performance: c++编写, 支持全文索引, 基于内存映射技术(Memory-mapped files)</li>
<li>scalable: Replication, Auto-sharding</li>
<li>query: 支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组, 并且很高效(queries run in parallel on all shards)</li>
<li>map/reduce: Map函数和Reduce函数是使用Javascript编写的, 并可以通过db.runCommand或mapreduce命令来执行MapReduce操作。</li>
<li>udf: 可以用Javascript编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。</li>
<li>file storage: GridFS是MongoDB中的一个内置功能，可以用于存放大量小文件。</li>
<li>suport many language: 支持各种编程语言:RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。</li>
<li>opensource: 开源但是背后有商业公司支持(10gen), 当然也有企业版。</li>
<li>docs: 完善的文档, 无论是架构, 安装, 使用还是其他, 官方提供完善的文档支持。并且安装简单。</li>
</ul>
<p>因为mongo文档很完善, 因此安装请看<a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/" target="_blank" rel="external">mongod unbuntu 安装文档</a>。当前稳定版为3.4, 后面的测试都是基于3.4版本进行说明的。<br>为了方便我使用docker进行安装:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">maojun@maojun-mbp $ docker pull mongo:3.4</div><div class="line"><span class="comment"># 如果你需要把数据文件挂载出去, 防止丢失可以:</span></div><div class="line"><span class="comment"># docker run -p 27017:27017 -v $PWD/db:/data/db -d mongo:3.4</span></div><div class="line"><span class="comment"># 但是我本身就是测试环境, 容器删了就让他删了吧:</span></div><div class="line">docker run -p 27017:27017 <span class="_">-d</span> mongo:3.4</div><div class="line">19ceeb4814632f089a0a78bb98af83d9fb49cb377aae2534d67881851bf6644e</div><div class="line"><span class="comment"># 进入容器测试下mongo shell是否正常:</span></div><div class="line">maojun@maojun-mbp $ docker <span class="built_in">exec</span> -it 19c /bin/bash</div><div class="line">root@19ceeb481463:/<span class="comment"># mongo</span></div><div class="line">MongoDB shell version v3.4.10</div><div class="line">connecting to: mongodb://127.0.0.1:27017</div><div class="line">MongoDB server version: 3.4.10</div><div class="line">Welcome to the MongoDB shell.</div><div class="line">For interactive <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">"help"</span>.</div><div class="line">For more comprehensive documentation, see</div><div class="line">	http://docs.mongodb.org/</div><div class="line">Questions? Try the support group</div><div class="line">	http://groups.google.com/group/mongodb-user</div><div class="line">&gt; db</div><div class="line"><span class="built_in">test</span></div></pre></td></tr></table></figure></p>
<h2 id="基础概念解析"><a href="#基础概念解析" class="headerlink" title="基础概念解析"></a>基础概念解析</h2><p>不管我们学习什么数据库都应该学习其中的基础概念, 在mongodb中基本的概念是文档、集合、数据库, 如果对比传统数据库的表, 那么下面这张图可以帮组我们快速理解MongoDB里面这些基本概念:<br><img src="http://oiw1gzfww.bkt.clouddn.com/mongo_data_vs_table_data.png" alt=""></p>
<h3 id="数据库-DB"><a href="#数据库-DB" class="headerlink" title="数据库(DB)"></a>数据库(DB)</h3><p>对应于传统关系型数据库, DB就是表的集合, 而Mongo里面DB是Collections的集合。<br>但是对于传统的关系数据库而言, 在使用上有略微的区别:</p>
<ul>
<li>动态创建: mongodb的db不用单独创建, 如果使用时没有就会被自动创建。</li>
<li>使用方式: 通过 <code>show dbs</code>查看数据库, 通过 <code>use dbName</code>切换数据库, 通过<code>db</code>查看当前使用的数据库, 通过<code>show collections</code>查看所有的集合(表)</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt; show dbs</div><div class="line">admin    0.078GB</div><div class="line">gateway  0.078GB</div><div class="line"><span class="built_in">local</span>    0.078GB</div><div class="line">&gt;</div><div class="line">&gt; use gateway</div><div class="line">switched to db gateway</div><div class="line">&gt;</div><div class="line">&gt; show collections;</div><div class="line">students</div><div class="line">&gt;</div><div class="line">&gt; db</div><div class="line">gateway</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<h3 id="文档-Document"><a href="#文档-Document" class="headerlink" title="文档(Document)"></a>文档(Document)</h3><p>文档是MongoDB里面最重要的概念, 你可以将它理解为关系型数据的中Row,一个文档相当于mysql中的一行, 文档组织的格式是Json风格, 如下:<br><img src="http://oiw1gzfww.bkt.clouddn.com/document_mongo.png" alt=""></p>
<p>但是mongodb并不会存储的Json, 而是存储的Bson(Json的二进制格式), 当我们查看时Bson会自动转换成Json, 为了追踪每一个 Document, 每一个Document都有一个隐藏的id 字段， 这就好像myslq的row_id,  它是Mongodb里面的主键。</p>
<p>下面是一个具体的栗子:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; db.students.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a162b109d83b8def7401002"</span>), <span class="string">"name"</span> : <span class="string">"Bob"</span>, <span class="string">"age"</span> : 22 &#125;</div></pre></td></tr></table></figure></p>
<h3 id="集合-Collection"><a href="#集合-Collection" class="headerlink" title="集合(Collection)"></a>集合(Collection)</h3><p>document的容器, 一组相关的document组成的一个集合就叫<code>collection</code>, 因此collection相当于mysql中的table, 如下:<br><img src="http://oiw1gzfww.bkt.clouddn.com/collection_mongo.png" alt=""></p>
<p>集合存在于数据库中，集合没有固定的结构(文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型)，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。这与关系型数据库有很大的区别，也是MongoDB非常突出的特点, 该特性被称作<code>schema free</code>。</p>
<p>比如:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; db.students.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a162b109d83b8def7401002"</span>), <span class="string">"name"</span> : <span class="string">"Bob"</span>, <span class="string">"age"</span> : 22 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a162b829d83b8def7401003"</span>), <span class="string">"name"</span> : <span class="string">"Bob"</span>, <span class="string">"money"</span> : 99 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a162bbd9d83b8def7401004"</span>), <span class="string">"name"</span> : <span class="string">"Bob"</span>, <span class="string">"location"</span> : <span class="string">"chengdu"</span> &#125;</div></pre></td></tr></table></figure></p>
<h2 id="mongo-shell的使用"><a href="#mongo-shell的使用" class="headerlink" title="mongo shell的使用"></a>mongo shell的使用</h2><p>正常安装完MongoDB过后会安装<code>mongodb-org-shell</code>包, 它是mongoDB的客户端工具, 我们使用它和MongoDB进行交互(就像MySQL的客户端工具一样).<br>通过help查看mongo-shell的使用方法:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="built_in">help</span></div><div class="line">	db.help()                    <span class="built_in">help</span> on db methods</div><div class="line">	db.mycoll.help()             <span class="built_in">help</span> on collection methods</div><div class="line">	sh.help()                    sharding helpers</div><div class="line">	rs.help()                    replica <span class="built_in">set</span> helpers</div><div class="line">	<span class="built_in">help</span> admin                   administrative <span class="built_in">help</span></div><div class="line">	<span class="built_in">help</span> connect                 connecting to a db <span class="built_in">help</span></div><div class="line">	<span class="built_in">help</span> keys                    key shortcuts</div><div class="line">	<span class="built_in">help</span> misc                    misc things to know</div><div class="line">	<span class="built_in">help</span> mr                      mapreduce</div><div class="line"></div><div class="line">	show dbs                     show database names</div><div class="line">	show collections             show collections <span class="keyword">in</span> current database</div><div class="line">	show users                   show users <span class="keyword">in</span> current database</div><div class="line">	show profile                 show most recent system.profile entries with time &gt;= 1ms</div><div class="line">	show logs                    show the accessible logger names</div><div class="line">	show <span class="built_in">log</span> [name]              prints out the last segment of <span class="built_in">log</span> <span class="keyword">in</span> memory, <span class="string">'global'</span> is default</div><div class="line">	use &lt;db_name&gt;                <span class="built_in">set</span> current database</div><div class="line">	db.foo.find()                list objects <span class="keyword">in</span> collection foo</div><div class="line">	db.foo.find( &#123; a : 1 &#125; )     list objects <span class="keyword">in</span> foo <span class="built_in">where</span> a == 1</div><div class="line">	it                           result of the last line evaluated; use to further iterate</div><div class="line">	DBQuery.shellBatchSize = x   <span class="built_in">set</span> default number of items to display on shell</div><div class="line">	<span class="built_in">exit</span>                         quit the mongo shell</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<p>下面将演示如何使用mongo客户端对数据进行基本的增删改查</p>
<h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p>语法: db.mycoll.insert(document)<br>用法: 在insert函数内传入你需要记录的json。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; db.students.insert(&#123;<span class="string">"name"</span>: <span class="string">"Bob"</span>, <span class="string">"age"</span>: 22&#125;)</div><div class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : 1 &#125;)</div></pre></td></tr></table></figure></p>
<h3 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h3><p>语法: db.mycoll.find(query, projection)<br>参数: </p>
<ul>
<li>query: 可选，使用查询操作符指定查询条件 </li>
<li>projection: 可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看所有</span></div><div class="line">&gt; db.students.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a1632029d83b8def7401005"</span>), <span class="string">"name"</span> : <span class="string">"Bob"</span>, <span class="string">"age"</span> : 22 &#125;</div><div class="line"><span class="comment"># 查看指定某个</span></div><div class="line">&gt; db.students.find(&#123;<span class="string">"name"</span>: <span class="string">"Bob"</span>&#125;);</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a1632029d83b8def7401005"</span>), <span class="string">"name"</span> : <span class="string">"Bob"</span>, <span class="string">"age"</span> : 22 &#125;</div><div class="line"><span class="comment"># 查看指定对象的指定字段(注意 1:代表要展现该字段, 0: 代表不展现该字段, 默认"_id"为要展示)</span></div><div class="line">&gt; db.students.find(&#123;<span class="string">"name"</span>: <span class="string">"Bob"</span>&#125;, &#123;<span class="string">"age"</span>: 1, <span class="string">"_id"</span>: 0&#125;);</div><div class="line">&#123; <span class="string">"age"</span> : 22 &#125;</div></pre></td></tr></table></figure>
<p>是不是很简单, 来看看高级点的查询语法:</p>
<blockquote>
<p>条件比较</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:center">描述</th>
<th style="text-align:right">语法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$gt</td>
<td style="text-align:center">grant than</td>
<td style="text-align:right">{field: {$gt: value}}</td>
</tr>
<tr>
<td style="text-align:left">$gte</td>
<td style="text-align:center">grant than equal</td>
<td style="text-align:right">{field: {$gte: value}}</td>
</tr>
<tr>
<td style="text-align:left">$lt</td>
<td style="text-align:center">less than</td>
<td style="text-align:right">{field: {$lt: value}}</td>
</tr>
<tr>
<td style="text-align:left">$lte</td>
<td style="text-align:center">less than equal</td>
<td style="text-align:right">{field: {$lte: value}}</td>
</tr>
<tr>
<td style="text-align:left">$eq</td>
<td style="text-align:center">equal</td>
<td style="text-align:right">{field: {$eq: value}}</td>
</tr>
<tr>
<td style="text-align:left">$ne</td>
<td style="text-align:center">not equal</td>
<td style="text-align:right">{field: {$ne: value}}</td>
</tr>
<tr>
<td style="text-align:left">$in</td>
<td style="text-align:center">in</td>
<td style="text-align:right">{field: {field:  {$in:  [value, value, …]}}</td>
</tr>
<tr>
<td style="text-align:left">$nin</td>
<td style="text-align:center">not in</td>
<td style="text-align:right">{field: {field:  {$nin:  [value, value, …]}}</td>
</tr>
</tbody>
</table>
<blockquote>
<p>条件组合</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:center">描述</th>
<th style="text-align:right">语法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$or</td>
<td style="text-align:center">或</td>
<td style="text-align:right">{$or: [{<expression1>}, {<expression2>}, …}</expression2></expression1></td>
</tr>
<tr>
<td style="text-align:left">$and</td>
<td style="text-align:center">与</td>
<td style="text-align:right">{$and: [{<expression1>}, {<expression2>}, …}</expression2></expression1></td>
</tr>
<tr>
<td style="text-align:left">$not</td>
<td style="text-align:center">非</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">$nor</td>
<td style="text-align:center">反</td>
</tr>
</tbody>
</table>
<blockquote>
<p>元素查询</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th style="text-align:center">描述</th>
<th style="text-align:right">语法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$exists</td>
<td style="text-align:center">exist</td>
<td style="text-align:right">{filed:  {$exists: <boolean>}</boolean></td>
</tr>
<tr>
<td style="text-align:left">$mod</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">$type</td>
<td style="text-align:center">返回指定 字段类型的文档</td>
<td style="text-align:right">{filed: {$type: <bson type="">}}, 1. Double 2. String 3.Object 4. Array 5 Binary data …</bson></td>
</tr>
</tbody>
</table>
<h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><p>语法: db.mycoll.update(query, object[, upsert_bool, multi_bool])<br>参数: </p>
<ul>
<li>query: update的查询条件，类似sql update查询内where后面的。</li>
<li>update: update的对象和一些更新的操作符（如$,$inc…）等，也可以理解为sql update查询内set后面的。 </li>
<li>upsert: 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</li>
<li>multi: 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 我们先看看有哪些数据</span></div><div class="line">&gt; db.students.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a1632029d83b8def7401005"</span>), <span class="string">"name"</span> : <span class="string">"Bob"</span>, <span class="string">"age"</span> : 22 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a16c89f4da8732f195b4000"</span>), <span class="string">"name"</span> : <span class="string">"Aollen"</span>, <span class="string">"age"</span> : 21 &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a16c8b74da8732f195b4001"</span>), <span class="string">"name"</span> : <span class="string">"tom"</span>, <span class="string">"age"</span> : 20 &#125;</div><div class="line"><span class="comment"># 更新指定对象</span></div><div class="line">&gt; db.students.update(&#123;<span class="string">"name"</span>: <span class="string">"Bob"</span>&#125;, &#123;<span class="variable">$set</span>:&#123;<span class="string">"age"</span>: 32&#125;&#125;)</div><div class="line">WriteResult(&#123; <span class="string">"nMatched"</span> : 1, <span class="string">"nUpserted"</span> : 0, <span class="string">"nModified"</span> : 1 &#125;)</div><div class="line"><span class="comment"># 按条件更新匹配到的第一条(SQL Where)</span></div><div class="line">&gt; db.students.update(&#123;<span class="string">"age"</span>: &#123;<span class="variable">$gt</span>: 20&#125;&#125;, &#123;<span class="variable">$set</span>:&#123;<span class="string">"age"</span>: 30&#125;&#125;)</div><div class="line">WriteResult(&#123; <span class="string">"nMatched"</span> : 1, <span class="string">"nUpserted"</span> : 0, <span class="string">"nModified"</span> : 1 &#125;)</div><div class="line"><span class="comment"># 按条件更新匹配到的所有(SQL Where)</span></div><div class="line">&gt; db.students.update(&#123;<span class="string">"age"</span>: &#123;<span class="variable">$gt</span>: 20&#125;&#125;, &#123;<span class="variable">$set</span>:&#123;<span class="string">"age"</span>: 30&#125;&#125;, <span class="literal">false</span>, <span class="literal">true</span>)</div><div class="line">WriteResult(&#123; <span class="string">"nMatched"</span> : 2, <span class="string">"nUpserted"</span> : 0, <span class="string">"nModified"</span> : 1 &#125;)</div></pre></td></tr></table></figure>
<p>高级点的语法:</p>
<ul>
<li>更新第一个被匹配到的文档: db.mycoll.updateOne(filter, update, \<optional params="">), 可选参数: upsert, w, wtimeout, j</optional></li>
<li>更新所有被匹配到的文档: db.mycoll.updateMany(filter, update, \<optional params="">),  可选参数: upsert, w, wtimeout, j</optional></li>
</ul>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>语法: db.mycoll.remove(\<query>)</query></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 删除指定的对象</span></div><div class="line">&gt; db.students.remove(&#123;<span class="string">"name"</span>: <span class="string">"Bob"</span>&#125;)</div><div class="line">WriteResult(&#123; <span class="string">"nRemoved"</span> : 1 &#125;)</div><div class="line"><span class="comment"># 删除该collection里面的所有对象</span></div><div class="line">&gt; db.students.remove(&#123;&#125;)</div><div class="line">WriteResult(&#123; <span class="string">"nRemoved"</span> : 2 &#125;)</div></pre></td></tr></table></figure>
<h2 id="mongo-golang驱动mgo的使用"><a href="#mongo-golang驱动mgo的使用" class="headerlink" title="mongo golang驱动mgo的使用"></a>mongo golang驱动mgo的使用</h2><p>在mongodb的驱动里面Golang驱动推荐使用<code>mgo</code>.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go get gopkg.in/mgo.v2</div></pre></td></tr></table></figure></p>
<p>在使用之前我们先看看连接MongoDB的URI Format: <code>mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]</code><br>参数说明:</p>
<ul>
<li>mongodb:// 这是固定的格式，必须要指定。</li>
<li>username:password@ 可选项，如果设置，在连接数据库服务器之后，驱动都会尝试登陆这个数据库</li>
<li>host1 必须的指定至少一个host, host1 是这个URI唯一要填写的。它指定了要连接服务器的地址。如果要连接复制集，请指定多个主机地址。</li>
<li>portX 可选的指定端口，如果不填，默认为27017</li>
<li>/database 如果指定username:password@，连接并验证登陆指定数据库。若不指定，默认打开 test 数据库。</li>
<li>?options 是连接选项。如果不使用/database，则前面需要加上/。所有连接选项都是键值对name=value，键值对之间通过&amp;或;（分号）隔开</li>
</ul>
<p>下面举2个简单得栗子, 因为等下回使用到:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 用户: admin 密码: 123456 地址: localhost 数据库: test</span></div><div class="line">mongodb://admin:123456@localhost:27017/<span class="built_in">test</span></div><div class="line"><span class="comment"># 以安全模式连接到replica set，并且等待至少两个复制服务器成功写入，超时时间设置为2秒。</span></div><div class="line">mongodb://host1,host2,host3/?safe=<span class="literal">true</span>;w=2;wtimeoutMS=2000</div></pre></td></tr></table></figure></p>
<p>如果想要了解关于此更详细的文档, 请查看:</p>
<ul>
<li><a href="https://docs.mongodb.com/manual/reference/connection-string/" target="_blank" rel="external">MongoDB官方文档关于connection-string的详解</a></li>
<li><a href="http://www.runoob.com/mongodb/mongodb-connections.html" target="_blank" rel="external">菜鸟学院MongoDB连接</a></li>
</ul>
<h3 id="基本栗子"><a href="#基本栗子" class="headerlink" title="基本栗子"></a>基本栗子</h3><p>首先我们先了解<code>mgo</code>一些最基本的用法:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line"></div><div class="line">	<span class="string">"gopkg.in/mgo.v2"</span></div><div class="line">	<span class="string">"gopkg.in/mgo.v2/bson"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// Person is test</span></div><div class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</div><div class="line">	Name  <span class="keyword">string</span></div><div class="line">	Phone <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	session, err := mgo.Dial(<span class="string">"mongodb://127.0.0.1:27017/"</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> session.Close()</div><div class="line"></div><div class="line">	<span class="comment">// Optional. Switch the session to a monotonic behavior.</span></div><div class="line">	session.SetMode(mgo.Monotonic, <span class="literal">true</span>)</div><div class="line"></div><div class="line">	c := session.DB(<span class="string">"test"</span>).C(<span class="string">"people"</span>)</div><div class="line">	err = c.Insert(&amp;Person&#123;<span class="string">"Ale"</span>, <span class="string">"+55 53 8116 9639"</span>&#125;,</div><div class="line">		&amp;Person&#123;<span class="string">"Cla"</span>, <span class="string">"+55 53 8402 8510"</span>&#125;)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	result := Person&#123;&#125;</div><div class="line">	err = c.Find(bson.M&#123;<span class="string">"name"</span>: <span class="string">"Ale"</span>&#125;).One(&amp;result)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fmt.Println(<span class="string">"Phone:"</span>, result.Phone)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最终我们用mongo-shell连接数据库, 验证下程序是否生效:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; db.people.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a16dd323bde4bd3cde02654"</span>), <span class="string">"name"</span> : <span class="string">"Ale"</span>, <span class="string">"phone"</span> : <span class="string">"+55 53 8116 9639"</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a16dd323bde4bd3cde02655"</span>), <span class="string">"name"</span> : <span class="string">"Cla"</span>, <span class="string">"phone"</span> : <span class="string">"+55 53 8402 8510"</span> &#125;</div></pre></td></tr></table></figure></p>
<h3 id="微服务栗子"><a href="#微服务栗子" class="headerlink" title="微服务栗子"></a>微服务栗子</h3><p>下面是一个基于MongoDB的微服务的栗子:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/julienschmidt/httprouter"</span></div><div class="line">	<span class="string">"gopkg.in/mgo.v2"</span></div><div class="line">	<span class="string">"gopkg.in/mgo.v2/bson"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">ErrorWithJSON</span><span class="params">(w http.ResponseWriter, message <span class="keyword">string</span>, code <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">	w.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json; charset=utf-8"</span>)</div><div class="line">	w.WriteHeader(code)</div><div class="line">	fmt.Fprintf(w, <span class="string">"&#123;message: %q&#125;"</span>, message)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">ResponseWithJSON</span><span class="params">(w http.ResponseWriter, json []<span class="keyword">byte</span>, code <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">	w.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json; charset=utf-8"</span>)</div><div class="line">	w.WriteHeader(code)</div><div class="line">	w.Write(json)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Book <span class="keyword">struct</span> &#123;</div><div class="line">	ISBN    <span class="keyword">string</span>   <span class="string">`json:"isbn"`</span></div><div class="line">	Title   <span class="keyword">string</span>   <span class="string">`json:"title"`</span></div><div class="line">	Authors []<span class="keyword">string</span> <span class="string">`json:"authors"`</span></div><div class="line">	Price   <span class="keyword">string</span>   <span class="string">`json:"price"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	session, err := mgo.Dial(<span class="string">"localhost:27017"</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> session.Close()</div><div class="line"></div><div class="line">	session.SetMode(mgo.Monotonic, <span class="literal">true</span>)</div><div class="line">	ensureIndex(session)</div><div class="line"></div><div class="line">	router := httprouter.New()</div><div class="line">	router.GET(<span class="string">"/books"</span>, allBooks(session))</div><div class="line">	router.POST(<span class="string">"/books"</span>, addBook(session))</div><div class="line">	router.GET(<span class="string">"/books/:isbn"</span>, bookByISBN(session))</div><div class="line">	router.PUT(<span class="string">"/books/:isbn"</span>, updateBook(session))</div><div class="line">	router.DELETE(<span class="string">"/books/:isbn"</span>, deleteBook(session))</div><div class="line"></div><div class="line">	http.ListenAndServe(<span class="string">"localhost:8080"</span>, router)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">ensureIndex</span><span class="params">(s *mgo.Session)</span></span> &#123;</div><div class="line">	session := s.Copy()</div><div class="line">	<span class="keyword">defer</span> session.Close()</div><div class="line"></div><div class="line">	c := session.DB(<span class="string">"store"</span>).C(<span class="string">"books"</span>)</div><div class="line"></div><div class="line">	index := mgo.Index&#123;</div><div class="line">		Key:        []<span class="keyword">string</span>&#123;<span class="string">"isbn"</span>&#125;,</div><div class="line">		Unique:     <span class="literal">true</span>,</div><div class="line">		DropDups:   <span class="literal">true</span>,</div><div class="line">		Background: <span class="literal">true</span>,</div><div class="line">		Sparse:     <span class="literal">true</span>,</div><div class="line">	&#125;</div><div class="line">	err := c.EnsureIndex(index)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">allBooks</span><span class="params">(s *mgo.Session)</span> <span class="title">func</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</div><div class="line">		session := s.Copy()</div><div class="line">		<span class="keyword">defer</span> session.Close()</div><div class="line"></div><div class="line">		c := session.DB(<span class="string">"store"</span>).C(<span class="string">"books"</span>)</div><div class="line"></div><div class="line">		<span class="keyword">var</span> books []Book</div><div class="line">		err := c.Find(bson.M&#123;&#125;).All(&amp;books)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			ErrorWithJSON(w, <span class="string">"Database error"</span>, http.StatusInternalServerError)</div><div class="line">			log.Println(<span class="string">"Failed get all books: "</span>, err)</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		respBody, err := json.MarshalIndent(books, <span class="string">""</span>, <span class="string">"  "</span>)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			log.Fatal(err)</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		ResponseWithJSON(w, respBody, http.StatusOK)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">addBook</span><span class="params">(s *mgo.Session)</span> <span class="title">func</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</div><div class="line">		session := s.Copy()</div><div class="line">		<span class="keyword">defer</span> session.Close()</div><div class="line"></div><div class="line">		<span class="keyword">var</span> book Book</div><div class="line">		decoder := json.NewDecoder(r.Body)</div><div class="line">		err := decoder.Decode(&amp;book)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			ErrorWithJSON(w, <span class="string">"Incorrect body"</span>, http.StatusBadRequest)</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		c := session.DB(<span class="string">"store"</span>).C(<span class="string">"books"</span>)</div><div class="line"></div><div class="line">		err = c.Insert(book)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			<span class="keyword">if</span> mgo.IsDup(err) &#123;</div><div class="line">				ErrorWithJSON(w, <span class="string">"Book with this ISBN already exists"</span>, http.StatusBadRequest)</div><div class="line">				<span class="keyword">return</span></div><div class="line">			&#125;</div><div class="line"></div><div class="line">			ErrorWithJSON(w, <span class="string">"Database error"</span>, http.StatusInternalServerError)</div><div class="line">			log.Println(<span class="string">"Failed insert book: "</span>, err)</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		w.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</div><div class="line">		w.Header().Set(<span class="string">"Location"</span>, r.URL.Path+<span class="string">"/"</span>+book.ISBN)</div><div class="line">		w.WriteHeader(http.StatusCreated)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">bookByISBN</span><span class="params">(s *mgo.Session)</span> <span class="title">func</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</div><div class="line">		session := s.Copy()</div><div class="line">		<span class="keyword">defer</span> session.Close()</div><div class="line"></div><div class="line">		isbn := ps.ByName(<span class="string">"isbn"</span>)</div><div class="line"></div><div class="line">		c := session.DB(<span class="string">"store"</span>).C(<span class="string">"books"</span>)</div><div class="line"></div><div class="line">		<span class="keyword">var</span> book Book</div><div class="line">		err := c.Find(bson.M&#123;<span class="string">"isbn"</span>: isbn&#125;).One(&amp;book)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			ErrorWithJSON(w, <span class="string">"Database error"</span>, http.StatusInternalServerError)</div><div class="line">			log.Println(<span class="string">"Failed find book: "</span>, err)</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> book.ISBN == <span class="string">""</span> &#123;</div><div class="line">			ErrorWithJSON(w, <span class="string">"Book not found"</span>, http.StatusNotFound)</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		respBody, err := json.MarshalIndent(book, <span class="string">""</span>, <span class="string">"  "</span>)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			log.Fatal(err)</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		ResponseWithJSON(w, respBody, http.StatusOK)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateBook</span><span class="params">(s *mgo.Session)</span> <span class="title">func</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</div><div class="line">		session := s.Copy()</div><div class="line">		<span class="keyword">defer</span> session.Close()</div><div class="line"></div><div class="line">		isbn := ps.ByName(<span class="string">"isbn"</span>)</div><div class="line"></div><div class="line">		<span class="keyword">var</span> book Book</div><div class="line">		decoder := json.NewDecoder(r.Body)</div><div class="line">		err := decoder.Decode(&amp;book)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			ErrorWithJSON(w, <span class="string">"Incorrect body"</span>, http.StatusBadRequest)</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		c := session.DB(<span class="string">"store"</span>).C(<span class="string">"books"</span>)</div><div class="line"></div><div class="line">		err = c.Update(bson.M&#123;<span class="string">"isbn"</span>: isbn&#125;, &amp;book)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			<span class="keyword">switch</span> err &#123;</div><div class="line">			<span class="keyword">default</span>:</div><div class="line">				ErrorWithJSON(w, <span class="string">"Database error"</span>, http.StatusInternalServerError)</div><div class="line">				log.Println(<span class="string">"Failed update book: "</span>, err)</div><div class="line">				<span class="keyword">return</span></div><div class="line">			<span class="keyword">case</span> mgo.ErrNotFound:</div><div class="line">				ErrorWithJSON(w, <span class="string">"Book not found"</span>, http.StatusNotFound)</div><div class="line">				<span class="keyword">return</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		w.WriteHeader(http.StatusNoContent)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteBook</span><span class="params">(s *mgo.Session)</span> <span class="title">func</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</div><div class="line">		session := s.Copy()</div><div class="line">		<span class="keyword">defer</span> session.Close()</div><div class="line"></div><div class="line">		isbn := ps.ByName(<span class="string">"isbn"</span>)</div><div class="line"></div><div class="line">		c := session.DB(<span class="string">"store"</span>).C(<span class="string">"books"</span>)</div><div class="line"></div><div class="line">		err := c.Remove(bson.M&#123;<span class="string">"isbn"</span>: isbn&#125;)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			<span class="keyword">switch</span> err &#123;</div><div class="line">			<span class="keyword">default</span>:</div><div class="line">				ErrorWithJSON(w, <span class="string">"Database error"</span>, http.StatusInternalServerError)</div><div class="line">				log.Println(<span class="string">"Failed delete book: "</span>, err)</div><div class="line">				<span class="keyword">return</span></div><div class="line">			<span class="keyword">case</span> mgo.ErrNotFound:</div><div class="line">				ErrorWithJSON(w, <span class="string">"Book not found"</span>, http.StatusNotFound)</div><div class="line">				<span class="keyword">return</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		w.WriteHeader(http.StatusNoContent)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 创建一本book</span></div><div class="line"> maojun@maojun-mbp $ curl -X POST \</div><div class="line">&gt;   http://localhost:8080/books \</div><div class="line">&gt;   -H <span class="string">'content-type: application/json'</span> \</div><div class="line">&gt;   <span class="_">-d</span> <span class="string">'&#123;"isbn": "aabbxx", "title": "test titile", "authors":["bob", "aollen"], "price": "100"&#125;'</span></div><div class="line"><span class="comment"># 查看创建的book列表</span></div><div class="line"> maojun@maojun-mbp $ curl -X GET http://localhost:8080/books</div><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="string">"isbn"</span>: <span class="string">"aabbxx"</span>,</div><div class="line">    <span class="string">"title"</span>: <span class="string">"test titile"</span>,</div><div class="line">    <span class="string">"authors"</span>: [</div><div class="line">      <span class="string">"bob"</span>,</div><div class="line">      <span class="string">"aollen"</span></div><div class="line">    ],</div><div class="line">    <span class="string">"price"</span>: <span class="string">"100"</span></div><div class="line">  &#125;</div><div class="line">]</div><div class="line"><span class="comment"># 查看指定的book</span></div><div class="line"> maojun@maojun-mbp $ curl -X GET http://localhost:8080/books/aabbxx</div><div class="line">&#123;</div><div class="line">  <span class="string">"isbn"</span>: <span class="string">"aabbxx"</span>,</div><div class="line">  <span class="string">"title"</span>: <span class="string">"test titile"</span>,</div><div class="line">  <span class="string">"authors"</span>: [</div><div class="line">    <span class="string">"bob"</span>,</div><div class="line">    <span class="string">"aollen"</span></div><div class="line">  ],</div><div class="line">  <span class="string">"price"</span>: <span class="string">"100"</span></div><div class="line">&#125;</div><div class="line"><span class="comment"># 更新指定的book</span></div><div class="line"> maojun@maojun-mbp $ curl -X PUT \</div><div class="line">&gt;   http://localhost:8080/books/aabbxx \</div><div class="line">&gt;   -H <span class="string">'content-type: application/json'</span> \</div><div class="line">&gt;   <span class="_">-d</span> <span class="string">'&#123;"isbn": "aabbxx", "price": "99"&#125;'</span></div><div class="line"><span class="comment"># 删除指定的book</span></div><div class="line"> ✘ maojun@maojun-mbp $ curl -X DELETE http://localhost:8080/books/aabbxx</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.mongodb.com/manual/" target="_blank" rel="external">mongodb使用手册</a><br><a href="https://www.mongodb.com/zh/mongodb-architecture" target="_blank" rel="external">mongodb架构文档</a><br><a href="http://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="external">菜鸟学院mongodb教程</a><br><a href="http://labix.org/mgo" target="_blank" rel="external">mgo文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上篇博客中介绍了NoSQL以及文档数据库, 这篇博客介绍当下最流行的文档数据库:MongoDB。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="mongodb" scheme="https://blog.yumaojun.net/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>构建Golang程序最小Docker镜像</title>
    <link href="https://blog.yumaojun.net/2017/11/20/golang-mini-docker-image/"/>
    <id>https://blog.yumaojun.net/2017/11/20/golang-mini-docker-image/</id>
    <published>2017-11-20T01:26:22.000Z</published>
    <updated>2017-11-20T14:50:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>应用容器化方便了部署，避免实际中开发环境和生产环境不一致而导致的部署困难, 而且，容器化之后还可以对应用所使用的CPU、内存等资源做限制，这些都是容器化之后的可以带来的方便。这篇文章将会将如何build Docker镜像(最小化build), 容器化你的Golang应用。<br><a id="more"></a></p>
<h2 id="为什么需要构建小的镜像"><a href="#为什么需要构建小的镜像" class="headerlink" title="为什么需要构建小的镜像"></a>为什么需要构建小的镜像</h2><p>我们知道构建一个Docker镜像的时候往往需要引入一些程序依赖的东西，最常见的就是引入一个基础操作系统镜像，但这样往往会使得编译出来的镜像特别大。就拿Python来说, 之前build的镜像一般都大于600M, 如果这个项目是内部项目, 其实问题不大, 因为内网一般也会搭建镜像仓库, 内网数据也快, 但是如果是开源项目, 镜像过大就是个问题。对拉取者带宽要求较高, 而Docker hub的速度大家也都知道, 当然如果你使用镜像加速体验会好很多。但是如果能做到把镜像变小, 做到几M, 几十M那么对于你项目的使用者来说体验会好很多.</p>
<p>因为Go是静态编译语言, 可以做到0依赖, 因此可以构建很小的程序镜像, 但是其实还是有些小插曲, 这也就是这篇文章出现的原因.</p>
<h2 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h2><p>这里以一个简单的hello world的WEB API程序为例:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// greeter hello world example</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">greeter</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">	w.Write([]<span class="keyword">byte</span>(<span class="string">"hello world!"</span>))</div><div class="line">	w.WriteHeader(http.StatusOK)</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	http.HandleFunc(<span class="string">"/"</span>, greeter)</div><div class="line">	addr := <span class="string">"0.0.0.0:8080"</span></div><div class="line">	log.Printf(<span class="string">"start service at: %s ... \n"</span>, addr)</div><div class="line">	err := http.ListenAndServe(addr, <span class="literal">nil</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(<span class="string">"ListenAndServe: "</span>, err)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最终会把这个程序打包成一个最小的docker镜像进行发布, 让我们看看这样一个镜像build出来过后到底有多大。</p>
<h2 id="编译时的问题"><a href="#编译时的问题" class="headerlink" title="编译时的问题"></a>编译时的问题</h2><p>编译时的主要问题就是如果将Golang程序编译成一个真正没有依赖的二进制程序, 也许有人会问Go本身不就是静态编译吗？这里就需要聊聊Golang里面CGO了。</p>
<ol>
<li><p>关于<code>-installsuffix cgo</code>参数<br>Go1.5版本之前，Go里面的一些库函数是用C实现的(网络方面的居多), 也就是CGO。如果你的代码中使用了这些C实现的库函数，那你就要加上<code>-installsuffix cgo</code>这个参数，让它编译的时候去CGO里面找，否则编译时会报错。但是Go1.5版本开始实现了自举，所有的标准库都是用Go代码实现，就不存在这个问题了。所以，如果你的Go版本是1.5之前的，最好加上这个参数，当然如果你的代码中没用使用C实现的库，那不加也不会报错。如果你的Go是1.5及之后的版本，就不需要再加这个参数了。</p>
</li>
<li><p>关于<code>CGO_ENABLED=0</code>参数<br>CGO_ENABLED=0表示静态编译cgo, 不会link系统上的一些动态链接库, 如果想要编译的二进制包正在无依赖, 这需要禁用CGO</p>
</li>
</ol>
<p>有了上面2点, 我们一般会这样build我们的程序:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 如果Golang&lt;1.5</span></div><div class="line">CGO_ENABLED=0 GOOS=linux go build <span class="_">-a</span> -v -installsuffix cgo -o app .</div><div class="line"><span class="comment"># 如果Golang&gt;1.5</span></div><div class="line">CGO_ENABLED=0 GOOS=linux go build <span class="_">-a</span> -v -o app .</div></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">maojun@maojun-mbp $ du -sh app</div><div class="line">5.8M	app</div></pre></td></tr></table></figure>
<p>这样我们就编译好了一个0依赖的二进制包, 打出来的包5.8M, 接下来我们将基于它制造docker镜像。</p>
<h2 id="如何选择镜像的Base依赖"><a href="#如何选择镜像的Base依赖" class="headerlink" title="如何选择镜像的Base依赖"></a>如何选择镜像的Base依赖</h2><p>在选择我们打包好的二进制包的运行依赖时, 我一般会有这3种考虑:</p>
<ul>
<li>scratch: 它是一个特殊的镜像, 因为它是一个空镜像。但是它却是非常重要。我们知道Dockerfile文件必须以FROM开头，但如果我们的镜像真的是不依赖任何其他东西的时候，我们就可以FROM scratch。在Docker 1.5.0之后，FROM scratch已经变成一个空操作(no-op)，也就是说它不会再单独占一层了, 当然依赖这层的大小也就为0了, 因此基于此可以构建最小镜像。</li>
<li>alpine: Alpine Linux是一个社区开发的面向安全应用的轻量级Linux发行版, 适合用来做Docker镜像、路由器、防火墙、VPNs、VoIP 盒子 以及服务器的操作系统，基于<code>uClibc</code>和<code>Busybox</code>, 大小只有3.97M。</li>
<li>ubuntu: 这个不用多做介绍了, 如果你信不过alpine这也算一个不错的选择, ubuntu16.04的镜像大小为128M。</li>
</ul>
<p>我们选择<code>alpine</code>作为base依赖, 因为它足够小, 而且是一个linux, 有shell环境, 以备有时需要进入容器。完整的Dockerfile如下:<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> alpine:latest</div><div class="line"></div><div class="line"><span class="keyword">ADD</span><span class="bash"> app /</span></div><div class="line"></div><div class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/app"</span>]</span></div></pre></td></tr></table></figure></p>
<h2 id="最终镜像大小"><a href="#最终镜像大小" class="headerlink" title="最终镜像大小"></a>最终镜像大小</h2><p>基于刚才写好的dockerfile进行build:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> maojun@maojun-mbp $ docker build -t app:v0.0.1 .</div><div class="line">Sending build context to Docker daemon  6.094MB</div><div class="line">Step 1/3 : FROM alpine:latest</div><div class="line"> ---&gt; 053cde6e8953</div><div class="line">Step 2/3 : ADD app /</div><div class="line"> ---&gt; 765750f573f1</div><div class="line">Step 3/3 : CMD /app</div><div class="line"> ---&gt; Running <span class="keyword">in</span> cb62cfd2ad1e</div><div class="line"> ---&gt; 188a3189d4f8</div><div class="line">Removing intermediate container cb62cfd2ad1e</div><div class="line">Successfully built 188a3189d4f8</div><div class="line">Successfully tagged app:v0.0.1</div></pre></td></tr></table></figure></p>
<p>build出来的image大小:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app                              v0.0.1              188a3189d4f8        2 minutes ago       10.1MB</div></pre></td></tr></table></figure></p>
<p>最后我们测试下build的镜像是否可以正常使用:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> maojun@maojun-mbp $ docker run -itd -p 8080:8080 app:v0.0.1</div><div class="line">9fe96a7868679f8be4e34905755dcd93343a70b9a0424791de2482647e69b2d8</div><div class="line"> maojun@maojun-mbp $ docker ps</div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</div><div class="line">9fe96a786867        app:v0.0.1          <span class="string">"/app"</span>                   4 seconds ago       Up 2 seconds        0.0.0.0:8080-&gt;8080/tcp   hungry_kilby</div><div class="line"> maojun@maojun-mbp $ curl localhost:8080</div><div class="line">hello world!%</div></pre></td></tr></table></figure></p>
<p>最终镜像大小: 10.1M, 并且带有shell, 如果你使用<code>scratch</code>构建估计只有6M多点, 但是实用性可能会有所降低。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;应用容器化方便了部署，避免实际中开发环境和生产环境不一致而导致的部署困难, 而且，容器化之后还可以对应用所使用的CPU、内存等资源做限制，这些都是容器化之后的可以带来的方便。这篇文章将会将如何build Docker镜像(最小化build), 容器化你的Golang应用。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="build" scheme="https://blog.yumaojun.net/tags/build/"/>
    
  </entry>
  
  <entry>
    <title>Golang程序版本管理</title>
    <link href="https://blog.yumaojun.net/2017/11/19/golang-cli-version/"/>
    <id>https://blog.yumaojun.net/2017/11/19/golang-cli-version/</id>
    <published>2017-11-19T06:45:15.000Z</published>
    <updated>2017-11-19T15:32:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目在完成后往往都需要版本化, 而Golang项目往往交付的是编译过后的二进制包, 如何通过二进制包知道项目的版本, 就像docker的version命令一样楠?<br><a id="more"></a></p>
<h2 id="为什么需要版本管理"><a href="#为什么需要版本管理" class="headerlink" title="为什么需要版本管理"></a>为什么需要版本管理</h2><p>版本管理主要用于对运行程序的版本追踪,从而可以管理线上服务的运行版本,避免各个版本的服务程序混淆.这里通常的做法为在程序中埋入版本标志,同时该版本号会对应到git上的tag或release版本.从而对线上服务更改有一个更全面的信息说明。</p>
<p>比如docker的版本信息:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> maojun@maojun-mbp $ docker version</div><div class="line">Client:</div><div class="line"> Version:      17.09.0-ce</div><div class="line"> API version:  1.32</div><div class="line"> Go version:   go1.8.3</div><div class="line"> Git commit:   afdb6d4</div><div class="line"> Built:        Tue Sep 26 22:40:09 2017</div><div class="line"> OS/Arch:      darwin/amd64</div><div class="line">...</div></pre></td></tr></table></figure></p>
<h2 id="GUN风格版本命名方式和规则"><a href="#GUN风格版本命名方式和规则" class="headerlink" title="GUN风格版本命名方式和规则"></a>GUN风格版本命名方式和规则</h2><p>这里将介绍基于GNU风格的一种版本命名方式, 这也是当今主流的版本命名方式, 很多开源项目的版本命名都遵循此风格。<br>GUN风格版本命名风格:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Major_Version_Number.Minor_Version_Number[.Revision_Number[.Build_Number]] </div><div class="line">主版本号.子版本号[.修正版本号[.编译版本号]]</div><div class="line">示例 : 1.2.1, 2.0, 5.0.0.build-13124</div></pre></td></tr></table></figure></p>
<ul>
<li>Major: 具有相同名称但不同主版本号的程序集不可互换。例如，这适用于对产品的大量重写，这些重写使得无法实现向后兼容性。</li>
<li>Minor: 如果两个程序集的名称和主版本号相同，而次版本号不同，这指示显著增强，但照顾到了向后兼容性。例如，这适用于产品的修正版或完全向后兼容的新版本。</li>
<li>Revision: 名称、主版本号和次版本号都相同但修订号不同的程序集应是完全可互换的。这适用于修复以前发布的程序集中的安全漏洞。</li>
<li>Build: 内部版本号的不同表示对相同源所作的重新编译。这适合于更改处理器、平台或编译器的情况。</li>
</ul>
<p>版本号的变化一般遵循如下规则:</p>
<ul>
<li>项目初版本   : 版本号可以为 0.1 或 0.1.0, 也可以为 1.0 或 1.0.0.</li>
<li>修正版本号增加: 当项目在进行了局部修改或 bug 修正时，主版本号和子版本号都不变,修正版本号加1.</li>
<li>子版本号增加  : 当项目在原有的基础上增加了部分功能时，主版本号不变，子版本号加 1，修正版本号复位为 0，因而可以被忽略掉.</li>
<li>主版本号增加  : 当项目在进行了重大修改或局部修正累积较多，而导致项目整体发生全局变化时.</li>
<li>编译版本号变化 : 编译版本号一般是编译器在编译过程中自动生成的，我们只定义其格式，并不进行人为控制</li>
</ul>
<h2 id="如何埋入版本信息"><a href="#如何埋入版本信息" class="headerlink" title="如何埋入版本信息"></a>如何埋入版本信息</h2><p>写C/C++代码时，可以在代码中预定义一些版本宏定义，然后再编译时从外部传入数据作为版本号, golang代码不支持宏定义, 但是go build时提供了一个与之相似的功能参数:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-ldflags <span class="string">'flag list'</span></div><div class="line">	arguments to pass on each go tool link invocation.</div></pre></td></tr></table></figure></p>
<p>然后查看<a href="https://golang.org/cmd/link/" target="_blank" rel="external">go tool link的相关文档</a>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-X importpath.name=value</div><div class="line">	Set the value of the string variable <span class="keyword">in</span> importpath named name to value.</div><div class="line">	Note that before Go 1.5 this option took two separate arguments.</div><div class="line">	Now it takes one argument split on the first = sign.</div></pre></td></tr></table></figure></p>
<p>按照文档中的说明应该是在build时，通过-ldflags设定linker的参数。 然后再通过linker的-X来修改指定路径下面的变量值<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"> </div><div class="line"><span class="keyword">import</span> ( </div><div class="line"> <span class="string">"fmt"</span></div><div class="line">)</div><div class="line"> </div><div class="line"><span class="keyword">var</span> (</div><div class="line">    VERSION</div><div class="line">)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; </div><div class="line"> fmt.Printf(<span class="string">"Version:[%s]\n"</span>, VERSION)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译时传入变量:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ go build -ldflags <span class="string">"-X main.VERSION=v1.0.0-alpha1"</span> main.go</div><div class="line">$ ./main</div><div class="line">Version:[v1.0.0-alpha1]</div></pre></td></tr></table></figure></p>
<h2 id="最终样例"><a href="#最终样例" class="headerlink" title="最终样例"></a>最终样例</h2><p>如果我们直接在项目入口文件处埋入版本信息, 对项目入口侵入太大, 因此你会看到一些好的开源项目下都有一个专门的version包, 由它来负责接收埋入的版本信息。</p>
<p>最终示例请参考: <a href="https://github.com/yumaojun03/golang/tree/master/version-example" target="_blank" rel="external">Golang程序版本管理代码示例</a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> maojun@maojun-mbp $ ./version-example -v</div><div class="line">Version   : v0.0.1-alpha.0</div><div class="line">Build Time: 2017-11-19 23:28:12</div><div class="line">Git Branch: master</div><div class="line">Git Commit: 83de09af3f96007726edd5b308ed989476b9f358</div><div class="line">Go Version: go1.9 linux/amd64</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目在完成后往往都需要版本化, 而Golang项目往往交付的是编译过后的二进制包, 如何通过二进制包知道项目的版本, 就像docker的version命令一样楠?&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="build" scheme="https://blog.yumaojun.net/tags/build/"/>
    
  </entry>
  
  <entry>
    <title>数据库分类以及NoSQL介绍</title>
    <link href="https://blog.yumaojun.net/2017/11/05/mongodb-introduce/"/>
    <id>https://blog.yumaojun.net/2017/11/05/mongodb-introduce/</id>
    <published>2017-11-05T08:59:52.000Z</published>
    <updated>2017-11-19T06:38:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于项目需要存储一些无结构的数据, 这些数据主要以文本为主, 同时还需支持一些文本分析, 咋一听似乎ES是一个不错的选择, 但是这些无结构的数据同时也需要被管理, 也就是这些数据可能经常变更, 衡量再三, 最后还是选择了Mongo, 毕竟现阶段是以数据的存储和管理为主, 分析并没有那么强的需求。整篇文章以大数据存储问题为引, 一步步引出NoSQL领域文档数据的代表MongoDB。<br><a id="more"></a></p>
<h2 id="大数据存储问题"><a href="#大数据存储问题" class="headerlink" title="大数据存储问题"></a>大数据存储问题</h2><p>E.F.Codd在1970年首次提出了数据库系统的关系模型，从此开创了数据库关系方法和关系数据理论的研究，为数据库技术奠定了理论基础，数据库技术也开始蓬勃发展。而随着几大数据库厂商陆续发布的商业数据库管理系统几乎都支持关系数据模型，数据库技术逐渐统一到以关系型数据库为主导。关系模型有扎实的数学理论做基础, 并且经过长时间的实践, 使得其在数据存储与管理领域占据统治地位。</p>
<p>2001年后，互联网技术迅速发展，数据量迅速膨胀并并大，人类逐步进入大数据时代。大数据给传统的数据管理方式带来了严峻的挑战，关系型数据库在容量，性能，成本等多方面都难以满足大数据管理的需求。NoSQL数据库通过折中关系型数据库严格的数据一致性管理，在可扩展性、模型灵活性、经济性和访问性等方面获得了很大的优势，可以更好地适应大数据应用的需求，成为大数据时代最重要的数据管理技术。</p>
<p>围绕大数据的存储问题, 我们依次讨论下数据库的几大分类: RDBMS, NewSQL, NoSQL。</p>
<h3 id="RDBMS"><a href="#RDBMS" class="headerlink" title="RDBMS"></a>RDBMS</h3><p>在现代的计算系统上每天网络上都会产生庞大的数据量。这些数据有很大一部分是由关系数据库管理系统(RDMBSs)来处理。 1970年 E.F.Codd’s提出的关系模型的论文 “A relational model of data for large shared data banks”，这使得数据建模和应用程序编程更加简单。<br>通过应用实践证明，关系模型是非常适合于客户服务器编程，远远超出预期的利益，今天它是结构化数据存储在网络和商务应用的主导技术。</p>
<blockquote>
<p>什么是RDBMS？</p>
</blockquote>
<p>RDBMS全称是<code>Relational Database Management System</code>, 及关系型数据管理系统, 他采用关系模型来存储数据,关系模型是把复杂的数据结构归结为简单的二元关系(即二维表格形式), 在关系型数据库中，对数据的操作几乎全部建立在一个或多个关系表格上，通过对这些关联的表格分类、合并、连接或选取等运算来实现数据库的管理。</p>
<blockquote>
<p>关系型数据的特点(ACID)</p>
</blockquote>
<p>关系型数据库遵循ACID规则, 也就是我们常说的事物模型(transaction), 事物这个概念和现实世界中的交易很类似, 它有如下4个特性:</p>
<ul>
<li>A(Atomicity)<br>原子性很容易理解，也就是说事务里的所有操作要么全部做完，要么都不做，事务成功的条件是事务里的所有操作都成功，只要有一个操作失败，整个事务就失败，需要回滚。<br>比如银行转账，从A账户转100元至B账户，分为两个步骤：1）从A账户取100元；2）存入100元至B账户。这两步要么一起完成，要么一起不完成，如果只完成第一步，第二步失败，钱会莫名其妙少了100元。</li>
<li>C(Consistency)<br>一致性也比较容易理解，也就是说数据库要一直处于一致的状态，事务的运行不会改变数据库原本的一致性约束。<br>例如现有完整性约束a+b=10，如果一个事务改变了a，那么必须得改变b，使得事务结束后依然满足a+b=10，否则事务失败。</li>
<li>I(Isolation)<br>所谓的独立性是指并发的事务之间不会互相影响，如果一个事务要访问的数据正在被另外一个事务修改，只要另外一个事务未提交，它所访问的数据就不受未提交事务的影响。<br>比如现有有个交易是从A账户转100元至B账户，在这个交易还未完成的情况下，如果此时B查询自己的账户，是看不到新增加的100元的。</li>
<li>D(Durability)<br>持久性是指一旦事务提交后，它所做的修改将会永久的保存在数据库上，即使出现宕机也不会丢失。<br>比如A账户收到了100元到账, 只要到账这个事物完成, 数据就已经到数据库里面了, 即使此时宕机对A用户的资产也没有影响。</li>
</ul>
<blockquote>
<p>典型的产品</p>
</blockquote>
<p>关系型数据库诞生40多年了，从理论产生发展到现实产品, RDBMS很多产品应该都是耳熟能详的:</p>
<ul>
<li>Oracle</li>
<li>MySQL</li>
<li>PostgreSQL</li>
<li>SQLServer</li>
</ul>
<blockquote>
<p>大数据存储时面临的问题</p>
</blockquote>
<p>关系型数据库严格ACID原则, 因此在扩展性上表现不是特别好, 面对大规模的数据时, 在读和写上面会出现严重瓶颈。想要提升其性能, 往往需要从业务层进行处理, 进行数据的Sharding。<br>sharding有2个维度: 水平切分和垂直切分:</p>
<ul>
<li>水平切分: 根据表中的数据的逻辑关系，将同一张表的数据，按照某种条件切分到不同的数据库主机上</li>
<li>垂直切分: 按照不同的表或者schema，来切分到不同的数据库主机上</li>
</ul>
<p>切片(sharding)会增加整个系统的复杂性，而且切片本身也是一个很复杂的过程，与应用本身有这密切的关系，所以对于不但增大的数据而言，切片并不能从根本上解决大数据存储问题。</p>
<h3 id="NewSQL"><a href="#NewSQL" class="headerlink" title="NewSQL"></a>NewSQL</h3><p>传统的关系型数据想要做到高扩展, 高性能, 高可靠性是很复杂的, 但是当你的确想要一种这种样的数据库时, NewSQL可能是你一种不错的选择。</p>
<blockquote>
<p>什么是NewSQL？</p>
</blockquote>
<p>这是一个中间产物, 是一种完全不同的数据库架构, NewSQL术语最早在2011年由Matthew Aslett创造, NewSQL的设计立足于传统的关系型数据库，但是同时也引进一些新技术，从而达到可扩展和高性能的目的, 而缺点是没有提供强一致性, 它们不可以被使用在强一致性环境下。<br>NewSQL具有NoSQL的海量数据存储管理能力,同时还支持传统数据库的ACID和SQL能力(单个节点上的ACID能力), 但是在现实使用中还没普及开来, 还没被大规模使用。</p>
<blockquote>
<p>NewSQL的特点</p>
</blockquote>
<p>NewSQL具体和RDBMS一样的单个节点上的ACID能力, 同时又具有NoSQL一样的很强的扩展能力(它在整个集群上遵循BASE规则, 关于BASE在后面NoSQL中再做介绍)。</p>
<blockquote>
<p>典型的NewSQL产品</p>
</blockquote>
<p>我迄今也没有使用过NewSQL产品, 以下是我所知的关于NewSQL的经典产品:</p>
<ul>
<li>Google spanner: Google的全球级的分布式数据库(Globally-Distributed Database)</li>
<li>CockroachDB: 参考Goole spanner实现的开源版</li>
</ul>
<blockquote>
<p>如何解决大数据存储问题？</p>
</blockquote>
<p>NewSQL基于NoSQL的BASE原则, 构建可以横向扩展的分布式系统来解决大数据的存储和管理问题。</p>
<h3 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><p>今天我们可以通过第三方平台(如：Google,Facebook等), 可以很容易的访问和抓取数据。用户的个人信息，社交网络，地理位置，用户生成的数据和用户操作日志已经成倍的增加。我们如果要对这些用户数据进行挖掘，那SQL数据库已经不适合这些应用了, NoSQL数据库的发展也却能很好的处理这些大的数据。</p>
<blockquote>
<p>什么是NoSQL？</p>
</blockquote>
<p>NoSQL(NoSQL = Not Only SQL)，意即“不仅仅是SQL”，是一项全新的数据库革命性运动，早期就有人提出，发展至2009年趋势越发高涨。NoSQL的拥护者们提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入</p>
<blockquote>
<p>NoSQL的特点(BASE)</p>
</blockquote>
<p>BASE的全称是Basically Available, Soft-state, Eventually Consistent。 由<code>Eric Brewer</code>定义。ACID强调强一致性(CAP中的C), 而BASE则强调基本可用性(CAP中的A），在BASE思想的扩展下，就出现了NoSQL。<br>BASE是NoSQL数据库通常对可用性及一致性的弱要求原则:</p>
<ul>
<li>Basically Availble: 基本可用</li>
<li>Soft-state: 软状态/柔性事务。 “Soft state” 可以理解为”无连接”的, 而 “Hard state” 是”面向连接”的</li>
<li>Eventual Consistency: 最终一致性 最终一致性， 也是是 ACID 的最终目的。</li>
</ul>
<p>BASE是相对ACID而言的, 下面是对比表:</p>
<table>
<thead>
<tr>
<th style="text-align:left">ACID</th>
<th style="text-align:right">BASE</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">A原子性(Atomicity)</td>
<td style="text-align:right">基本可用(Basically Available)</td>
</tr>
<tr>
<td style="text-align:left">一致性(Consistency)</td>
<td style="text-align:right">软状态/柔性事务(Soft state)</td>
</tr>
<tr>
<td style="text-align:left">隔离性(Isolation)</td>
<td style="text-align:right">最终一致性 (Eventual consistency)</td>
</tr>
<tr>
<td style="text-align:left">持久性 (Durable)</td>
<td style="text-align:right">支持</td>
</tr>
</tbody>
</table>
<blockquote>
<p>典型的NoSQL产品</p>
</blockquote>
<p>NoSQL是实现方式各不相同，下面主要介绍 主流的NoSQL流派, 想要了解更具体的信息请点击<a href="http://www.nosql-database.org/" target="_blank" rel="external">关于所有NoSQL介绍的一个网站</a>:</p>
<ul>
<li><p>列式数据模型<br>数据模型： 看到也是表, 但是不支持链接查询, 因为数据存储以列为单位(column), 而关系数据库是以行为存储单位的<br>应用场景： 在分布式文件系统之上提供支持随机读写的分布式数据存储<br>典型产品： Hbase、 Hypertable、 Bigtable、 Cassandra<br>优点： 快速查询、 高扩展性、易于实现分布式扩展</p>
</li>
<li><p>文档数据模型 ：<br>数据模型： 介于键值存储kv)和关系型存储(row),每一行数据组织为一个文档, 以文档为存储单位<br>应用场景： 非强事物需求的web应用<br>典型产品： MongoDB、 ElasticSearch(弹性搜索，存储web日志)<br>优点：　数据模型无需事先定义</p>
</li>
<li><p>键值数据模型 ：<br>数据模型： 模型简单, 易于实现, 操作简单(get set del)<br>应用场景： 内容缓存, 用于大量并行数据访问, 高负载场景<br>应用产品：  DynamoDB, Riak, Redis<br>优点：  hash的优点， 查询迅速</p>
</li>
<li><p>图式数据模型 ：<br>数据模型： 图式结构<br>应用场景： 社交网络、 推荐系统、 关系图谱<br>典型产品： Neo4J<br>优点： 适用于图式技术场景</p>
</li>
</ul>
<blockquote>
<p>如何解决大数据存储问题？</p>
</blockquote>
<p>通过分布式解决</p>
<h3 id="RDBMS-vs-NoSQL"><a href="#RDBMS-vs-NoSQL" class="headerlink" title="RDBMS vs NoSQL"></a>RDBMS vs NoSQL</h3><p>RDBMS的特点:</p>
<ul>
<li>高度组织化结构化数据 </li>
<li>结构化查询语言</li>
<li>数据和关系都存储在单独的表中。 </li>
<li>数据操纵语言，数据定义语言 </li>
<li>严格的一致性</li>
<li>基于事务</li>
</ul>
<p>NoSQL的特点: </p>
<ul>
<li>代表着不仅仅是SQL</li>
<li>没有声明性查询语言</li>
<li>没有预定义的模式, 架构的灵活性，支持半结构化数据</li>
<li>键值对存储，列存储，文档存储，图形数据库</li>
<li>最终一致性，而非ACID属性</li>
<li>非结构化和不可预知的数据</li>
<li>分布式计算, CAP定理 </li>
<li>高性能，高可用性和可伸缩性, 高水平扩展能力和低成本的低端硬件集群</li>
<li>功能相对简单, 没有统一的查询语言, 有限的查询功能</li>
<li>最终一致是不直观的程序</li>
</ul>
<h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p>对于数据本身而言, 我们往往将其分为结构化数据, 半结构化数据, 以及非结构化数据, 但是对于储存时数据的组织我们才称其为数据模型, 常见的数据模型有: 关系模型, 文档模型, 健值模型, 以及列式模式。</p>
<h3 id="用户侧数据"><a href="#用户侧数据" class="headerlink" title="用户侧数据"></a>用户侧数据</h3><p>随着网络技术的发展，特别是Internet和Intranet技术的飞快发展，使得非结构化数据的数量日趋增大。这时，主要用于管理结构化数据的关系数据库的局限性暴露地越来越明显。因而，数据库技术相应地进入了“后关系数据库时代”，发展进入基于网络应用的非结构化数据库时代。<br><img src="http://www.runoob.com/wp-content/uploads/2013/10/bigdata.png" alt=""></p>
<blockquote>
<p>结构化数据(structured data)</p>
</blockquote>
<p>结构化数据, 即行数据,存储在数据库里,可以用二维表结构来逻辑表达实现的数据。<br>结构化数据, <code>先知结构, 再有数据</code>。 我们根据数据的结构预先建立好二维表, 等数据来的时候, 填入即可。因此结构化的数据往往是可建模, 标准化的数据, 结构化的数据很方便程序使用, 因为结构已知。</p>
<p>结构化数据最大的问题, 就当数据的结构发生变化时, 我们需要调整数据的结构, 一般就意味着数据库表结构的需要变动。这使得数据在存储时有严格的要求(需要定义schema)。<br>结构化数据: 可以被提前建模的数据(定义schema)</p>
<blockquote>
<p>半结构化数据(semi-structured data)</p>
</blockquote>
<p>所谓半结构化数据，就是介于完全结构化数据(如关系型数据库、面向对象数据库中的数据)和完全无结构的数据(如声音、图像文件等)之间的数据，HTML文档就属于半结构化数据。它一般是自描述的，数据的结构和内容混在一起，没有明显的区分。<br>所以对于半结构化的数据, 数据的结构要等数据获得后才知道, 也就是<code>先有数据, 后知结构</code>。整个互联网上这类数据是很多的, 因为html就是半结构化的数据。</p>
<p>相对于结构化的数据, 半结构化数据无需定义数据的结构(schema free), 使得其在存储上表现出强大的灵活性。<br>半结构化数据:  HTML, JSON, XML</p>
<blockquote>
<p>非结构化数据(unstructured data)</p>
</blockquote>
<p>相对于结构化数据而言，不方便用数据库二维逻辑表来表现的数据即称为非结构化数据。<br>非结构化数据库是指其字段长度可变，并且每个字段的记录又可以由可重复或不可重复的子字段构成的数据库，用它不仅可以处理结构化数据(如数字、符号等信息), 而且更适合处理非结构化数据（全文文本、图象、声音、影视、超媒体等信息)。</p>
<p>非结构化WEB数据库主要是针对非结构化数据而产生的，与以往流行的关系数据库相比，其最大区别在于它突破了关系数据库结构定义不易改变和数据定长的限制，支持重复字段、子字段以及变长字段并实现了对变长数据和重复字段进行处理和数据项的变长存储管理，在处理连续信息（包括全文信息）和非结构化信息（包括各种多媒体信息）中有着传统关系型数据库所无法比拟的优势。<br>非结构化数据: 所有格式的办公文档、文本、图片、XML、HTML、各类报表、图像和音频/视频信息等等。</p>
<h3 id="存储时数据"><a href="#存储时数据" class="headerlink" title="存储时数据"></a>存储时数据</h3><p>数据存储模型值数据存储时如何组织</p>
<h4 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h4><p>关系模型: 新定义列, 然后通过行的方式对数据进行存储, 以二维表来表示实体与实体之间的联系，在数据建模时需要对数据对象进行拆分，再将各自的信息存到对应的表里，在需要时再将各个表连接起来。<br><img src="http://oiw1gzfww.bkt.clouddn.com/relationship_data.jpeg" alt=""></p>
<p>在关系模型当中，多个表中的不同记录经常“交错连接”，一些数据会被多条记录共享。这样的好处就是减少了重复数据的出现，但是这样不好的地方就是一旦其中某一条链接的记录发生改变，那么与其相关的记录和表都会被锁住以防止非一致性的出现。 ACID事务在关系型数据库中是很复杂的，因为数据会扩散。即便是单一条记录，这复杂的共享数据内部关系网的存在，也使得关系型数据在多个服务器之间的传递变得复杂而缓慢，同时让读和写操作的性能变差。<br>当存储空间昂贵又稀少时，折中的权衡方案是很必要的。然而，如今存储空间的价格跟40年前相比已经大大的下降了，很多时候计算折中方案已经完全没有必要。使用更多的存储空间来换取更好的操作性能，或者是将工作负载分配到多台机器上，这才是如今应用上更好的解决方案。</p>
<h4 id="文档模型"><a href="#文档模型" class="headerlink" title="文档模型"></a>文档模型</h4><p>文档数据: 将一个数据记录(record或者row)作为单位进行存储, 无需定义行。也可以认为一个文档就是关系数据库的一行。<br><img src="http://oiw1gzfww.bkt.clouddn.com/document_data.png" alt=""></p>
<p>使用“文档”这个词似乎让人觉得奇怪，但是其实”文档型数据模型”真的和传统意义的文字”文档”没有什么关系。他不是书、信或者文章，这里说的”文档”其实是一个数据记录, 这个记录能够对包含的数据类型和内容进行“自我描述”。XML文档、HTML文档和JSON 文档就属于这一类, 因此我们可以认为所有半结构化的数据都属于文档数据, 而现在主要的文档数据库还是以Json作为文档为主.<br>可以看到，数据是不规则的，每一条记录包含了所有的有关该记录的信息而没有任何外部的引用, 这条记录就是“自包含”的。这就使得记录很容易完全移动到其他服务器, 因为这条记录的所有信息都包含在里面了, 不需要考虑还有信息在别的表没有一起迁移走。同时，因为在移动过程中，只有被移动的那一条记录<br>需要操作而不像关系型中每个有联系的表都需要锁住来保证一致性，这样一来ACID的保证就会变得更快速, 读写的速度也会有很大的提升。</p>
<h4 id="健值模型"><a href="#健值模型" class="headerlink" title="健值模型"></a>健值模型</h4><p>健值模型: 它的数据按照键值对的形式进行组织,索引和存储。KV存储非常适合不涉及过多数据关系业务关系的业务数据，同时能有效减少读写磁盘的次数，比SQL数据库存储拥有更好的读写性能。<br><img src="http://oiw1gzfww.bkt.clouddn.com/key_value_data.jpeg" alt=""></p>
<h4 id="列式模型"><a href="#列式模型" class="headerlink" title="列式模型"></a>列式模型</h4><p>列式存储: 以列相关存储架构进行数据存储。列式存储以流的方式在列中存储所有的数据，主要适合与批量数据处理和即席查询。<br><img src="http://oiw1gzfww.bkt.clouddn.com/column_data.gif" alt=""></p>
<p>由于查询需要读取的blocks少, 所以查询快, 因为同一类型的列存储在一起, 所以数据压缩比高, Load快。 它简化数据建模的复杂性。但是插入更新慢，不太适合数据老是变化，它是按列存储的。 列式存储很适合做数据仓库，它不适合OLTP。</p>
<h2 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h2><p>在计算机科学中, <code>CAP定理(CAP theorem)</code>, 又被称作<code>布鲁尔定理(Brewer&#39;s theorem)</code>, 它指出对于一个分布式计算系统来说，不可能同时满足以下三点:</p>
<ul>
<li>一致性(Consistency) (所有节点在同一时间具有相同的数据)</li>
<li>可用性(Availability) (保证每个请求不管成功或者失败都有响应)</li>
<li>分隔容忍(Partition tolerance) (系统中任意信息的丢失或失败不会影响系统的继续运作)</li>
</ul>
<p>CAP理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，最多只能同时较好的满足两个。<br>因此，根据CAP原理将NoSQL数据库分成了满足CA原则、满足CP原则和满足AP原则三 大类：</p>
<ul>
<li>CA 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。</li>
<li>CP 满足一致性，分区容忍性的系统，通常性能不是特别高。</li>
<li>AP 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。</li>
</ul>
<p><strong>定理</strong>: 任何分布式系统最多只能同时时满足3点(Consistency, Availability, Partition tolerance)中的2点, 同时满足3点的分布式系统是不存在的<br><strong>忠告</strong>：架构师不要将精力浪费在如何设计能满足三者的完美分布式系统，而是应该进行取舍。</p>
<h3 id="CAP与数据库"><a href="#CAP与数据库" class="headerlink" title="CAP与数据库"></a>CAP与数据库</h3><p>RDBMS满足的是ACID规则, 而ACID规则满足的就是CAP里面的<code>CA</code>, 因此扩展性不强.<br>NewSQL/NoSQL满足的是BASE规则, 而BASE规则就是降低一致性或者可用性来提升系统性能, 就是CAP里面的<code>CP</code>/<code>AP</code></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在理解了上面所有的概念过后, 就能看懂这张CAP的图了:<br><img src="http://oiw1gzfww.bkt.clouddn.com/cap_thorem.jpg" alt=""></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.mongodb.com/zh/mongodb-architecture" target="_blank" rel="external">MongoDB Architecture官方中文介绍</a><br><a href="https://www.zhihu.com/question/25535889" target="_blank" rel="external">elasticsearch(lucene)可以代替NoSQL(mongodb)吗？</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于项目需要存储一些无结构的数据, 这些数据主要以文本为主, 同时还需支持一些文本分析, 咋一听似乎ES是一个不错的选择, 但是这些无结构的数据同时也需要被管理, 也就是这些数据可能经常变更, 衡量再三, 最后还是选择了Mongo, 毕竟现阶段是以数据的存储和管理为主, 分析并没有那么强的需求。整篇文章以大数据存储问题为引, 一步步引出NoSQL领域文档数据的代表MongoDB。&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://blog.yumaojun.net/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="文档数据库" scheme="https://blog.yumaojun.net/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%96%87%E6%A1%A3%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mongodb" scheme="https://blog.yumaojun.net/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>对比RESTful与SOAP，深入理解RESTful</title>
    <link href="https://blog.yumaojun.net/2017/10/03/restful-vs-soap/"/>
    <id>https://blog.yumaojun.net/2017/10/03/restful-vs-soap/</id>
    <published>2017-10-03T00:51:04.000Z</published>
    <updated>2017-10-03T01:46:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>在文章开始前请思考如下问题: REST是啥? SOAP是啥？为什么会产生他们？以及他们都有哪些特点？他们到底有哪些不同？我们什么时候选择REST，什么时候选择SOAP. 在这里我们通过对比他们来解答前面提出的问题.<br><a id="more"></a></p>
<h2 id="诞生"><a href="#诞生" class="headerlink" title="诞生"></a>诞生</h2><p>在十多年前 有2种很重要构建web service的方法: RESTful 和 SOAP, SOAP的出现约为比RESTful早一些，在开始之初他们并没有分化，仍然共存来解决不同的需求。但是现在RESTful盛行，SOAP日渐没落，所以我们来了解下他们的前世今生.</p>
<p>RESTful出生在学术界,有着拥抱开放网络的哲学,而SOAP是大型软件公司为了解决企业市场的需要而产出的。虽然现在REST盛行，但是SOAP的确也有他的优点，所有我们需要比较这两个协议，做正确的取舍.</p>
<h2 id="RESTful简介"><a href="#RESTful简介" class="headerlink" title="RESTful简介"></a>RESTful简介</h2><p>REST这个词，是<a href="http://en.wikipedia.org/wiki/Roy_Fielding" target="_blank" rel="external">Roy Thomas Fielding</a>在他2000年的<a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" target="_blank" rel="external">博士论文</a>中提出的。它是“Representational State Transfer”的缩写。他这次论文的主题是探讨几种基于网络的软件设计架构和风格， 而REST被具体描述是在他论文的第5章。在这个章节中，他是这样总结REST的:</p>
<blockquote>
<p>provides a set of architectural constraints that, when applied as a whole, emphasizes scalability of component interactions, generality of interfaces, independent deployment of components, and intermediary components to reduce interaction latency, enforce security, and encapsulate legacy systems.</p>
</blockquote>
<p>它提供了一组体系约束，具体有这么几点: </p>
<ul>
<li>整体关联性</li>
<li>强调组件交互的可伸缩性</li>
<li>组件的独立部署</li>
<li>一般性的接口</li>
<li>使用中间件来减少交换延迟</li>
<li>执行安全</li>
</ul>
<p>所以,REST可以被描述为一种构建Web服务所应该遵循的一组特定约束(provider和customer之间的):</p>
<ul>
<li>client 端和server端的 关注点的分离: client不用关注 数据的存储， 而server端不必关注用户界面。使得client 和 server 解耦，从而取得高扩展性</li>
<li>客户端和服务器之间的通信必须无状态: 服务器不应该存储任何  和clients之间交互的上下文信息, 除了用于维护认证的会话信息。</li>
<li>客户应该能够缓存响应: 所有服务器响应应该包含足够的缓存相关的信息。客户端可以依靠这些信息决定是否适合缓存响应。</li>
<li>连接可以发生在多个通信层: 服务端不应该区分 客户端 是否直接连接server，还是通过中间代理来连接server</li>
</ul>
<p>Fielding是一个非常重要的人，他是HTTP协议（1.0版和1.1版）的主要设计者、Apache服务器软件的作者之一、Apache基金会的第一任主席。所以，他的这篇论文一经发表，就引起了关注，并且立即对互联网开发产生了深远的影响。</p>
<p>总体来说REST就是web的一种抽象，REST应该允许任何customer 以同一种方式与API进行交互， 而不需要知道其后面的工作原理。</p>
<h2 id="SOAP简介"><a href="#SOAP简介" class="headerlink" title="SOAP简介"></a>SOAP简介</h2><p>SOAP, 是“Simple Object Access Protocol”的缩写, 是1998年一群人和微软合作而产生的。其中的一个人叫戴夫·维纳,他是<code>XML-RPC</code>(一种使用xml作为 标准的消息载体 的 远程过程调用)的创造者, 也正是这项创造导致的SOAP的产生，尽管被微软,IBM和其他公司支持，但是SOAP直到2003年才被W3C正式承认。</p>
<p>使用SOAP Web服务符合一组特征，使分布式对象之间的通信成为了可能:</p>
<ul>
<li>协议是可扩展的: 扩展的基本功能可以构建和使用而不影响主要特征</li>
<li>消息内容应该独立于传输机制: SOAP不仅可以通过HTTP传输消息内容，而且其他传输协议也支持比如：SMTP。SMTP被用来提供客户端和服务器之间的异步通信。</li>
<li>底层编程模型解耦: 在逻辑上 SOAP的客户端和服务端的开发时完全独立的。</li>
</ul>
<p>SAOP在他刚出世的前几年，非常盛行，但是随后一直走下坡路，但是SAOP现在仍然别一些企业级的环境使用着，这是因为在企业级的需求里面,不同服务之间的通信需要遵循一套规则和约束。正是因为它遵循对象、规则和约束,所以SOAP是一个比REST更严格的协议。</p>
<p>SOAP在较大的组织中赢得了支持,主要原因是当时微软的支持，以及市场由微软主导。<code>Windows Communication Foundation(WCF)</code>,以微软平台作为核心开发, 直到今天仍然支持SOAP， 而其他方式实现的SAOP的客户端和服务端框架有<code>PHP Zend Framework</code>和<code>Apache CXF</code></p>
<h2 id="REST-vs-SOAP"><a href="#REST-vs-SOAP" class="headerlink" title="REST vs SOAP"></a>REST vs SOAP</h2><ul>
<li>设计哲学<br>SOAP主要是提供了一种远程访问和操作对象的方式，而REST则关注资源可以被执行的操作。由此可见SAOP更关注功能，而REST更关注资源，这主要与他们的设计哲学和出生有关(前面已经提及), 正是由于这些区别，REST主要被用来设计暴露于互联网的公网API，而由于REST继承了HTTP的操作，更使得它成为构建开放的WEB API的不二之选。</li>
<li>互联网公司支持<br>RESTful很流行的一个主要原因是互联网巨头的使用，以及这些互联网巨头的鼓励和推荐</li>
<li>带宽消耗<br>在你不需要将一组对象全映射给客户端的场景中， REST永远都要优于SOAP， 而大多数情况下， 完全没有必要将服务器端的一组对象全映射给客户端。而对象的来回映射是极具消耗带宽的，这也是为啥说SOAP比较重的原因所在。 所以尽量避免使用SOAP， 特别是当你的带宽资源非常珍贵的情形下，比如移动app</li>
<li>易用性<br>这是最重要的原因, REST比SOAP简单, 学习和使用RESTful API的代价极低，这使得开发RESTfulAPI的时间上比SOAP短。RESTful通过HTTP的方法来操作资源，通过json来交换数据， 无论是HTTP协议上的使用简单(request url and get response), 还是数据交换格式Json的流行，当然Json的流行主要是因为javascript, 都使得REST比SOAP更易于被人们接收和使用。</li>
<li>敏捷性<br>由于REST轻约束(这个主要是无状态的设计)， 而SOAP重约束， 使得REST更加灵活，当WEB API有变化时 企业可以快速的适用。</li>
</ul>
<h2 id="深入RESTful"><a href="#深入RESTful" class="headerlink" title="深入RESTful"></a>深入RESTful</h2><p>在对RESTful的前世今生， 以及如何PK掉SOAP的 了解下， RESTful的具体概念 也就比较好理解了， 如果更深入了解RESTful的概念，可见参考后面Fielding的博士生论文第5章，文章最后有连接。</p>
<h3 id="名称"><a href="#名称" class="headerlink" title="名称"></a>名称</h3><p>名称往往都非常重要, 因为它是对这个事物的高度抽象,比如Docker, 他的英文意识是码头的搬运工，而Docker真正的用途是软件的搬运工，所以是不是很有意思。<br>Fielding将他对互联网软件的架构原则，定名为REST，即Representational State Transfer的缩写。这个词组的翻译是”表现层状态转化”。<br>因此要理解RESTful到底是一种啥样的互联网软件设计风格，理解好Representational State Transfer 这组单词是第一步。</p>
<p>这单词中包含了那些信息喃? REST的名称”表现层状态转化”中，省略了主语。”表现层”其实指的是”资源”(Resources)的”表现层”。因此就有3个要素：资源、表现、转换.</p>
<h3 id="Resource-资源"><a href="#Resource-资源" class="headerlink" title="Resource(资源)"></a>Resource(资源)</h3><p>所谓”资源”，就是网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个URI(统一资源定位符)指向它，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或独一无二的识别符。</p>
<p>人们往往容易把<code>RUI</code>和<code>URL</code>搞混，实际上他们的确是指同一种事物(资源), 只是站的角度不同, 而叫法不同而已: 站在客户端，我们叫访问资源的路径叫URL, 站在服务器 我们定义资源的路径叫 RUI</p>
<p>而整个互联网 就是由这些资源组合而成的.</p>
<h3 id="Representational-表现层"><a href="#Representational-表现层" class="headerlink" title="Representational(表现层)"></a>Representational(表现层)</h3><p>“资源”是一种信息实体, 它可以有多种外在表现形式. 我们把”资源”具体呈现出来的形式, 叫做它的<code>表现层(Representation)</code>.<br>比如，文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式；图片可以用JPG格式表现，也可以用PNG格式表现。</p>
<p>URI只代表资源的实体，不代表它的形式。严格地说，有些网址最后的”.html”后缀名是不必要的，因为这个后缀名表示格式, 属于<code>表现层</code>范畴，而URI应该只代表资源的位置。它的具体表现形式，应该在HTTP请求的头信息中用<code>Accept</code>和<code>Content-Type</code>字段指定，这两个字段才是对<code>表现层</code>的描述。</p>
<h3 id="State-Transfer-状态转换"><a href="#State-Transfer-状态转换" class="headerlink" title="State Transfer(状态转换)"></a>State Transfer(状态转换)</h3><p>访问一个网站, 就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。</p>
<p>互联网通信协议HTTP协议, 是一个无状态协议。这意味着, 所有的状态都保存在服务器端。因此, 如果客户端想要操作服务器, 必须通过某种手段让服务器端发生<code>状态转化(State Transfer)</code>. 而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。</p>
<p>客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="http://www.restapitutorial.com/" target="_blank" rel="external">RESTful tutorial</a></li>
<li><a href="http://nordicapis.com/rest-better-than-soap-yes-use-cases/" target="_blank" rel="external">REST vs SOAP</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="external">阮一峰博客</a></li>
<li><a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm" target="_blank" rel="external">Fielding论文对RESTful具体描述</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在文章开始前请思考如下问题: REST是啥? SOAP是啥？为什么会产生他们？以及他们都有哪些特点？他们到底有哪些不同？我们什么时候选择REST，什么时候选择SOAP. 在这里我们通过对比他们来解答前面提出的问题.&lt;br&gt;
    
    </summary>
    
      <category term="程序设计" scheme="https://blog.yumaojun.net/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="RESTful API" scheme="https://blog.yumaojun.net/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/RESTful-API/"/>
    
    
      <category term="restful" scheme="https://blog.yumaojun.net/tags/restful/"/>
    
  </entry>
  
  <entry>
    <title>Go语言JSON详解</title>
    <link href="https://blog.yumaojun.net/2017/10/03/golang-json/"/>
    <id>https://blog.yumaojun.net/2017/10/03/golang-json/</id>
    <published>2017-10-03T00:44:19.000Z</published>
    <updated>2017-11-03T07:39:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前我们看到很多的开放平台，基本上都是采用了JSON作为他们的数据交互的格式。既然JSON在Web开发中如此重要，那么Go语言对JSON支持的怎么样呢？Go语言的标准库已经非常好的支持了JSON，可以很容易的对JSON数据进行编、解码的工作。如果有更灵活的需求也有不错的第三方库提供支持。这篇文章将全面解读Golang中JSON的使用。<br><a id="more"></a></p>
<h2 id="JSON简介"><a href="#JSON简介" class="headerlink" title="JSON简介"></a>JSON简介</h2><p>JSON（Javascript Object Notation）是一种轻量级的数据交换语言，以文字为基础，具有自我描述性且易于让人阅读。尽管JSON是Javascript <a href="http://www.ecma-international.org/publications/files/ecma-st/ECMA-262.pdf" target="_blank" rel="external">Standard ECMA-262 3rd Edition – December 1999</a>的一个子集，但JSON是独立于语言的文本格式，并且采用了类似于C语言家族的一些习惯, 这些特性使JSON成为理想的数据交换语言。</p>
<p>JSON与XML最大的不同在于XML是一个完整的标记语言，而JSON不是。JSON由于比XML更小、更快，更易解析,以及浏览器的内建快速解析支持,使得其更适用于网络数据传输领域。</p>
<p>在讲解JSON的数据结构之前, 我们先来一段简单的样例JSON数据:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"precision"</span>: <span class="string">"zip"</span>,</div><div class="line">        <span class="attr">"Latitude"</span>:  <span class="number">37.7668</span>,</div><div class="line">        <span class="attr">"Longitude"</span>: <span class="number">-122.3959</span>,</div><div class="line">        <span class="attr">"Address"</span>:   <span class="string">""</span>,</div><div class="line">        <span class="attr">"City"</span>:      <span class="string">"SAN FRANCISCO"</span>,</div><div class="line">        <span class="attr">"State"</span>:     <span class="string">"CA"</span>,</div><div class="line">        <span class="attr">"Zip"</span>:       <span class="string">"94107"</span>,</div><div class="line">        <span class="attr">"Country"</span>:   <span class="string">"US"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"precision"</span>: <span class="string">"zip"</span>,</div><div class="line">        <span class="attr">"Latitude"</span>:  <span class="number">37.371991</span>,</div><div class="line">        <span class="attr">"Longitude"</span>: <span class="number">-122.026020</span>,</div><div class="line">        <span class="attr">"Address"</span>:   <span class="string">""</span>,</div><div class="line">        <span class="attr">"City"</span>:      <span class="string">"SUNNYVALE"</span>,</div><div class="line">        <span class="attr">"State"</span>:     <span class="string">"CA"</span>,</div><div class="line">        <span class="attr">"Zip"</span>:       <span class="string">"94085"</span>,</div><div class="line">        <span class="attr">"Country"</span>:   <span class="string">"US"</span></div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>JSON建构于两种结构:</p>
<ul>
<li>键值对的集合(A collection of name/value pairs): 在不同的语言中, 他们被理解为: object(Javascript), struct(Golang), Dictinary(Python), 以及哈希表(hash table), 有键列表(keyed list), 或者关联数组(associative array).<br><img src="http://json.org/object.gif" alt=""></li>
<li>值的有序列表(An ordered list of values): 在大部分语言中，它被理解为数组(array).<br><img src="http://json.org/array.gif" alt=""></li>
</ul>
<p>其中值可以包含如下类型, 并且这些结构可以嵌套:</p>
<ul>
<li>字符串(string): 由双引号包围的任意数量Unicode字符的集合，使用反斜线转义, 一个字符(character)即一个单独的字符串(character string)</li>
<li>数值(number): 同时包含整数和浮点数</li>
<li>布尔值(booleans): 布尔值包含: true和false</li>
<li>空(null): 空</li>
<li>对象(object): 键值对的集合</li>
<li>数组(array): 值的有序列表<br><img src="http://json.org/value.gif" alt=""></li>
</ul>
<p>这些都是常见的数据结构。事实上大部分现代计算机语言都以某种形式支持它们。这使得一种数据格式在同样基于这些结构的编程语言之间交换成为可能。</p>
<h2 id="JSON与Go数据结构映射"><a href="#JSON与Go数据结构映射" class="headerlink" title="JSON与Go数据结构映射"></a>JSON与Go数据结构映射</h2><p>JSON格式可以算我们日常最常用的序列化格式之一了, Go语言作为一个由Google开发, 号称互联网的C语言的语言, 自然也对JSON格式支持很好。<br>Golang的标准库<code>encoding/json</code>实现的JSON标准(RFC 4627)的编码和解码, 可以让我们很方便地进行<code>JSON</code>数据的转换. </p>
<p>具体详情可以参考标准库<code>Marshal</code>和<code>Unmarshal</code>函数的注释, 下面是一个基本的数据关系映射总结:</p>
<table>
<thead>
<tr>
<th>Golang Type</th>
<th style="text-align:center">JSON Type</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>bool</td>
<td style="text-align:center">booleans</td>
<td style="text-align:center">true or false</td>
</tr>
<tr>
<td>int, float</td>
<td style="text-align:center">numbers</td>
<td style="text-align:center">对于golang所有的数值类型</td>
</tr>
<tr>
<td>string</td>
<td style="text-align:center">strings</td>
<td style="text-align:center">字符串会转换成<code>UTF-8</code>进行输出，无法转换的会打印对应的<code>unicode</code>值。而且为了防止浏览器把json输出当做html， “&lt;”、”&gt;” 以及 “&amp;” 会被转义为 “\u003c”、”\u003e” 和 “\u0026”</td>
</tr>
<tr>
<td>array,slice</td>
<td style="text-align:center">arrays</td>
<td style="text-align:center">Publish Acknowledgment</td>
</tr>
<tr>
<td>struct</td>
<td style="text-align:center">objects</td>
<td style="text-align:center">只有导出的字段(以大写字母开头)才会在输出中</td>
</tr>
<tr>
<td>nil</td>
<td style="text-align:center">null</td>
<td style="text-align:center">空</td>
</tr>
</tbody>
</table>
<p>Go语言是个强类型语言，对格式要求极其严格而JSON格式虽然也有类型，但是并不稳定，Go语言在解析来源为非强类型语言时比如PHP,Python等序列化的JSON时，经常遇到一些问题诸如字段类型变化导致无法正常解析的情况，导致服务不稳定。所以在做JSON相关解码和编码的过程中, 需要注意以下事项:</p>
<ul>
<li>Go语言中一些特殊的类型，比如Channel、complex、function是不能被解析成JSON的.</li>
<li>JSON对象只支持string作为key，所以要编码一个map，那么必须是map[string]T这种类型(T是Go语言中任意的类型)</li>
<li>嵌套的数据是不能编码的，不然会让JSON编码进入死循环</li>
<li>指针在编码的时候会输出指针指向的内容，而空指针会输出null</li>
</ul>
<h2 id="标准库解读"><a href="#标准库解读" class="headerlink" title="标准库解读"></a>标准库解读</h2><p>在使用标准库进行json操作之前, 先简单了解下标准库提供了那些对JSON的操作, 以下解读主要来源于GoDoc</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul>
<li>Compact: 用于JSON字符串的拼接, 拼接时会校验后面的字符串是否是合法json, 如果不是会报错, 但对字符串中的特殊字符(html不安全字符,比如上面提到的”&lt;” “&gt;”等)不进行转义.</li>
<li>HTMLEscape: 和Compact相对, 拼接JSON字符串时会进行特殊字符转义, 转义成web安全的字符.</li>
<li>Valid: 校验数据是否是合法的JSON编码数据, 往往用于数据格式校验.</li>
<li>Marshal: 用于编码JSON.</li>
<li>Indent: 用于JSON的格式化输出, 最常见的用法是定义JSON的缩进,比如2个空格的缩进.</li>
<li>MarshalIndent: 编码JSON后,带格式化的输出.</li>
<li>Unmarshal: 用于解码JSON.</li>
</ul>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul>
<li>Unmarshaler: 用于自定义解码json方法</li>
<li>Marshaler: 用于自定义编码json的方法</li>
</ul>
<h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><ul>
<li>Decoder: 从一个输入流读取数据并且解析json</li>
<li>Encoder: 把一个编码后的json值写出给一个输出流</li>
<li>Number: JSON里面的number类型</li>
<li>RawMessage: 是一种已经被编码的json字符串, 它实现了Marshaler和Unmarshaler, 可以用来延迟解析部分json</li>
<li>Token: 一个空interface,  持有一种Json映射的Go内部数据结构的值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Delim, for the four JSON delimiters [ ] &#123; &#125;</div><div class="line">bool, for JSON booleans</div><div class="line">float64, for JSON numbers</div><div class="line">Number, for JSON numbers</div><div class="line">string, for JSON string literals</div><div class="line">nil, for JSON null</div></pre></td></tr></table></figure>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ul>
<li>InvalidUTF8Error: 用于兼容golang1.2版本之前, 1.2过后不会有该异常</li>
<li>InvalidUnmarshalError: 表示解码json时传递了一个非法的参数, 比如一个空指针</li>
<li>MarshalerError: Marshaler异常 </li>
<li>SyntaxError: json的语法错误</li>
<li>UnmarshalFieldError: 降级, 未使用, 为了兼容保留</li>
<li>UnmarshalTypeError: 解码时 遇到不认识的json类型, 表明传入的json的类型无法被转换成Golang对应的类型, 比如JSON RFC增加新的JSON类型 就会遇到这样的错误</li>
<li>UnsupportedTypeError: 编码时 遇到不认识的Golang类型, 不知道该Golang的数据类型应该被映射成那种json类型, 比如自定义的类型(未实现 marshaler接口)</li>
<li>UnsupportedValueError: 同上, 遇到不认识的json类型, 比如 你需要将golang里面的”a”编程成json里面不存在的类型</li>
</ul>
<h2 id="Struct-Tag"><a href="#Struct-Tag" class="headerlink" title="Struct Tag"></a>Struct Tag</h2><p>在JSON的解析过程中<code>Struct Tag</code>被频繁使用, 因此在进行真正的解析之前, 介绍下Golang中的<code>Struct Tag</code>,在golang中, 命名都是推荐都是用驼峰方式, 并且在首字母大小写有特殊的语法含义(大写变量可以导出包, 小写变量包私有)。但是由于经常需要和其它的系统进行数据交互, 例如转成json格式, 存储到mongodb啊等等。这个时候如果用属性名来作为键值可能不一定会符合项目要求, 比如不是用<code>Struct Tag</code>时, JSON解析出来的结果是这样的:</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// User is test for json</span></div><div class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</div><div class="line">	ID   <span class="keyword">string</span></div><div class="line">	Name <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	u := User&#123;ID: <span class="string">"user001"</span>, Name: <span class="string">"tom"</span>&#125;</div><div class="line">	jsonU, _ := json.Marshal(u)</div><div class="line">	fmt.Println(<span class="keyword">string</span>(jsonU))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出内容如下:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"ID"</span>:<span class="string">"user001"</span>,<span class="attr">"Name"</span>:<span class="string">"tom"</span>&#125;</div></pre></td></tr></table></figure></p>
<p>显然如果这样解析JSON会太死板, 无法面对灵活的业务, 而具体如何转换应该交给我们自己控制, 而<code>Struct Tag</code>就是用来干这个事儿的。<br><code>Struct Tag</code>采用 <figure class="highlight plain"><figcaption><span>跟随在Struct Field后面。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">那`Struct Tag`的工作原理是咋样的? 需要用到Tag中的内容时, 咋样去获取喃? 其实是使用反射(reflect)中的方法来获取的:</div><div class="line">```golang</div><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">	&quot;fmt&quot;</div><div class="line">	&quot;reflect&quot;</div><div class="line">)</div><div class="line"></div><div class="line">// User is test for json</div><div class="line">type User struct &#123;</div><div class="line">	ID   string `json:&quot;json_id&quot; bson:&quot;bson_id&quot; custom:&quot;my_id&quot;`</div><div class="line">	Name string `json:&quot;json_name&quot; bson:&quot;bson_name&quot; custom:&quot;my_name&quot;`</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">	u := &amp;User&#123;ID: &quot;user001&quot;, Name: &quot;tom&quot;&#125;</div><div class="line">	t := reflect.TypeOf(u)</div><div class="line"></div><div class="line">	// 获取第一个字段的Struct Tag的值</div><div class="line">	f0 := t.Elem().Field(0)</div><div class="line">	fmt.Println(f0.Tag.Get(&quot;json&quot;))</div><div class="line">	fmt.Println(f0.Tag.Get(&quot;bson&quot;))</div><div class="line">	fmt.Println(f0.Tag.Get(&quot;custom&quot;))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果如下:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">json_id</div><div class="line">bson_id</div><div class="line">my_id</div></pre></td></tr></table></figure></p>
<h2 id="解析JSON"><a href="#解析JSON" class="headerlink" title="解析JSON"></a>解析JSON</h2><p>通过标准库提供的Unmarshal函数来解析JSON, 但是标准库在解析未知格式的JSON时比较麻烦, 需要解析到interface{},然后断言, 因此如果想要灵活的解析JSON可以使用一些第三方库,比如<code>jsonitor</code></p>
<h3 id="解析已知JSON"><a href="#解析已知JSON" class="headerlink" title="解析已知JSON"></a>解析已知JSON</h3><p>之前介绍了Golang中的<code>Struct Tag</code>, 而标准库<code>encoding/json</code>就是利用<code>Stuct Tag</code>可以轻松实现JSON编解码过程中的一些自定义转换, 而关于JSON <code>Struct Tag</code>具体的值, 标准库文档里面有相应的描述, 这里作简单的概述:</p>
<ul>
<li>Json Struct Tag 格式为<code>json: &quot;filed_name,argument&quot;</code></li>
<li>filed_name 为用户自定义的需要转换的字段名, 如果为”-“表示 转换时直接忽略字段</li>
<li>argument 表示该字段转换时的一些额外的参数<ul>
<li>omitempty 表示如果为空置则忽略字段</li>
<li>json数据类型, 比如string, numbers, 表示在转换时, 调整成对应的数据类型</li>
</ul>
</li>
</ul>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// Product _</span></div><div class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</div><div class="line">	Name      <span class="keyword">string</span>  <span class="string">`json:"name"`</span></div><div class="line">	ProductID <span class="keyword">int64</span>   <span class="string">`json:"product_id,string"`</span></div><div class="line">	Number    <span class="keyword">int</span>     <span class="string">`json:"number,string"`</span></div><div class="line">	Price     <span class="keyword">float64</span> <span class="string">`json:"price,string"`</span></div><div class="line">	IsOnSale  <span class="keyword">bool</span>    <span class="string">`json:"is_on_sale,string"`</span></div><div class="line">	Test      <span class="keyword">string</span>  <span class="string">`json:"-"`</span></div><div class="line">	OMTest    <span class="keyword">string</span>  <span class="string">`json:"om_test,omitempty"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	str := <span class="string">`&#123;"name":"test","product_id":"1","number":"110011","price":"0.01","is_on_sale":"true"&#125;`</span></div><div class="line">	p := Product&#123;&#125;</div><div class="line"></div><div class="line">	json.Unmarshal([]<span class="keyword">byte</span>(str), &amp;p)</div><div class="line">	fmt.Println(p)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="built_in">test</span> 1 110011 0.01 <span class="literal">true</span>  &#125;</div></pre></td></tr></table></figure></p>
<h3 id="解析未知JSON"><a href="#解析未知JSON" class="headerlink" title="解析未知JSON"></a>解析未知JSON</h3><p>上面那种解析方式是在我们知晓被解析的JSON数据的结构的前提下采取的方案, 如果我们不知道被解析的数据的格式, 又应该如何来解析呢?<br>我们知道interface{}可以用来存储任意数据类型的对象，这种数据结构正好用于存储解析的未知结构的json数据的结果。JSON包中采用map[string]interface{}和[]interface{}结构来存储任意的JSON对象和数组。</p>
<ol>
<li>解析到interface{}<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// Product _</span></div><div class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</div><div class="line">	Name      <span class="keyword">string</span>  <span class="string">`json:"name"`</span></div><div class="line">	ProductID <span class="keyword">int64</span>   <span class="string">`json:"product_id,string"`</span></div><div class="line">	Number    <span class="keyword">int</span>     <span class="string">`json:"number,string"`</span></div><div class="line">	Price     <span class="keyword">float64</span> <span class="string">`json:"price,string"`</span></div><div class="line">	IsOnSale  <span class="keyword">bool</span>    <span class="string">`json:"is_on_sale,string"`</span></div><div class="line">	Test      <span class="keyword">string</span>  <span class="string">`json:"-"`</span></div><div class="line">	OMTest    <span class="keyword">string</span>  <span class="string">`json:"om_test,omitempty"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="comment">// 假设我们并不知道这个JSON的格式, 我们可以将他解析到interface&#123;&#125;</span></div><div class="line">	str := <span class="string">`&#123;"name":"test","product_id":"1","number":"110011","price":"0.01","is_on_sale":"true"&#125;`</span></div><div class="line">	<span class="keyword">var</span> p <span class="keyword">interface</span>&#123;&#125;</div><div class="line">	json.Unmarshal([]<span class="keyword">byte</span>(str), &amp;p)</div><div class="line"></div><div class="line">	<span class="comment">// 现在我们需要从这个interface&#123;&#125;解析出里面的数据</span></div><div class="line">	m := p.(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</div><div class="line">	<span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</div><div class="line">		<span class="keyword">switch</span> vv := v.(<span class="keyword">type</span>) &#123;</div><div class="line">		<span class="keyword">case</span> <span class="keyword">string</span>:</div><div class="line">			fmt.Printf(<span class="string">"%s is string, value: %s\n"</span>, k, vv)</div><div class="line">		<span class="keyword">case</span> <span class="keyword">int</span>:</div><div class="line">			fmt.Printf(<span class="string">"%s is int, value: %d\n"</span>, k, vv)</div><div class="line">		<span class="keyword">case</span> <span class="keyword">int64</span>:</div><div class="line">			fmt.Printf(<span class="string">"%s is int64, value: %d\n"</span>, k, vv)</div><div class="line">		<span class="keyword">case</span> <span class="keyword">bool</span>:</div><div class="line">			fmt.Printf(<span class="string">"%s is bool, vaule: %v"</span>, k, vv)</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			fmt.Printf(<span class="string">"%s is unknow type\n"</span>, k)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>输出结果:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">name is string, value: <span class="built_in">test</span></div><div class="line">product_id is string, value: 1</div><div class="line">number is string, value: 110011</div><div class="line">price is string, value: 0.01</div><div class="line">is_on_sale is string, value: <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<ol>
<li>使用第三方库<code>jsonitor</code>进行解析<br>大量的类型断言是不是让你觉得很烦, 如果是多层interface{}嵌套那么断言需要更多, 因此就有很多第三方JSON解析库出现, 他们尽量采用流式迭代解析, 这里我用过的比较不错的是陶文的<code>jsonitor</code>:<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/json-iterator/go"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// Product _</span></div><div class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</div><div class="line">	Name      <span class="keyword">string</span>  <span class="string">`json:"name"`</span></div><div class="line">	ProductID <span class="keyword">int64</span>   <span class="string">`json:"product_id,string"`</span></div><div class="line">	Number    <span class="keyword">int</span>     <span class="string">`json:"number,string"`</span></div><div class="line">	Price     <span class="keyword">float64</span> <span class="string">`json:"price,string"`</span></div><div class="line">	IsOnSale  <span class="keyword">bool</span>    <span class="string">`json:"is_on_sale,string"`</span></div><div class="line">	Test      <span class="keyword">string</span>  <span class="string">`json:"-"`</span></div><div class="line">	OMTest    <span class="keyword">string</span>  <span class="string">`json:"om_test,omitempty"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	str := <span class="string">`&#123;"name":"test","product_id":"1","number":"110011","price":"0.01","is_on_sale":"true"&#125;`</span></div><div class="line">	fmt.Println(jsoniter.Get([]<span class="keyword">byte</span>(str), <span class="string">"price"</span>).ToFloat64())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="自定义解析"><a href="#自定义解析" class="headerlink" title="自定义解析"></a>自定义解析</h3><p>struct实现Unmarshaler接口, 便可以实现解析JSON的过程,<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// Product _</span></div><div class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</div><div class="line">	Name      <span class="keyword">string</span>  <span class="string">`json:"name"`</span></div><div class="line">	ProductID <span class="keyword">int64</span>   <span class="string">`json:"product_id,string"`</span></div><div class="line">	Number    <span class="keyword">int</span>     <span class="string">`json:"number,string"`</span></div><div class="line">	Price     <span class="keyword">float64</span> <span class="string">`json:"price,string"`</span></div><div class="line">	IsOnSale  <span class="keyword">bool</span>    <span class="string">`json:"is_on_sale,string"`</span></div><div class="line">	Test      <span class="keyword">string</span>  <span class="string">`json:"-"`</span></div><div class="line">	OMTest    <span class="keyword">string</span>  <span class="string">`json:"om_test,omitempty"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// UnmarshalJSON 自定义解析</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Product)</span> <span class="title">UnmarshalJSON</span><span class="params">(data []<span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</div><div class="line">	<span class="comment">// 示例代码使用jsonitor代为解析</span></div><div class="line">	p.Price = <span class="number">0.01</span></div><div class="line">	p.Number = <span class="number">1100</span></div><div class="line">	p.Name = <span class="string">"my_test_name"</span></div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// MarshalJSON 自定义编码</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Product)</span> <span class="title">MarshalJSON</span><span class="params">()</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</div><div class="line">	<span class="comment">// 自己编码json</span></div><div class="line">	<span class="keyword">return</span> []<span class="keyword">byte</span>(<span class="string">`&#123;"test":"name_test"&#125;`</span>), <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	str := <span class="string">`&#123;"name":"test","product_id":"1","number":"110011","price":"0.01","is_on_sale":"true"&#125;`</span></div><div class="line">	p := Product&#123;&#125;</div><div class="line"></div><div class="line">	json.Unmarshal([]<span class="keyword">byte</span>(str), &amp;p)</div><div class="line">	fmt.Println(p)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="生成JSON"><a href="#生成JSON" class="headerlink" title="生成JSON"></a>生成JSON</h2><p>我们可以通过标准库json将Struc序列化成JSON也可以自定义序列化的方法</p>
<h3 id="通过struct生成JSON"><a href="#通过struct生成JSON" class="headerlink" title="通过struct生成JSON"></a>通过struct生成JSON</h3><p>上面在介绍JSON解析的时候已经介绍了关于JSON的<code>Struct Tag</code>了, 因此直接参考代码:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// Product _</span></div><div class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</div><div class="line">	Name      <span class="keyword">string</span>  <span class="string">`json:"name"`</span></div><div class="line">	ProductID <span class="keyword">int64</span>   <span class="string">`json:"product_id,string"`</span></div><div class="line">	Number    <span class="keyword">int</span>     <span class="string">`json:"number,string"`</span></div><div class="line">	Price     <span class="keyword">float64</span> <span class="string">`json:"price,string"`</span></div><div class="line">	IsOnSale  <span class="keyword">bool</span>    <span class="string">`json:"is_on_sale,string"`</span></div><div class="line">	Test      <span class="keyword">string</span>  <span class="string">`json:"-"`</span></div><div class="line">	OMTest    <span class="keyword">string</span>  <span class="string">`json:"om_test,omitempty"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	p := &amp;Product&#123;</div><div class="line">		Name:      <span class="string">"test"</span>,</div><div class="line">		ProductID: <span class="number">01</span>,</div><div class="line">		Number:    <span class="number">110011</span>,</div><div class="line">		Price:     <span class="number">0.01</span>,</div><div class="line">		IsOnSale:  <span class="literal">true</span>,</div><div class="line">		Test:      <span class="string">"test"</span>,</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	jsonP, _ := json.Marshal(p)</div><div class="line">	fmt.Println(<span class="keyword">string</span>(jsonP))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果如下:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"name"</span>:<span class="string">"test"</span>,<span class="attr">"product_id"</span>:<span class="string">"1"</span>,<span class="attr">"number"</span>:<span class="string">"110011"</span>,<span class="attr">"price"</span>:<span class="string">"0.01"</span>,<span class="attr">"is_on_sale"</span>:<span class="string">"true"</span>&#125;</div></pre></td></tr></table></figure></p>
<h3 id="自定义生成"><a href="#自定义生成" class="headerlink" title="自定义生成"></a>自定义生成</h3><p>Struct实现Marshaler接口, 便可以自定义编码过程<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// Product _</span></div><div class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</div><div class="line">	Name      <span class="keyword">string</span>  <span class="string">`json:"name"`</span></div><div class="line">	ProductID <span class="keyword">int64</span>   <span class="string">`json:"product_id,string"`</span></div><div class="line">	Number    <span class="keyword">int</span>     <span class="string">`json:"number,string"`</span></div><div class="line">	Price     <span class="keyword">float64</span> <span class="string">`json:"price,string"`</span></div><div class="line">	IsOnSale  <span class="keyword">bool</span>    <span class="string">`json:"is_on_sale,string"`</span></div><div class="line">	Test      <span class="keyword">string</span>  <span class="string">`json:"-"`</span></div><div class="line">	OMTest    <span class="keyword">string</span>  <span class="string">`json:"om_test,omitempty"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// UnmarshalJSON 自定义解析</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Product)</span> <span class="title">UnmarshalJSON</span><span class="params">(data []<span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</div><div class="line">	<span class="comment">// 示例代码使用jsonitor代为解析</span></div><div class="line">	p.Price = <span class="number">0.01</span></div><div class="line">	p.Number = <span class="number">1100</span></div><div class="line">	p.Name = <span class="string">"my_test_name"</span></div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// MarshalJSON 自定义编码</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Product)</span> <span class="title">MarshalJSON</span><span class="params">()</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</div><div class="line">	<span class="comment">// 自己编码json</span></div><div class="line">	<span class="keyword">return</span> []<span class="keyword">byte</span>(<span class="string">`&#123;"test":"name_test"&#125;`</span>), <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	p := &amp;Product&#123;</div><div class="line">		Name:      <span class="string">"test"</span>,</div><div class="line">		ProductID: <span class="number">01</span>,</div><div class="line">		Number:    <span class="number">110011</span>,</div><div class="line">		Price:     <span class="number">0.01</span>,</div><div class="line">		IsOnSale:  <span class="literal">true</span>,</div><div class="line">		Test:      <span class="string">"test"</span>,</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	jsonP, _ := json.Marshal(p)</div><div class="line">	fmt.Println(<span class="keyword">string</span>(jsonP))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://json.org/json-zh.html" target="_blank" rel="external">JSON官方介绍</a></li>
<li><a href="https://tools.ietf.org/html/rfc4627" target="_blank" rel="external">JSON RFC4672</a></li>
<li><a href="https://godoc.org/encoding/json" target="_blank" rel="external">encoding/json godoc</a></li>
<li><a href="https://blog.golang.org/json-and-go" target="_blank" rel="external">Go Blog: JSON and Go</a></li>
<li><a href="http://blog.csdn.net/impressionw/article/details/74731888" target="_blank" rel="external">Golang中使用JSON的一些小技巧</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前我们看到很多的开放平台，基本上都是采用了JSON作为他们的数据交互的格式。既然JSON在Web开发中如此重要，那么Go语言对JSON支持的怎么样呢？Go语言的标准库已经非常好的支持了JSON，可以很容易的对JSON数据进行编、解码的工作。如果有更灵活的需求也有不错的第三方库提供支持。这篇文章将全面解读Golang中JSON的使用。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="json" scheme="https://blog.yumaojun.net/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>gRPC基于拦截器模式的认证</title>
    <link href="https://blog.yumaojun.net/2017/08/07/grpc-auth/"/>
    <id>https://blog.yumaojun.net/2017/08/07/grpc-auth/</id>
    <published>2017-08-06T23:16:35.000Z</published>
    <updated>2017-08-08T03:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>gRPC的服务端需要与认证平台对接, 之前使用http时通过中间件的形式进行实现, 因此这篇文章主要验证gRPC中能否以中间件的形式实现gRPC的认证。<br><a id="more"></a></p>
<h2 id="认证方式"><a href="#认证方式" class="headerlink" title="认证方式"></a>认证方式</h2><p>gRPC 默认提供了两种认证方式：</p>
<ul>
<li>基于SSL/TLS认证方式</li>
<li>远程调用认证方式<br>为了保证API Gateway与后端gRPC服务通信的安全同时保证token安全, 以上2种方式同时使用。</li>
</ul>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>我需要验证的流程大致如下(与Openstack的认证流程一样):<br><img src="http://oiw1gzfww.bkt.clouddn.com/auth-flow.png" alt=""><br>完整的代理示例: <a href="https://github.com/yumaojun03/golang/tree/master/grpc-auth" target="_blank" rel="external">grpc中间件认证</a></p>
<p>在进行coding前, 我们需要为服务端生成TLS需要的证书:</p>
<ul>
<li><p>自建CA</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成CA自己的私钥</span></div><div class="line">$(<span class="built_in">umask</span> 077; openssl genrsa -out private/cakey.pem 2048)</div><div class="line"><span class="comment"># 自签10年</span></div><div class="line"><span class="variable">$openssl</span> req -new -x509 -key private/cakey.pem -out cacert.pem</div><div class="line">Country Name (2 letter code) [AU]:CN</div><div class="line">State or Province Name (full name) [Some-State]:SiChuan</div><div class="line">Locality Name (eg, city) []:ChengDu</div><div class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:defineIOT Ltd</div><div class="line">Organizational Unit Name (eg, section) []:Tec</div><div class="line">Common Name (e.g. server FQDN or YOUR name) []:ca</div><div class="line">Email Address []:yumaojun03@gmail.com</div><div class="line"><span class="comment"># 初始化自建CA的一部分文件</span></div><div class="line"><span class="variable">$mkdir</span> certs newcerts crl</div><div class="line"><span class="variable">$touch</span> index.txt</div><div class="line"><span class="variable">$touch</span> serial</div><div class="line"><span class="variable">$echo</span> 01 &gt; serial</div></pre></td></tr></table></figure>
</li>
<li><p>签发服务端证书</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成server自己的私钥</span></div><div class="line"><span class="variable">$openssl</span> genrsa -out server1.key 2048</div><div class="line"><span class="comment"># 生成证书签证请求</span></div><div class="line"><span class="variable">$openssl</span> req -new -key server1.key -out server1.csr</div><div class="line">Country Name (2 letter code) [AU]:CN</div><div class="line">State or Province Name (full name) [Some-State]:Chengdu</div><div class="line">Locality Name (eg, city) []:Chengdu</div><div class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:defineIOT Ltd</div><div class="line">Organizational Unit Name (eg, section) []:Tec</div><div class="line">Common Name (e.g. server FQDN or YOUR name) []:server1</div><div class="line">Email Address []:yumaojun03@gmail.com</div><div class="line"></div><div class="line">Please enter the following <span class="string">'extra'</span> attributes</div><div class="line">to be sent with your certificate request</div><div class="line">A challenge password []:</div><div class="line">An optional company name []:</div><div class="line"><span class="comment"># 因为我CA就在本服务器上,直接签发证书</span></div><div class="line"><span class="variable">$openssl</span> ca -in GoWorkDir/src/golang/grpc-auth/keys/server1.csr -out server1.pem -days 3650</div><div class="line">Using configuration from /System/Library/OpenSSL/openssl.cnf</div><div class="line">Check that the request matches the signature</div><div class="line">Signature ok</div><div class="line">The stateOrProvinceName field needed to be the same <span class="keyword">in</span> the</div><div class="line">CA certificate (SiChuan) and the request (Chengdu)</div><div class="line"><span class="comment"># 将签好的证书交给server</span></div><div class="line"><span class="variable">$mv</span> server1.pem GoWorkDir/src/golang/grpc-auth/keys</div><div class="line"><span class="comment"># server端的证书准备完成</span></div><div class="line"><span class="variable">$ll</span> GoWorkDir/src/golang/grpc-auth/keys</div><div class="line">total 40</div><div class="line">-rw-r--r--  1 maojun  staff   1.6K  8  8 09:15 cacert.pem</div><div class="line">-rw-r--r--  1 maojun  staff   1.0K  8  8 09:27 server1.csr</div><div class="line">-rw-r--r--  1 maojun  staff   1.6K  8  7 21:21 server1.key</div><div class="line">-rw-r--r--  1 maojun  staff   4.5K  8  8 09:28 server1.pem</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>生成契约文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$protoc</span> --go_out=plugins=grpc:. hello.proto</div></pre></td></tr></table></figure></p>
<p>目录结构如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$tree</span> .</div><div class="line">.</div><div class="line">├── client</div><div class="line">│   └── main.go</div><div class="line">├── keys</div><div class="line">│   ├── cacert.pem</div><div class="line">│   ├── server1.csr</div><div class="line">│   ├── server1.key</div><div class="line">│   └── server1.pem</div><div class="line">├── proto</div><div class="line">│   ├── hello.pb.go</div><div class="line">│   └── hello.proto</div><div class="line">└── server</div><div class="line">    └── main.go</div></pre></td></tr></table></figure></p>
<h3 id="tls"><a href="#tls" class="headerlink" title="tls"></a>tls</h3><p>先看credentials.go中关于通过TLS创建客户端和服务端相关函数<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// NewClientTLSFromFile 传入客户端建立TLS连接时需要的证书, 这里主要指CA的证书</span></div><div class="line"><span class="comment">// serverNameOverride 仅仅由于测试, 通常传入""</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewClientTLSFromFile</span><span class="params">(certFile, serverNameOverride <span class="keyword">string</span>)</span> <span class="params">(TransportCredentials, error)</span></span> &#123;</div><div class="line">        b, err := ioutil.ReadFile(certFile)</div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">        &#125;</div><div class="line">        cp := x509.NewCertPool()</div><div class="line">        <span class="keyword">if</span> !cp.AppendCertsFromPEM(b) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"credentials: failed to append certificates"</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> NewTLS(&amp;tls.Config&#123;ServerName: serverNameOverride, RootCAs: cp&#125;), <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// NewServerTLSFromFile 传入服务端建立TLS连接时需要的证书, 这里主要指服务端的证书和私钥</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServerTLSFromFile</span><span class="params">(certFile, keyFile <span class="keyword">string</span>)</span> <span class="params">(TransportCredentials, error)</span></span> &#123;</div><div class="line">        cert, err := tls.LoadX509KeyPair(certFile, keyFile)</div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> NewTLS(&amp;tls.Config&#123;Certificates: []tls.Certificate&#123;cert&#125;&#125;), <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因此我们自建一个CA, 然后生成server端的证书就可以使用这组函数来完成TLS的建立了</p>
<h4 id="服务端TLS启动"><a href="#服务端TLS启动" class="headerlink" title="服务端TLS启动"></a>服务端TLS启动</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"net"</span></div><div class="line"></div><div class="line">	pb <span class="string">"golang/grpc-auth/proto"</span></div><div class="line"></div><div class="line">	<span class="string">"golang.org/x/net/context"</span></div><div class="line">	<span class="string">"google.golang.org/grpc"</span></div><div class="line">	<span class="string">"google.golang.org/grpc/credentials"</span> <span class="comment">// 引入grpc认证包</span></div><div class="line">	<span class="string">"google.golang.org/grpc/grpclog"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">const</span> (</div><div class="line">	<span class="comment">// Address gRPC服务地址</span></div><div class="line">	Address = <span class="string">"127.0.0.1:50052"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// 定义helloService并实现约定的接口</span></div><div class="line"><span class="keyword">type</span> helloService <span class="keyword">struct</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// HelloService ...</span></div><div class="line"><span class="keyword">var</span> HelloService = helloService&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h helloService)</span> <span class="title">SayHello</span><span class="params">(ctx context.Context, in *pb.HelloRequest)</span> <span class="params">(*pb.HelloResponse, error)</span></span> &#123;</div><div class="line">	resp := <span class="built_in">new</span>(pb.HelloResponse)</div><div class="line">	resp.Message = <span class="string">"Hello "</span> + in.Name + <span class="string">"."</span></div><div class="line"></div><div class="line">	<span class="keyword">return</span> resp, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	listen, err := net.Listen(<span class="string">"tcp"</span>, Address)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		grpclog.Fatalf(<span class="string">"failed to listen: %v"</span>, err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// TLS认证</span></div><div class="line">	creds, err := credentials.NewServerTLSFromFile(<span class="string">"../keys/server1.pem"</span>, <span class="string">"../keys/server1.key"</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		grpclog.Fatalf(<span class="string">"Failed to generate credentials %v"</span>, err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 实例化grpc Server, 并开启TLS认证</span></div><div class="line">	s := grpc.NewServer(grpc.Creds(creds))</div><div class="line"></div><div class="line">	<span class="comment">// 注册HelloService</span></div><div class="line">	pb.RegisterHelloServer(s, HelloService)</div><div class="line"></div><div class="line">	grpclog.Println(<span class="string">"Listen on "</span> + Address + <span class="string">" with TLS"</span>)</div><div class="line"></div><div class="line">	s.Serve(listen)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="客户端带证书调用"><a href="#客户端带证书调用" class="headerlink" title="客户端带证书调用"></a>客户端带证书调用</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	pb <span class="string">"golang/grpc-auth/proto"</span></div><div class="line"></div><div class="line">	<span class="string">"golang.org/x/net/context"</span></div><div class="line">	<span class="string">"google.golang.org/grpc"</span></div><div class="line">	<span class="string">"google.golang.org/grpc/credentials"</span> <span class="comment">// 引入grpc认证包</span></div><div class="line">	<span class="string">"google.golang.org/grpc/grpclog"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">const</span> (</div><div class="line">	<span class="comment">// Address gRPC服务地址</span></div><div class="line">	Address = <span class="string">"127.0.0.1:50052"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="comment">// TLS连接</span></div><div class="line">	creds, err := credentials.NewClientTLSFromFile(<span class="string">"../keys/cacert.pem"</span>, <span class="string">"server1"</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		grpclog.Fatalf(<span class="string">"Failed to create TLS credentials %v"</span>, err)</div><div class="line">	&#125;</div><div class="line">	conn, err := grpc.Dial(Address, grpc.WithTransportCredentials(creds))</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		grpclog.Fatalln(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">defer</span> conn.Close()</div><div class="line"></div><div class="line">	<span class="comment">// 初始化客户端</span></div><div class="line">	c := pb.NewHelloClient(conn)</div><div class="line"></div><div class="line">	<span class="comment">// 调用方法</span></div><div class="line">	reqBody := <span class="built_in">new</span>(pb.HelloRequest)</div><div class="line">	reqBody.Name = <span class="string">"gRPC"</span></div><div class="line">	r, err := c.SayHello(context.Background(), reqBody)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		grpclog.Fatalln(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	grpclog.Println(r.Message)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="认证拦截器"><a href="#认证拦截器" class="headerlink" title="认证拦截器"></a>认证拦截器</h3><p>认证包含2部分:</p>
<ul>
<li>服务端认证token</li>
<li>客户端携带token</li>
</ul>
<h4 id="服务端认证token"><a href="#服务端认证token" class="headerlink" title="服务端认证token"></a>服务端认证token</h4><p>拦截器部分的源码在interceptor.go中, 我仅关注普通rpc, 对于流式rpc的拦截器不做说明, 以下是相关函数:</p>
<ul>
<li>客户端拦截器</li>
<li>服务端拦截器<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// UnaryClientInterceptor拦截在客户端执行的非流式RPC. inovker就是真正的RPC的handler,</span></div><div class="line"><span class="comment">// 拦截器的责任就是完成自己的逻辑后调用该handler, 让请求继续RPC的工作 </span></div><div class="line"><span class="keyword">type</span> UnaryClientInterceptor <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, method <span class="keyword">string</span>, req, reply <span class="keyword">interface</span>&#123;&#125;, cc *ClientConn, invoker UnaryInvoker, opts ...CallOption)</span> <span class="title">error</span></span></div><div class="line"></div><div class="line">// <span class="title">UnaryServerInterceptor</span> 提供了一个在服务器上执行<span class="title">unary</span> <span class="title">RPC</span>的钩子, </div><div class="line">// <span class="title">info</span> 包含拦截器可以操作的<span class="title">RPC</span>的所有信息。</div><div class="line">// <span class="title">handler</span> 是服务方法实现的一个包装器, 而拦截器的责任就是调用该<span class="title">handler</span>完成<span class="title">RPC</span>, 让请求继续<span class="title">RPC</span>的工作</div><div class="line"><span class="title">type</span> <span class="title">UnaryServerInterceptor</span> <span class="title">func</span><span class="params">(ctx context.Context, req <span class="keyword">interface</span>&#123;&#125;, info *UnaryServerInfo, handler UnaryHandler)</span> <span class="params">(resp <span class="keyword">interface</span>&#123;&#125;, err error)</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>因此我们想要在服务端实现请求的认证功能, 仅需要实现一个自己的UnaryServerInterceptor函数, 并且在server启动时作为参数传递给它即可</p>
<p>总体需要3步:</p>
<ul>
<li>自定义auth函数,实现认证逻辑</li>
<li>定义一个使用自定义认证(auth)的拦截器</li>
<li>server启动时随参数传入</li>
</ul>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"net"</span></div><div class="line"></div><div class="line">	pb <span class="string">"golang/grpc-auth/proto"</span></div><div class="line"></div><div class="line">	<span class="string">"golang.org/x/net/context"</span></div><div class="line">	<span class="string">"google.golang.org/grpc"</span></div><div class="line">	<span class="string">"google.golang.org/grpc/codes"</span>       <span class="comment">// grpc 响应状态码</span></div><div class="line">	<span class="string">"google.golang.org/grpc/credentials"</span> <span class="comment">// grpc认证包</span></div><div class="line">	<span class="string">"google.golang.org/grpc/grpclog"</span></div><div class="line">	<span class="string">"google.golang.org/grpc/metadata"</span> <span class="comment">// grpc metadata包</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">const</span> (</div><div class="line">	<span class="comment">// Address gRPC服务地址</span></div><div class="line">	Address = <span class="string">"127.0.0.1:50052"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// 定义helloService并实现约定的接口</span></div><div class="line"><span class="keyword">type</span> helloService <span class="keyword">struct</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// HelloService ...</span></div><div class="line"><span class="keyword">var</span> HelloService = helloService&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h helloService)</span> <span class="title">SayHello</span><span class="params">(ctx context.Context, in *pb.HelloRequest)</span> <span class="params">(*pb.HelloResponse, error)</span></span> &#123;</div><div class="line">	resp := <span class="built_in">new</span>(pb.HelloResponse)</div><div class="line">	resp.Message = <span class="string">"Hello "</span> + in.Name + <span class="string">"."</span></div><div class="line"></div><div class="line">	<span class="keyword">return</span> resp, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// auth 验证Token</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">auth</span><span class="params">(ctx context.Context)</span> <span class="title">error</span></span> &#123;</div><div class="line">	md, ok := metadata.FromContext(ctx)</div><div class="line">	<span class="keyword">if</span> !ok &#123;</div><div class="line">		<span class="keyword">return</span> grpc.Errorf(codes.Unauthenticated, <span class="string">"无Token认证信息"</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> (</div><div class="line">		appid  <span class="keyword">string</span></div><div class="line">		appkey <span class="keyword">string</span></div><div class="line">	)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> val, ok := md[<span class="string">"appid"</span>]; ok &#123;</div><div class="line">		appid = val[<span class="number">0</span>]</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> val, ok := md[<span class="string">"appkey"</span>]; ok &#123;</div><div class="line">		appkey = val[<span class="number">0</span>]</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	grpclog.Printf(<span class="string">"appid: %s, appkey: %s\n"</span>, appid, appkey)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> appid != <span class="string">"101010"</span> || appkey != <span class="string">"i am key"</span> &#123;</div><div class="line">		<span class="keyword">return</span> grpc.Errorf(codes.Unauthenticated, <span class="string">"Token认证信息无效: appid=%s, appkey=%s"</span>, appid, appkey)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	listen, err := net.Listen(<span class="string">"tcp"</span>, Address)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		grpclog.Fatalf(<span class="string">"Failed to listen: %v"</span>, err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> opts []grpc.ServerOption</div><div class="line"></div><div class="line">	<span class="comment">// TLS认证</span></div><div class="line">	creds, err := credentials.NewServerTLSFromFile(<span class="string">"../keys/server1.pem"</span>, <span class="string">"../keys/server1.key"</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		grpclog.Fatalf(<span class="string">"Failed to generate credentials %v"</span>, err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	opts = <span class="built_in">append</span>(opts, grpc.Creds(creds))</div><div class="line"></div><div class="line">	<span class="comment">// 注册interceptor</span></div><div class="line">	<span class="keyword">var</span> interceptor grpc.UnaryServerInterceptor</div><div class="line">	interceptor = <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, req <span class="keyword">interface</span>&#123;&#125;, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler)</span> <span class="params">(resp <span class="keyword">interface</span>&#123;&#125;, err error)</span></span> &#123;</div><div class="line">		err = auth(ctx)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			<span class="keyword">return</span></div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 继续处理请求</span></div><div class="line">		<span class="keyword">return</span> handler(ctx, req)</div><div class="line">	&#125;</div><div class="line">	opts = <span class="built_in">append</span>(opts, grpc.UnaryInterceptor(interceptor))</div><div class="line"></div><div class="line">	<span class="comment">// 实例化grpc Server</span></div><div class="line">	s := grpc.NewServer(opts...)</div><div class="line"></div><div class="line">	<span class="comment">// 注册HelloService</span></div><div class="line">	pb.RegisterHelloServer(s, HelloService)</div><div class="line"></div><div class="line">	grpclog.Println(<span class="string">"Listen on "</span> + Address + <span class="string">" with TLS + Token + Interceptor"</span>)</div><div class="line"></div><div class="line">	s.Serve(listen)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="客户端携带token"><a href="#客户端携带token" class="headerlink" title="客户端携带token"></a>客户端携带token</h4><p>而至于客户端如何在每次调用时都传递自己的token信息, 有比客户端拦截器更方便的方式, 因为credentials中有提供这样的接口<br>这部分代码在credentials.go中<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// PerRPCCredentials 为认证定义了一个通用接口, 每次RPC调用都需要提供安全信息(比如oauth2的token)</span></div><div class="line"><span class="keyword">type</span> PerRPCCredentials <span class="keyword">interface</span> &#123;</div><div class="line">        <span class="comment">// GetRequestMetadata 获取当前请求的元数据, 如果需要可以刷新tokens.</span></div><div class="line">        <span class="comment">// 该方法在请求被传输之前调用, 而数据需要放在header里面或者其他context中.</span></div><div class="line">        <span class="comment">// uri代表请求条目的URI</span></div><div class="line">        <span class="comment">// 在底层实现的支持下, ctx可以用于超时和取消</span></div><div class="line">        <span class="comment">// <span class="doctag">TODO:</span> 定义限定键的集合，而不是将其保留为任意字符串。</span></div><div class="line">        GetRequestMetadata(ctx context.Context, uri ...<span class="keyword">string</span>) (<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, error)</div><div class="line">        <span class="comment">// RequireTransportSecurity 表明认证过程是否需要安全传输(是否开启TLS)</span></div><div class="line">        RequireTransportSecurity() <span class="keyword">bool</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因此可以看出我们仅需要实现GetRequestMetadata和RequireTransportSecurity即可, 通过GetRequestMetadata方法将需要的token传递给客户端即可。</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	pb <span class="string">"golang/grpc-auth/proto"</span></div><div class="line"></div><div class="line">	<span class="string">"golang.org/x/net/context"</span></div><div class="line">	<span class="string">"google.golang.org/grpc"</span></div><div class="line">	<span class="string">"google.golang.org/grpc/credentials"</span> <span class="comment">// 引入grpc认证包</span></div><div class="line">	<span class="string">"google.golang.org/grpc/grpclog"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">const</span> (</div><div class="line">	<span class="comment">// Address gRPC服务地址</span></div><div class="line">	Address = <span class="string">"127.0.0.1:50052"</span></div><div class="line"></div><div class="line">	<span class="comment">// OpenTLS 是否开启TLS认证</span></div><div class="line">	OpenTLS = <span class="literal">true</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// customCredential 自定义认证</span></div><div class="line"><span class="keyword">type</span> customCredential <span class="keyword">struct</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c customCredential)</span> <span class="title">GetRequestMetadata</span><span class="params">(ctx context.Context, uri ...<span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, error)</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</div><div class="line">		<span class="string">"appid"</span>:  <span class="string">"101010"</span>,</div><div class="line">		<span class="string">"appkey"</span>: <span class="string">"i am key"</span>,</div><div class="line">	&#125;, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c customCredential)</span> <span class="title">RequireTransportSecurity</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> OpenTLS &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> err error</div><div class="line">	<span class="keyword">var</span> opts []grpc.DialOption</div><div class="line"></div><div class="line">	<span class="keyword">if</span> OpenTLS &#123;</div><div class="line">		<span class="comment">// TLS连接</span></div><div class="line">		creds, err := credentials.NewClientTLSFromFile(<span class="string">"../keys/cacert.pem"</span>, <span class="string">"server1"</span>)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			grpclog.Fatalf(<span class="string">"Failed to create TLS credentials %v"</span>, err)</div><div class="line">		&#125;</div><div class="line">		opts = <span class="built_in">append</span>(opts, grpc.WithTransportCredentials(creds))</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		opts = <span class="built_in">append</span>(opts, grpc.WithInsecure())</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 指定自定义认证</span></div><div class="line">	opts = <span class="built_in">append</span>(opts, grpc.WithPerRPCCredentials(<span class="built_in">new</span>(customCredential)))</div><div class="line"></div><div class="line">	conn, err := grpc.Dial(Address, opts...)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		grpclog.Fatalln(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">defer</span> conn.Close()</div><div class="line"></div><div class="line">	<span class="comment">// 初始化客户端</span></div><div class="line">	c := pb.NewHelloClient(conn)</div><div class="line"></div><div class="line">	<span class="comment">// 调用方法</span></div><div class="line">	reqBody := <span class="built_in">new</span>(pb.HelloRequest)</div><div class="line">	reqBody.Name = <span class="string">"gRPC"</span></div><div class="line">	r, err := c.SayHello(context.Background(), reqBody)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		grpclog.Fatalln(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	grpclog.Println(r.Message)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>针对以上功能做测试</p>
<h3 id="正常测试"><a href="#正常测试" class="headerlink" title="正常测试"></a>正常测试</h3><p>带证书和合法token的请求<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$go</span> run main.go</div><div class="line">2017/08/08 10:36:10 Listen on 127.0.0.1:50052 with TLS + Token + Interceptor</div><div class="line">2017/08/08 10:36:13 appid: 101010, appkey: i am key</div></pre></td></tr></table></figure></p>
<p>请求成功<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$go</span> run main.go</div><div class="line">2017/08/08 10:36:13 Hello gRPC.</div></pre></td></tr></table></figure></p>
<h3 id="异常测试"><a href="#异常测试" class="headerlink" title="异常测试"></a>异常测试</h3><p>不带证书的请求<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$go</span> run main.go</div><div class="line">2017/08/08 11:05:36 Listen on 127.0.0.1:50052 with TLS + Token + Interceptor</div><div class="line">2017/08/08 11:05:38 grpc: Server.Serve failed to complete security handshake from <span class="string">"127.0.0.1:56310"</span>: tls: first record does not look like a TLS handshake</div></pre></td></tr></table></figure></p>
<p>请求失败<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$go</span> run main.go</div><div class="line">2017/08/08 11:05:38 transport: http2Client.notifyError got notified that the client transport was broken unexpected EOF.</div><div class="line">2017/08/08 11:05:38 rpc error: code = Internal desc = transport is closing</div><div class="line"><span class="built_in">exit</span> status 1</div></pre></td></tr></table></figure></p>
<p>带证书但token不合法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$go</span> run main.go</div><div class="line">2017/08/08 11:08:36 rpc error: code = Unauthenticated desc = Token认证信息无效: appid=101010, appkey=i am key1</div><div class="line"><span class="built_in">exit</span> status 1</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;gRPC的服务端需要与认证平台对接, 之前使用http时通过中间件的形式进行实现, 因此这篇文章主要验证gRPC中能否以中间件的形式实现gRPC的认证。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="gRPC" scheme="https://blog.yumaojun.net/tags/gRPC/"/>
    
      <category term="APIGateway" scheme="https://blog.yumaojun.net/tags/APIGateway/"/>
    
  </entry>
  
  <entry>
    <title>Golang HTTP服务优雅重启</title>
    <link href="https://blog.yumaojun.net/2017/08/06/http-graceful/"/>
    <id>https://blog.yumaojun.net/2017/08/06/http-graceful/</id>
    <published>2017-08-06T06:36:42.000Z</published>
    <updated>2017-08-08T08:52:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>RESTful API Gateway是一个高稳定性的组件, 因此需要有像Nginx Reload那样平滑升级的能力, 即关闭正在运行的老程序，并启动新程序。<br><a id="more"></a></p>
<h2 id="标准库的的实现"><a href="#标准库的的实现" class="headerlink" title="标准库的的实现"></a>标准库的的实现</h2><p>Go在1.8对net/http进行了更新, 提供了http服务优雅关闭的能力。</p>
<h3 id="官方说明"><a href="#官方说明" class="headerlink" title="官方说明"></a>官方说明</h3><p>我们看下server.go中关于Colse方法的描述:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Close将会立即关闭所有活跃的监听器以及所有连接,比如新连接,活跃连接, 空闲连接</span></div><div class="line"><span class="comment">// 如果想优雅关闭服务, 请使用Shutdown</span></div><div class="line"><span class="comment">// 注意close并不尝试关闭或者等待hijacked连接，如WebSockets</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(srv *Server)</span> <span class="title">Close</span><span class="params">()</span> <span class="title">error</span></span> &#123;</div><div class="line">        srv.mu.Lock()</div><div class="line">        <span class="keyword">defer</span> srv.mu.Unlock()</div><div class="line">        srv.closeDoneChanLocked()</div><div class="line">        err := srv.closeListenersLocked()</div><div class="line">        <span class="keyword">for</span> c := <span class="keyword">range</span> srv.activeConn &#123;</div><div class="line">                c.rwc.Close()</div><div class="line">                <span class="built_in">delete</span>(srv.activeConn, c)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> err</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对比close方法, 我们看下Shutdown到底多做了什么工作:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Shutdown会启动一个定时器,定期巡检那些空闲连接, 然后把这些空闲连接关闭</span></div><div class="line"><span class="comment">// 而这个巡检时间就是shutdownPollInterval, 可以看出默认为500毫秒</span></div><div class="line"><span class="comment">// </span></div><div class="line"><span class="comment">// 我们能找到不涉及投票的最理想解决方案，同时它的消耗也很少(不涉及任何互斥锁),</span></div><div class="line"><span class="comment">// 但是是留给读者作为练习。</span></div><div class="line"><span class="keyword">var</span> shutdownPollInterval = <span class="number">500</span> * time.Millisecond</div><div class="line"></div><div class="line"><span class="comment">// Shutdown 将无中断的关闭正在活跃的连接，然后平滑的停止服务。处理流程如下:</span></div><div class="line"><span class="comment">// 1) 首先关闭所有的监听</span></div><div class="line"><span class="comment">// 2) 然后关闭所有的空闲连接</span></div><div class="line"><span class="comment">// 3) 然后无限期等待连接处理完毕转为空闲，并关闭</span></div><div class="line"><span class="comment">// 4) 如果提供了 带有超时的Context，将在服务关闭前返回 Context的超时错误</span></div><div class="line"><span class="comment">// </span></div><div class="line"><span class="comment">// Shutdown 并不尝试关闭或者等待 hijacked连接，</span></div><div class="line"><span class="comment">// 如 WebSockets。如果需要的话调用者需要分别处理诸如长连接类型的等待和关闭。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(srv *Server)</span> <span class="title">Shutdown</span><span class="params">(ctx context.Context)</span> <span class="title">error</span></span> &#123;</div><div class="line">        atomic.AddInt32(&amp;srv.inShutdown, <span class="number">1</span>)</div><div class="line">        <span class="keyword">defer</span> atomic.AddInt32(&amp;srv.inShutdown, <span class="number">-1</span>)</div><div class="line"></div><div class="line">        srv.mu.Lock()</div><div class="line">        lnerr := srv.closeListenersLocked()</div><div class="line">        srv.closeDoneChanLocked()</div><div class="line">        srv.mu.Unlock()</div><div class="line"></div><div class="line">        ticker := time.NewTicker(shutdownPollInterval)</div><div class="line">        <span class="keyword">defer</span> ticker.Stop()</div><div class="line">        <span class="keyword">for</span> &#123;</div><div class="line">                <span class="keyword">if</span> srv.closeIdleConns() &#123;</div><div class="line">                        <span class="keyword">return</span> lnerr</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">select</span> &#123;</div><div class="line">                <span class="keyword">case</span> &lt;-ctx.Done():</div><div class="line">                        <span class="keyword">return</span> ctx.Err()</div><div class="line">                <span class="keyword">case</span> &lt;-ticker.C:</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="简单样例"><a href="#简单样例" class="headerlink" title="简单样例"></a>简单样例</h3><p>根据上面的分析, 我们写一个简单的栗子进行测试(Github地址: <a href="https://github.com/yumaojun03/golang/blob/master/http-graceful/main.go" target="_blank" rel="external">HTTP Graceful</a>)<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"context"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"os/signal"</span></div><div class="line">	<span class="string">"syscall"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	http.HandleFunc(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">		<span class="comment">// for test active connection</span></div><div class="line">		time.Sleep(time.Second * <span class="number">2</span>)</div><div class="line">		fmt.Fprintf(w, <span class="string">"Hello World, %v\n"</span>, time.Now())</div><div class="line">	&#125;)</div><div class="line"></div><div class="line">	s := &amp;http.Server&#123;</div><div class="line">		Addr:           <span class="string">":8080"</span>,</div><div class="line">		Handler:        http.DefaultServeMux,</div><div class="line">		ReadTimeout:    <span class="number">10</span> * time.Second,</div><div class="line">		WriteTimeout:   <span class="number">10</span> * time.Second,</div><div class="line">		MaxHeaderBytes: <span class="number">1</span> &lt;&lt; <span class="number">20</span>,</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		log.Printf(<span class="string">"server start at: 127.0.0.1:8080"</span>)</div><div class="line">		log.Println(s.ListenAndServe())</div><div class="line">		log.Println(<span class="string">"server shutdown"</span>)</div><div class="line">	&#125;()</div><div class="line"></div><div class="line">	<span class="comment">// Handle SIGINT, SIGTERM, SIGKILL, SIGHUP, SIGQUIT</span></div><div class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal)</div><div class="line">	signal.Notify(ch, syscall.SIGTERM, syscall.SIGINT, syscall.SIGKILL, syscall.SIGHUP, syscall.SIGQUIT)</div><div class="line">	log.Println(&lt;-ch)</div><div class="line"></div><div class="line">	<span class="comment">// Stop the service gracefully.</span></div><div class="line">	ctx, cancel := context.WithTimeout(context.Background(), <span class="number">10</span>*time.Second)</div><div class="line">	<span class="keyword">defer</span> cancel()</div><div class="line">	log.Println(s.Shutdown(ctx))</div><div class="line"></div><div class="line">	<span class="comment">// Wait gorotine print shutdown message</span></div><div class="line">	time.Sleep(time.Second * <span class="number">10</span>)</div><div class="line">	log.Println(<span class="string">"done."</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动服务端, 并关注日志:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$go</span> run main.go</div><div class="line">2017/08/06 16:06:47 server start at: 127.0.0.1:8080</div><div class="line">^C2017/08/06 16:07:10 interrupt</div><div class="line">2017/08/06 16:07:10 http: Server closed</div><div class="line">2017/08/06 16:07:10 server shutdown</div><div class="line">2017/08/06 16:07:11 &lt;nil&gt;</div><div class="line">2017/08/06 16:07:21 done.</div></pre></td></tr></table></figure></p>
<p>使用curl发起一次请求, 在请求为结束前关闭服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$curl</span> localhost:8080</div><div class="line">Hello World, 2017-08-06 16:07:11.341038687 +0800 CST</div><div class="line"><span class="variable">$curl</span> localhost:8080</div><div class="line">curl: (7) Failed to connect to localhost port 8080: Connection refused</div></pre></td></tr></table></figure></p>
<p>从测试结果可以看出:</p>
<ol>
<li>正在进行访问的请求不会被关闭, 继续正常响应</li>
<li>新增的请求则拒绝访问</li>
</ol>
<p>因此HTTP的Shutdown的确可以起到优雅关闭服务的作用。</p>
<h2 id="第三方实现"><a href="#第三方实现" class="headerlink" title="第三方实现"></a>第三方实现</h2><p>官方仅仅实现了优雅的关闭, 并没有实现优雅重启, 想要实现像Nginx那样优雅重启, 还有很多工作要做, 有个不错的第三方库已经实现了该能力, 代理质量也不错, 值得使用<br>具体可以参考<a href="https://segmentfault.com/a/1190000004445975" target="_blank" rel="external">Golang开发支持平滑升级（优雅重启）的HTTP服务</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RESTful API Gateway是一个高稳定性的组件, 因此需要有像Nginx Reload那样平滑升级的能力, 即关闭正在运行的老程序，并启动新程序。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="HTTP" scheme="https://blog.yumaojun.net/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>gRPC服务发现和负载均衡</title>
    <link href="https://blog.yumaojun.net/2017/08/02/api-gateway-service-discovery-and-lb/"/>
    <id>https://blog.yumaojun.net/2017/08/02/api-gateway-service-discovery-and-lb/</id>
    <published>2017-08-02T01:48:56.000Z</published>
    <updated>2017-08-08T03:15:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>API网关需要实现服务的自动发现和负载均衡, 由于后面的服务基本都采用gRPC实现, 因此需要验证gRPC如何实现这2个功能。<br><a id="more"></a></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>构建高可用、高性能的通信服务，通常采用服务注册与发现、负载均衡和容错处理等机制实现。gRPC在设计时已有考虑, 官方也提供了一些基本实现, 但是如何围绕官方设计实现服务发现和负载均衡却并不容易, 我会围绕以下几点进行展开:</p>
<ul>
<li>解读官方文档: <a href="https://github.com/grpc/grpc/blob/master/doc/load-balancing.md" target="_blank" rel="external">Load Balancing in gRPC</a></li>
<li>负载均衡部分源码解读</li>
<li>代码实现,参考<a href="https://github.com/wothing/wonaming" target="_blank" rel="external">wonaming</a></li>
</ul>
<h2 id="官方设计"><a href="#官方设计" class="headerlink" title="官方设计"></a>官方设计</h2><p>官方这篇文档主要是阐述如何利用gRPC设计负载均衡。</p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>值得注意的是gGRC的负载均衡是以call为基础, 而不是以连接为基础, 也就是说同一个客户端的不同请求 会被分摊到后面该服务的集群上面。</p>
<h3 id="负载均衡的方法"><a href="#负载均衡的方法" class="headerlink" title="负载均衡的方法"></a>负载均衡的方法</h3><p>在讨论任何gRPC的细节之前, 先认识下常用负载均衡的方法:</p>
<ol>
<li><p>代理模式(Proxy Model)<br><img src="http://oiw1gzfww.bkt.clouddn.com/classic-lb.png" alt=""><br>代理模式的负载均衡机制位于服务外部, 借助其他工具实现。它一般位于消费者和服务提供者之间, 比如专门的硬件设备F5, 或者软件HAProxy,Nginx等, LB上有所有服务的地址映射表，通常由运维配置注册，当服务消费方调用某个目标服务时，它向LB发起请求，由LB以某种策略，比如轮询(Round-Robin)做负载均衡后将请求转发到目标服务。LB一般具备健康检查能力，能自动摘除不健康的服务实例。<br>该方案的问题:</p>
<ul>
<li>配置不方便: 基本都使用配置文件或者UI的方式操作, 并没有友好的API调用, 不方便集成</li>
<li>扩展性: 预留的扩展空间不足, 不能很好的根据自己的需求扩展功能, 但Nginx除外</li>
<li>性能损耗: 由于需要复制请求和响应, 会有一定的性能损耗, 对于存储这种重服务就不适用了</li>
</ul>
</li>
<li><p>基于客户端模式(Balancing-aware Client)<br><img src="http://oiw1gzfww.bkt.clouddn.com/internal-lb01.png" alt=""><br>针对第一个方案的不足，此方案将LB的功能集成到服务消费方进程里，也被称为软负载或者客户端负载方案, 因此客户端会略现重一些, 比如客户端会包含很多调度策略(Round Robin, Random, etc)用于从server列表中挑选合适的server进行调度。 在这种模式下, 服务器列表将在客户端中静态配置, 由名称解析系统和外部负载均衡器提供, 在任何情况下, 客户端负责从列表中选取最合适的server进行调度。<br>具体的实现过程如下:</p>
<ul>
<li>服务提供方启动时，首先将服务地址注册到服务注册表，同时定期报心跳到服务注册表以表明服务的存活状态，相当于健康检查</li>
<li>服务消费方要访问某个服务时，它通过内置的LB组件向服务注册表查询，同时缓存并定期刷新目标服务地址列表，然后以某种负载均衡策略选择一个目标服务地址，最后向目标服务发起请求。LB和服务发现能力被分散到每一个服务消费者的进程内部，同时服务消费方和服务提供方之间是直接调用，没有额外开销，性能比较好。</li>
</ul>
</li>
</ol>
<p>该方案主要问题：</p>
<ul>
<li>开发成本，编写和维护多种语言或客户端的负载均衡策略, 会有冗余, 而且也增加了开发成本和维护成本。</li>
<li>增加客户端复杂性，这些负载均衡策略 有可能还需要和服务端进行一些额外的通信, 比如监控状态检查, 负载信息, 它将使得客户端代码复杂化。 </li>
</ul>
<ol>
<li>外部负载均衡器<br><img src="http://oiw1gzfww.bkt.clouddn.com/external-lb.png" alt=""><br>针对客户端过重的问题, 有了第三种方式: 复杂的调度算法独立成LB, 由外部提供。而客户端保持简单和可移植,仅实现一些基本的server挑选算法比如 Round Robin, 而客户端依赖LB提供负载均衡的配置和客户端需要发送请求的server列表, LB需要根据需要更新server列表,以平衡负载, 处理server不可用或者健康问题.</li>
</ol>
<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>gRPC主要采用外部负载均衡的方式, 因gRPC实现了简单服务挑选算法: Round Robin, 同时也提供了一种外部LB算法的参考实现: grpclb, 官方并不建议 再往里面添加更多的算发, 而更多的算法需要通过外部LB提供实现。</p>
<p>工作流程大致如下:<br><img src="https://github.com/grpc/grpc/raw/master/doc/images/load-balancing.png" alt=""></p>
<ol>
<li>服务启动后gRPC客户端向命名服务器发出名称解析请求，名称将解析为一个或多个IP地址，每个IP地址标示它是服务器地址还是负载均衡器地址，以及标示要使用那个客户端负载均衡策略或服务配置。而客户端提供的负载均衡策略有round_robin和grpclb</li>
<li>客户端实例化负载均衡策略，如果解析返回的地址是负载均衡器地址，则客户端将使用grpclb策略，否则客户端使用服务配置请求的负载均衡策略,如果没有从服务配置文件中解析到负载均衡策略, 则客户端会选择第一个可用的服务地址。</li>
<li>负载均衡策略为每个服务器地址创建一个子通道（channel）。</li>
<li>当有rpc请求时，负载均衡策略决定那个子通道即grpc服务器将接收请求，当可用服务器为空时客户端的请求将被阻塞。</li>
</ol>
<h2 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h2><p>主要看官方如何实现round robin这个负载均衡器和负载均衡工作流程。</p>
<h3 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h3><p>在clientconn.go的DialContext函数中描述了客户端连接连接的过程<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ctx: 上下文用于处理请求取消和请求超时等情况</span></div><div class="line"><span class="comment">// target: 通过这个建立连接, 如果采用负载均衡模式, 他代表watcher地址, 用于watch服务端地址变化</span></div><div class="line"><span class="comment">// opts: 其他建立连接时的参数</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">DialContext</span><span class="params">(ctx context.Context, target <span class="keyword">string</span>, opts ...DialOption)</span> <span class="params">(conn *ClientConn, err error)</span></span> &#123;</div><div class="line">...... <span class="comment">//省略</span></div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">var</span> addrs []Address</div><div class="line">  <span class="keyword">if</span> cc.dopts.balancer == <span class="literal">nil</span> &#123;</div><div class="line">    <span class="comment">//如果没有设置负载均衡器，则直接连接</span></div><div class="line">    addrs = <span class="built_in">append</span>(addrs, Address&#123;Addr: target&#125;)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">var</span> credsClone credentials.TransportCredentials</div><div class="line">    <span class="keyword">if</span> creds != <span class="literal">nil</span> &#123;</div><div class="line">      credsClone = creds.Clone()</div><div class="line">    &#125;</div><div class="line">    config := BalancerConfig&#123;</div><div class="line">      DialCreds: credsClone,</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//启动一个负载均衡器,start函数会启动一个watch监听地址的变化.</span></div><div class="line">    <span class="keyword">if</span> err := cc.dopts.balancer.Start(target, config); err != <span class="literal">nil</span> &#123;</div><div class="line">      waitC &lt;- err</div><div class="line">      <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Notify返回一个通道，在每次服务器地址变化后的最新地址信息.</span></div><div class="line">    ch := cc.dopts.balancer.Notify()</div><div class="line">    <span class="keyword">if</span> ch == <span class="literal">nil</span> &#123;</div><div class="line">      <span class="comment">// There is no name resolver installed.</span></div><div class="line">      addrs = <span class="built_in">append</span>(addrs, Address&#123;Addr: target&#125;)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      addrs, ok = &lt;-ch</div><div class="line">      <span class="keyword">if</span> !ok || <span class="built_in">len</span>(addrs) == <span class="number">0</span> &#123;</div><div class="line">        waitC &lt;- errNoAddr</div><div class="line">        <span class="keyword">return</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//对每一个地址进行连接, 因为这是客户端启动时，所以需要对所有地址操作.</span></div><div class="line">  <span class="keyword">for</span> _, a := <span class="keyword">range</span> addrs &#123;</div><div class="line">    <span class="keyword">if</span> err := cc.resetAddrConn(a, <span class="literal">false</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</div><div class="line">      waitC &lt;- err</div><div class="line">      <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">close</span>(waitC)</div><div class="line">&#125;()</div><div class="line">.............. <span class="comment">//省略一些代码</span></div><div class="line"><span class="keyword">if</span> ok &#123;</div><div class="line">  <span class="comment">//这里开启一个监听goroutine，主要是监听服务器地址变化并对新的地址建立连接，对老的地址关闭连接</span></div><div class="line">  <span class="keyword">go</span> cc.lbWatcher()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从里面可以看出关于负载均衡部分, 使用balancer的Start来启动地址监听, Notify来获取地址变化, 因此核心是理解Balancer接口。</p>
<h3 id="负载均衡接口"><a href="#负载均衡接口" class="headerlink" title="负载均衡接口"></a>负载均衡接口</h3><p>在balancer.go中有关于此的定义:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Balancer 为RPCs选择网络地址(backend service) </span></div><div class="line"><span class="keyword">type</span> Balancer <span class="keyword">interface</span> &#123;</div><div class="line">  <span class="comment">//启动一个负载均衡，内部会启动一个名称服务器的watcher，不断监听地址的变化</span></div><div class="line">	Start(target <span class="keyword">string</span>, config BalancerConfig) error</div><div class="line">  <span class="comment">// 通知Balancer gRPC通过该地址建立了一个和server的连接, 返回一个down的函数, 当连接断开或者丢失会被调用。</span></div><div class="line">	Up(addr Address) (down <span class="function"><span class="keyword">func</span><span class="params">(error)</span>)</span></div><div class="line">  // 获得下一次连接服务器的地址</div><div class="line">  // 1) 如果返回一个已经建立连接的地址, <span class="title">RPC</span>将基于该连接直接进行调用</div><div class="line">  // 2) 如果返回一个正在连接建立中的地址<span class="params">(Notify初始化时发生过来的)</span>,但是还未完成连接建立，<span class="title">RPC</span>调用可能会失败或者成功</div><div class="line">  // 3) 如果返回一个不存在的连接, 会当做一个错误和失败的相应的<span class="title">RPC</span></div><div class="line">  // 因此如果想要实现一个自定义的<span class="title">Balancer</span>, 建议遵循如下规则</div><div class="line">  // 1) 如果<span class="title">opts</span>.<span class="title">BlockingWait</span>为<span class="title">true</span>, 需要返回一个已经建立连接的地址或者阻塞到直到有建立连接的地址时返回, 当阻塞时</div><div class="line">  //    需要检测超时或者取消该<span class="title">RPC</span></div><div class="line">  // 2) 如果<span class="title">opts</span>.<span class="title">BlockingWait</span>为<span class="title">false</span>, 它应该立即通过通知机制<span class="params">(Nofify)</span>返回一个地址，而不是阻塞。</div><div class="line">  //</div><div class="line">  // <span class="title">put</span>用于收集和报告<span class="title">RPC</span>的状态给远程的<span class="title">LB</span></div><div class="line">	<span class="title">Get</span><span class="params">(ctx context.Context, opts BalancerGetOptions)</span> <span class="params">(addr Address, put <span class="keyword">func</span>()</span>, <span class="title">err</span> <span class="title">error</span>)</div><div class="line">  // 返回一个<span class="title">channel</span>用于实时获取需要建立连接的地址列表, 这些地址可能来源于一个<span class="title">name</span> <span class="title">resover</span>或者一个<span class="title">remote</span> <span class="title">LB</span>, </div><div class="line">  // <span class="title">gRPC</span>将与之前保存的连接地址进行比较, 如果该地址列表有新增的, <span class="title">gRPC</span>对新增的地址进行连接, 如果该地址有减少, <span class="title">gRPC</span>会优雅关闭这</div><div class="line">  // 减少的连接, 如果没变化, <span class="title">gRPC</span>无动作, 注意<span class="title">channel</span>里面返回的一个 完整的地址列表, 而不是增量。</div><div class="line">	<span class="title">Notify</span><span class="params">()</span> &lt;-<span class="title">chan</span> []<span class="title">Address</span></div><div class="line">	//关闭负载均衡器</div><div class="line">	<span class="title">Close</span><span class="params">()</span> <span class="title">error</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="官方实现"><a href="#官方实现" class="headerlink" title="官方实现"></a>官方实现</h3><p>官方的Round Robin就是Balancer接口的一个实现, 但是在看他如何实现Start和Notify之前, 先看看名称解析服务的接口定义.</p>
<h4 id="名称解析服务"><a href="#名称解析服务" class="headerlink" title="名称解析服务"></a>名称解析服务</h4><p>名称解析服务: naming.go, 该包定义了gRPC名称解析服务的API和相关数据结构<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Operation 定义了名称解析时相应的动作.</span></div><div class="line"><span class="keyword">type</span> Operation <span class="keyword">uint8</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> (</div><div class="line">	<span class="comment">// Add 表示新增地址的操作</span></div><div class="line">	Add Operation = <span class="literal">iota</span></div><div class="line">	<span class="comment">// Delete 表示需要删除一个已存在地址的操作 </span></div><div class="line">	Delete</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// Update defines a name resolution update. Notice that it is not valid having both</span></div><div class="line"><span class="comment">// empty string Addr and nil Metadata in an Update.</span></div><div class="line"><span class="keyword">type</span> Update <span class="keyword">struct</span> &#123;</div><div class="line">	<span class="comment">// 具体的更新动作, 比如上面定义的Add或者Delete</span></div><div class="line">	Op Operation</div><div class="line">  <span class="comment">// 需要更新的地址, 如果为空字符串, 表示这儿没有地址需要更新</span></div><div class="line">	Addr <span class="keyword">string</span></div><div class="line">  <span class="comment">// 用于描述updated操作时的一些meta数据, 如果是自己实现名称解析服务Metadata是不需要传入的。</span></div><div class="line">	Metadata <span class="keyword">interface</span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Resolver creates a Watcher for a target to track its resolution changes.</span></div><div class="line"><span class="keyword">type</span> Resolver <span class="keyword">interface</span> &#123;</div><div class="line">  <span class="comment">// 通过一个名字得到一个watcher，监听服务器地址变化。	</span></div><div class="line">	Resolve(target <span class="keyword">string</span>) (Watcher, error)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Watcher watches for the updates on the specified target.</span></div><div class="line"><span class="keyword">type</span> Watcher <span class="keyword">interface</span> &#123;</div><div class="line">	<span class="comment">// Next blocks until an update or error happens. It may return one or more</span></div><div class="line">	<span class="comment">// updates. The first call should get the full set of the results. It should</span></div><div class="line">	<span class="comment">// return an error if and only if Watcher cannot recover.</span></div><div class="line">  <span class="comment">// 得到下次更新的地址</span></div><div class="line">	Next() ([]*Update, error)</div><div class="line">	<span class="comment">// Close closes the Watcher.</span></div><div class="line">	Close()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="round-robin-balancer"><a href="#round-robin-balancer" class="headerlink" title="round robin balancer"></a>round robin balancer</h4><p>在了解了名称解析服务接口过后, 看看round robin的具体实现:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> roundRobin <span class="keyword">struct</span> &#123;</div><div class="line">	r      naming.Resolver</div><div class="line">	w      naming.Watcher</div><div class="line">	addrs  []*addrInfo <span class="comment">// 客户端应该连接的所有地址</span></div><div class="line">	mu     sync.Mutex</div><div class="line">	addrCh <span class="keyword">chan</span> []Address <span class="comment">// 服务地址列表更新通知channel</span></div><div class="line">	next   <span class="keyword">int</span>            <span class="comment">// index of the next address to return for Get()</span></div><div class="line">	waitCh <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;  <span class="comment">// the channel to block when there is no connected address available</span></div><div class="line">	done   <span class="keyword">bool</span>           <span class="comment">// The Balancer is closed.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rr *roundRobin)</span> <span class="title">Start</span><span class="params">(target <span class="keyword">string</span>, config BalancerConfig)</span> <span class="title">error</span></span> &#123;</div><div class="line">	rr.mu.Lock()</div><div class="line">	<span class="keyword">defer</span> rr.mu.Unlock()</div><div class="line">	<span class="keyword">if</span> rr.done &#123;</div><div class="line">		<span class="keyword">return</span> ErrClientConnClosing</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> rr.r == <span class="literal">nil</span> &#123;</div><div class="line">    <span class="comment">// 如果没有使用名称解析服务, 将不会进行名称解析, 在这种情况下target将会作为唯一可用的地址被放入</span></div><div class="line">    <span class="comment">// rr.addrs 被客户端使用, 此时addrCh将没有地址, 始终为nil</span></div><div class="line">		rr.addrs = <span class="built_in">append</span>(rr.addrs, &amp;addrInfo&#123;addr: Address&#123;Addr: target&#125;&#125;)</div><div class="line">		<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">	&#125;</div><div class="line">  <span class="comment">// 如果名称解析服务存在将会调用名称解析服务的Resolve方法, 生成一个watcher</span></div><div class="line">	w, err := rr.r.Resolve(target)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> err</div><div class="line">	&#125;</div><div class="line">	rr.w = w</div><div class="line">	rr.addrCh = <span class="built_in">make</span>(<span class="keyword">chan</span> []Address)</div><div class="line">  <span class="comment">// 启一个Goroutine来专门更新地址到addrCh</span></div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		<span class="keyword">for</span> &#123;</div><div class="line">			<span class="keyword">if</span> err := rr.watchAddrUpdates(); err != <span class="literal">nil</span> &#123;</div><div class="line">				<span class="keyword">return</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;()</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rr *roundRobin)</span> <span class="title">watchAddrUpdates</span><span class="params">()</span> <span class="title">error</span></span> &#123;</div><div class="line">  <span class="comment">// 获取需要更新的地址</span></div><div class="line">	updates, err := rr.w.Next()</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		grpclog.Printf(<span class="string">"grpc: the naming watcher stops working due to %v.\n"</span>, err)</div><div class="line">		<span class="keyword">return</span> err</div><div class="line">	&#125;</div><div class="line">	rr.mu.Lock()</div><div class="line">	<span class="keyword">defer</span> rr.mu.Unlock()</div><div class="line">	<span class="keyword">for</span> _, update := <span class="keyword">range</span> updates &#123;</div><div class="line">		addr := Address&#123;</div><div class="line">			Addr:     update.Addr,</div><div class="line">			Metadata: update.Metadata,</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">switch</span> update.Op &#123;</div><div class="line">    <span class="comment">// 如果地址没有重复, 则添加到地址列表中去(rr.addrs)</span></div><div class="line">		<span class="keyword">case</span> naming.Add:</div><div class="line">			<span class="keyword">var</span> exist <span class="keyword">bool</span></div><div class="line">			<span class="keyword">for</span> _, v := <span class="keyword">range</span> rr.addrs &#123;</div><div class="line">				<span class="keyword">if</span> addr == v.addr &#123;</div><div class="line">					exist = <span class="literal">true</span></div><div class="line">					grpclog.Println(<span class="string">"grpc: The name resolver wanted to add an existing address: "</span>, addr)</div><div class="line">					<span class="keyword">break</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> exist &#123;</div><div class="line">				<span class="keyword">continue</span></div><div class="line">			&#125;</div><div class="line">			rr.addrs = <span class="built_in">append</span>(rr.addrs, &amp;addrInfo&#123;addr: addr&#125;)</div><div class="line">    <span class="comment">// 从地址列表中(rr.addrs)移除已经存在的地址</span></div><div class="line">		<span class="keyword">case</span> naming.Delete:</div><div class="line">			<span class="keyword">for</span> i, v := <span class="keyword">range</span> rr.addrs &#123;</div><div class="line">				<span class="keyword">if</span> addr == v.addr &#123;</div><div class="line">					<span class="built_in">copy</span>(rr.addrs[i:], rr.addrs[i+<span class="number">1</span>:])</div><div class="line">					rr.addrs = rr.addrs[:<span class="built_in">len</span>(rr.addrs)<span class="number">-1</span>]</div><div class="line">					<span class="keyword">break</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			grpclog.Println(<span class="string">"Unknown update.Op "</span>, update.Op)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// Make a copy of rr.addrs and write it onto rr.addrCh so that gRPC internals gets notified.</span></div><div class="line">	open := <span class="built_in">make</span>([]Address, <span class="built_in">len</span>(rr.addrs))</div><div class="line">	<span class="keyword">for</span> i, v := <span class="keyword">range</span> rr.addrs &#123;</div><div class="line">		open[i] = v.addr</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> rr.done &#123;</div><div class="line">		<span class="keyword">return</span> ErrClientConnClosing</div><div class="line">	&#125;</div><div class="line">	rr.addrCh &lt;- open</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 直接返回地址变更的channel(注意地址不是增量是全量)</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rr *roundRobin)</span> <span class="title">Notify</span><span class="params">()</span> &lt;-<span class="title">chan</span> []<span class="title">Address</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> rr.addrCh</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>根据gRPC官方提供的设计思路，基于进程内LB方案(即第2个案，阿里开源的服务框架 Dubbo 也是采用类似机制)，结合分布式一致的组件（如Zookeeper、Consul、Etcd），可找到gRPC服务发现和负载均衡的可行解决方案。<br>根据官方已经实现Round Robin负载均衡器, 我们可以通过实现一个名字服务器的接口，然后封装到这个负载均衡器中，这样就不需要自己实现整个负载均衡器。<br>接下来我们结合etcdv3实现一个名词解析服务, 完整示例代理: <a href="https://github.com/yumaojun03/golang/tree/master/grpc" target="_blank" rel="external">gRPC LB示例代码</a></p>
<h3 id="实现名称解析服务"><a href="#实现名称解析服务" class="headerlink" title="实现名称解析服务"></a>实现名称解析服务</h3><ul>
<li>首先定义一个resolver, resolver要求返回一个实现了watcher接口的对象, 而watcher需要有服务名称和etcd客户端才能解析出真正的服务地址: resolver.go</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">package lb</div><div class="line"></div><div class="line">import (</div><div class="line">    "errors"</div><div class="line">    "fmt</div><div class="line">    "strings"</div><div class="line"></div><div class="line">    etcd3 "github.com/coreos/etcd/clientv3"</div><div class="line">    "google.golang.org/grpc/naming"</div><div class="line">)</div><div class="line"></div><div class="line">// resolver is the implementaion of grpc.naming.Resolver</div><div class="line">type resolver struct &#123;</div><div class="line">    serviceName string // service name to resolve</div><div class="line">&#125;</div><div class="line"></div><div class="line">// NewResolver return resolver with service name</div><div class="line">func NewResolver(serviceName string) *resolver &#123;</div><div class="line">    return &amp;resolver&#123;serviceName: serviceName&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Resolve to resolve the service from etcd, target is the dial address of etcd</div><div class="line">// target example: "http://127.0.0.1:2379,http://127.0.0.1:12379,http://127.0.0.1:22379"</div><div class="line">func (re *resolver) Resolve(target string) (naming.Watcher, error) &#123;</div><div class="line">    if re.serviceName == "" &#123;</div><div class="line">        return nil, errors.New("grpclb: no service name provided")</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // generate etcd client</div><div class="line">    client, err := etcd3.New(etcd3.Config&#123;</div><div class="line">        Endpoints: strings.Split(target, ","),</div><div class="line">    &#125;)</div><div class="line">    if err != nil &#123;</div><div class="line">        return nil, fmt.Errorf("grpclb: creat etcd3 client failed: %s", err.Error())</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Return watcher</div><div class="line">    return &amp;watcher&#123;re: re, client: *client&#125;, nil</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>watcher持有服务名称和etcd客户端,仅需要调用etcd客户端查出该服务的地址列表即可, 接下来我们利用etcd实现一个watcher(实现Next和Colse方法): watcher.go<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> lb</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    etcd3 <span class="string">"github.com/coreos/etcd/clientv3"</span></div><div class="line">    <span class="string">"golang.org/x/net/context"</span></div><div class="line">    <span class="string">"google.golang.org/grpc/naming"</span></div><div class="line">    <span class="string">"github.com/coreos/etcd/mvcc/mvccpb"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// watcher is the implementaion of grpc.naming.Watcher</span></div><div class="line"><span class="keyword">type</span> watcher <span class="keyword">struct</span> &#123;</div><div class="line">    re            *resolver <span class="comment">// re: Etcd Resolver</span></div><div class="line">    client        etcd3.Client</div><div class="line">    isInitialized <span class="keyword">bool</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Close do nothing</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *watcher)</span> <span class="title">Close</span><span class="params">()</span></span> &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Next to return the updates</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *watcher)</span> <span class="title">Next</span><span class="params">()</span> <span class="params">([]*naming.Update, error)</span></span> &#123;</div><div class="line">    <span class="comment">// prefix is the etcd prefix/value to watch</span></div><div class="line">    prefix := fmt.Sprintf(<span class="string">"/%s/%s/"</span>, Prefix, w.re.serviceName)</div><div class="line"></div><div class="line">    <span class="comment">// check if is initialized</span></div><div class="line">    <span class="comment">// 第一次及初始化时需要返回一个全量的地址用于更新</span></div><div class="line">    <span class="keyword">if</span> !w.isInitialized &#123;</div><div class="line">        <span class="comment">// query addresses from etcd</span></div><div class="line">        resp, err := w.client.Get(context.Background(), prefix, etcd3.WithPrefix())</div><div class="line">        w.isInitialized = <span class="literal">true</span></div><div class="line">        <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</div><div class="line">            addrs := extractAddrs(resp)</div><div class="line">            <span class="comment">//if not empty, return the updates or watcher new dir</span></div><div class="line">            <span class="keyword">if</span> l := <span class="built_in">len</span>(addrs); l != <span class="number">0</span> &#123;</div><div class="line">                updates := <span class="built_in">make</span>([]*naming.Update, l)</div><div class="line">                <span class="keyword">for</span> i := <span class="keyword">range</span> addrs &#123;</div><div class="line">                    updates[i] = &amp;naming.Update&#123;Op: naming.Add, Addr: addrs[i]&#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> updates, <span class="literal">nil</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// generate etcd Watcher</span></div><div class="line">    <span class="comment">// 初始化后 监听变量即可</span></div><div class="line">    rch := w.client.Watch(context.Background(), prefix, etcd3.WithPrefix())</div><div class="line">    <span class="keyword">for</span> wresp := <span class="keyword">range</span> rch &#123;</div><div class="line">        <span class="keyword">for</span> _, ev := <span class="keyword">range</span> wresp.Events &#123;</div><div class="line">            <span class="keyword">switch</span> ev.Type &#123;</div><div class="line">            <span class="keyword">case</span> mvccpb.PUT:</div><div class="line">                <span class="keyword">return</span> []*naming.Update&#123;&#123;Op: naming.Add, Addr: <span class="keyword">string</span>(ev.Kv.Value)&#125;&#125;, <span class="literal">nil</span></div><div class="line">            <span class="keyword">case</span> mvccpb.DELETE:</div><div class="line">                <span class="keyword">return</span> []*naming.Update&#123;&#123;Op: naming.Delete, Addr: <span class="keyword">string</span>(ev.Kv.Value)&#125;&#125;, <span class="literal">nil</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">extractAddrs</span><span class="params">(resp *etcd3.GetResponse)</span> []<span class="title">string</span></span> &#123;</div><div class="line">    addrs := []<span class="keyword">string</span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> resp == <span class="literal">nil</span> || resp.Kvs == <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">return</span> addrs</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> resp.Kvs &#123;</div><div class="line">        <span class="keyword">if</span> v := resp.Kvs[i].Value; v != <span class="literal">nil</span> &#123;</div><div class="line">            addrs = <span class="built_in">append</span>(addrs, <span class="keyword">string</span>(v))</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> addrs</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="实现服务的注册"><a href="#实现服务的注册" class="headerlink" title="实现服务的注册"></a>实现服务的注册</h3><p>名称解析做完了, 需要服务将地址注册到etcd相应的地址下<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> lb</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"strings"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line"></div><div class="line">	etcd3 <span class="string">"github.com/coreos/etcd/clientv3"</span></div><div class="line">	<span class="string">"github.com/coreos/etcd/etcdserver/api/v3rpc/rpctypes"</span></div><div class="line">	<span class="string">"golang.org/x/net/context"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// Prefix should start and end with no slash</span></div><div class="line"><span class="keyword">var</span> Prefix = <span class="string">"etcd3_naming"</span></div><div class="line"><span class="keyword">var</span> client etcd3.Client</div><div class="line"><span class="keyword">var</span> serviceKey <span class="keyword">string</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> stopSignal = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment">// Register</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Register</span><span class="params">(name <span class="keyword">string</span>, host <span class="keyword">string</span>, port <span class="keyword">int</span>, target <span class="keyword">string</span>, interval time.Duration, ttl <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</div><div class="line">	serviceValue := fmt.Sprintf(<span class="string">"%s:%d"</span>, host, port)</div><div class="line">	serviceKey = fmt.Sprintf(<span class="string">"/%s/%s/%s"</span>, Prefix, name, serviceValue)</div><div class="line"></div><div class="line">	<span class="comment">// get endpoints for register dial address</span></div><div class="line">	<span class="keyword">var</span> err error</div><div class="line">	client, err := etcd3.New(etcd3.Config&#123;</div><div class="line">		Endpoints: strings.Split(target, <span class="string">","</span>),</div><div class="line">	&#125;)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> fmt.Errorf(<span class="string">"grpclb: create etcd3 client failed: %v"</span>, err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		<span class="comment">// invoke self-register with ticker</span></div><div class="line">		ticker := time.NewTicker(interval)</div><div class="line">		<span class="keyword">for</span> &#123;</div><div class="line">			<span class="comment">// minimum lease TTL is ttl-second</span></div><div class="line">			resp, _ := client.Grant(context.TODO(), <span class="keyword">int64</span>(ttl))</div><div class="line">			<span class="comment">// 如果第一次注册该key将不存在, 需要建立key, 如果不是第一次注册, 则刷新该key的值</span></div><div class="line">			_, err := client.Get(context.Background(), serviceKey)</div><div class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">				<span class="keyword">if</span> err == rpctypes.ErrKeyNotFound &#123;</div><div class="line">					<span class="keyword">if</span> _, err := client.Put(context.TODO(), serviceKey, serviceValue, etcd3.WithLease(resp.ID)); err != <span class="literal">nil</span> &#123;</div><div class="line">						log.Printf(<span class="string">"grpclb: set service '%s' with ttl to etcd3 failed: %s"</span>, name, err.Error())</div><div class="line">					&#125;</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					log.Printf(<span class="string">"grpclb: service '%s' connect to etcd3 failed: %s"</span>, name, err.Error())</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="comment">// refresh set to true for not notifying the watcher</span></div><div class="line">				<span class="keyword">if</span> _, err := client.Put(context.Background(), serviceKey, serviceValue, etcd3.WithLease(resp.ID)); err != <span class="literal">nil</span> &#123;</div><div class="line">					log.Printf(<span class="string">"grpclb: refresh service '%s' with ttl to etcd3 failed: %s"</span>, name, err.Error())</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">select</span> &#123;</div><div class="line">			<span class="keyword">case</span> &lt;-stopSignal:</div><div class="line">				<span class="keyword">return</span></div><div class="line">			<span class="keyword">case</span> &lt;-ticker.C:</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;()</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// UnRegister delete registered service from etcd</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">UnRegister</span><span class="params">()</span> <span class="title">error</span></span> &#123;</div><div class="line">	stopSignal &lt;- <span class="literal">true</span></div><div class="line">	stopSignal = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">1</span>) <span class="comment">// just a hack to avoid multi UnRegister deadlock</span></div><div class="line">	<span class="keyword">var</span> err error</div><div class="line">	<span class="keyword">if</span> _, err := client.Delete(context.Background(), serviceKey); err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Printf(<span class="string">"grpclb: deregister '%s' failed: %s"</span>, serviceKey, err.Error())</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		log.Printf(<span class="string">"grpclb: deregister '%s' ok."</span>, serviceKey)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> err</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="实现服务端和客户端"><a href="#实现服务端和客户端" class="headerlink" title="实现服务端和客户端"></a>实现服务端和客户端</h3><ul>
<li><p>定义服务接口契约: hello.proto</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">syntax = &quot;proto3&quot;;</div><div class="line"></div><div class="line">option java_multiple_files = true;</div><div class="line">option java_package = &quot;com.midea.jr.test.grpc&quot;;</div><div class="line">option java_outer_classname = &quot;HelloWorldProto&quot;;</div><div class="line">option objc_class_prefix = &quot;HLW&quot;;</div><div class="line"></div><div class="line">package helloworld;</div><div class="line"></div><div class="line">// The greeting service definition.</div><div class="line">service Greeter &#123;</div><div class="line">    //   Sends a greeting</div><div class="line">    rpc SayHello (HelloRequest) returns (HelloReply) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// The request message containing the user&apos;s name.</div><div class="line">message HelloRequest &#123;</div><div class="line">    string name = 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// The response message containing the greetings</div><div class="line">message HelloReply &#123;</div><div class="line">    string message = 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>服务端启动时需要注册</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"flag"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"net"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"os/signal"</span></div><div class="line">	<span class="string">"syscall"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line"></div><div class="line">	<span class="string">"golang.org/x/net/context"</span></div><div class="line">	<span class="string">"google.golang.org/grpc"</span></div><div class="line"></div><div class="line">	pb <span class="string">"golang/grpc/example/pb"</span></div><div class="line">	grpclb <span class="string">"golang/grpc/lb"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> (</div><div class="line">	serv = flag.String(<span class="string">"service"</span>, <span class="string">"hello_service"</span>, <span class="string">"service name"</span>)</div><div class="line">	port = flag.Int(<span class="string">"port"</span>, <span class="number">50001</span>, <span class="string">"listening port"</span>)</div><div class="line">	reg  = flag.String(<span class="string">"reg"</span>, <span class="string">"http://192.168.204.7:2379"</span>, <span class="string">"register etcd address"</span>)</div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	flag.Parse()</div><div class="line"></div><div class="line">	lis, err := net.Listen(<span class="string">"tcp"</span>, fmt.Sprintf(<span class="string">"0.0.0.0:%d"</span>, *port))</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	err = grpclb.Register(*serv, <span class="string">"127.0.0.1"</span>, *port, *reg, time.Second*<span class="number">10</span>, <span class="number">15</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</div><div class="line">	signal.Notify(ch, syscall.SIGTERM, syscall.SIGINT, syscall.SIGKILL, syscall.SIGHUP, syscall.SIGQUIT)</div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		s := &lt;-ch</div><div class="line">		log.Printf(<span class="string">"receive signal '%v'"</span>, s)</div><div class="line">		grpclb.UnRegister()</div><div class="line">		os.Exit(<span class="number">1</span>)</div><div class="line">	&#125;()</div><div class="line"></div><div class="line">	log.Printf(<span class="string">"starting hello service at %d"</span>, *port)</div><div class="line">	s := grpc.NewServer()</div><div class="line">	pb.RegisterGreeterServer(s, &amp;server&#123;&#125;)</div><div class="line">	s.Serve(lis)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// server is used to implement helloworld.GreeterServer.</span></div><div class="line"><span class="keyword">type</span> server <span class="keyword">struct</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// SayHello implements helloworld.GreeterServer</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *server)</span> <span class="title">SayHello</span><span class="params">(ctx context.Context, in *pb.HelloRequest)</span> <span class="params">(*pb.HelloReply, error)</span></span> &#123;</div><div class="line">	fmt.Printf(<span class="string">"%v: Receive is %s\n"</span>, time.Now(), in.Name)</div><div class="line">	<span class="keyword">return</span> &amp;pb.HelloReply&#123;Message: <span class="string">"Hello "</span> + in.Name&#125;, <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>客户端使用round robin负载均衡器</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"flag"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line"></div><div class="line">	pb <span class="string">"golang/grpc/example/pb"</span></div><div class="line">	grpclb <span class="string">"golang/grpc/lb"</span></div><div class="line">	<span class="string">"strconv"</span></div><div class="line"></div><div class="line">	<span class="string">"golang.org/x/net/context"</span></div><div class="line">	<span class="string">"google.golang.org/grpc"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> (</div><div class="line">	serv = flag.String(<span class="string">"service"</span>, <span class="string">"hello_service"</span>, <span class="string">"service name"</span>)</div><div class="line">	reg  = flag.String(<span class="string">"reg"</span>, <span class="string">"http://192.168.204.7:2379"</span>, <span class="string">"register etcd address"</span>)</div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	flag.Parse()</div><div class="line">	r := grpclb.NewResolver(*serv)</div><div class="line">	b := grpc.RoundRobin(r)</div><div class="line"></div><div class="line">	ctx, _ := context.WithTimeout(context.Background(), <span class="number">10</span>*time.Second)</div><div class="line">	conn, err := grpc.DialContext(ctx, *reg, grpc.WithInsecure(), grpc.WithBalancer(b))</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	ticker := time.NewTicker(<span class="number">1</span> * time.Second)</div><div class="line">	<span class="keyword">for</span> t := <span class="keyword">range</span> ticker.C &#123;</div><div class="line">		client := pb.NewGreeterClient(conn)</div><div class="line">		resp, err := client.SayHello(context.Background(), &amp;pb.HelloRequest&#123;Name: <span class="string">"world "</span> + strconv.Itoa(t.Second())&#125;)</div><div class="line">		<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</div><div class="line">			fmt.Printf(<span class="string">"%v: Reply is %s\n"</span>, t, resp.Message)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动3个服务端<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$go</span> run main.go -port 50001</div><div class="line">2017/08/05 10:57:20 starting hello service at 50001</div><div class="line">2017-08-05 11:02:00.81258994 +0800 CST: Receive is world 0</div><div class="line">2017-08-05 11:02:03.812191776 +0800 CST: Receive is world 3</div><div class="line">2017-08-05 11:02:06.812970792 +0800 CST: Receive is world 6</div><div class="line">2017-08-05 11:02:09.809401404 +0800 CST: Receive is world 9</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$go</span> run main.go -port 50002</div><div class="line">2017/08/05 10:58:13 starting hello service at 50002</div><div class="line">2017-08-05 11:02:01.812108579 +0800 CST: Receive is world 1</div><div class="line">2017-08-05 11:02:04.811493797 +0800 CST: Receive is world 4</div><div class="line">2017-08-05 11:02:07.808267481 +0800 CST: Receive is world 7</div><div class="line">2017-08-05 11:02:10.808644591 +0800 CST: Receive is world 10</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$go</span> run main.go -port 50003</div><div class="line">2017/08/05 10:58:42 starting hello service at 50003</div><div class="line">2017-08-05 11:02:02.811818858 +0800 CST: Receive is world 2</div><div class="line">2017-08-05 11:02:05.812063511 +0800 CST: Receive is world 5</div><div class="line">2017-08-05 11:02:08.812688805 +0800 CST: Receive is world 8</div><div class="line">2017-08-05 11:02:11.811770723 +0800 CST: Receive is world 11</div></pre></td></tr></table></figure>
<p>启动客户端<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="variable">$go</span> run main.go</div><div class="line">2017-08-05 11:02:00.812164403 +0800 CST: Reply is Hello world 0</div><div class="line">2017-08-05 11:02:01.811569222 +0800 CST: Reply is Hello world 1</div><div class="line">2017-08-05 11:02:02.811516841 +0800 CST: Reply is Hello world 2</div><div class="line">2017-08-05 11:02:03.811806037 +0800 CST: Reply is Hello world 3</div><div class="line">2017-08-05 11:02:04.811077475 +0800 CST: Reply is Hello world 4</div><div class="line">2017-08-05 11:02:05.811687449 +0800 CST: Reply is Hello world 5</div><div class="line">2017-08-05 11:02:06.812519507 +0800 CST: Reply is Hello world 6</div><div class="line">2017-08-05 11:02:07.807912824 +0800 CST: Reply is Hello world 7</div><div class="line">2017-08-05 11:02:08.812355134 +0800 CST: Reply is Hello world 8</div><div class="line">2017-08-05 11:02:09.809015778 +0800 CST: Reply is Hello world 9</div><div class="line">2017-08-05 11:02:10.808287335 +0800 CST: Reply is Hello world 10</div><div class="line">2017-08-05 11:02:11.81142561 +0800 CST: Reply is Hello world 11</div></pre></td></tr></table></figure></p>
<p>最后我们看看etcd里面我们注册的服务:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root@etcd-node01:~<span class="comment"># etcdctl get --prefix  --endpoints=192.168.204.7:2379 "/etcd3_naming"</span></div><div class="line">/etcd3_naming/hello_service/127.0.0.1:50001</div><div class="line">127.0.0.1:50001</div><div class="line">/etcd3_naming/hello_service/127.0.0.1:50002</div><div class="line">127.0.0.1:50002</div><div class="line">/etcd3_naming/hello_service/127.0.0.1:50003</div><div class="line">127.0.0.1:50003</div></pre></td></tr></table></figure></p>
<p>剩下了停掉一些服务,客户端是否正常就你们自己测试了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;API网关需要实现服务的自动发现和负载均衡, 由于后面的服务基本都采用gRPC实现, 因此需要验证gRPC如何实现这2个功能。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="gRPC" scheme="https://blog.yumaojun.net/tags/gRPC/"/>
    
      <category term="APIGateway" scheme="https://blog.yumaojun.net/tags/APIGateway/"/>
    
  </entry>
  
  <entry>
    <title>微服务之API Gateway</title>
    <link href="https://blog.yumaojun.net/2017/08/01/api-gateway/"/>
    <id>https://blog.yumaojun.net/2017/08/01/api-gateway/</id>
    <published>2017-08-01T02:01:45.000Z</published>
    <updated>2017-08-08T03:17:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>微服务架构中那些单体微服务关注与自身领域, 而APIGateway关注服务全貌, 所以他是一个统筹者, 很多全局都需要的功能需要在APIGateway处进行实现, 这篇文章是设计一个API Gateway的概述, 讲述API网关的需求、价值、以及设计要求。<br><a id="more"></a></p>
<h2 id="SOA设计方法"><a href="#SOA设计方法" class="headerlink" title="SOA设计方法"></a>SOA设计方法</h2><p>SOA是一种架构的设计方法, 全称是Service-Oriented Architecture(面向服务的架构)，它将应用程序的不同功能单元拆解成独立的服务, 多个服务直接通过良好的接口和契约联系起来,采用网络进行通信。</p>
<p>SOA可以让软件架构达到松耦合, 可以用来应对臃肿的单体应用, 比如多个终端用户应用程序可以共享同一个服务, 它的目标是在不影响其他任何人的情况下透明地替换一个服务,只要替换之后的服务的外部接口没有太大的变化即可。这种性质能够大大简化软件维护甚至是软件重写的过程。</p>
<p>仅仅达到松耦合是不够的, 松耦合会带来复杂性问题, 因此同时也需要高内聚, API网关就是用来做这个的, 因此<code>对外</code>采用高内聚的表现形式来降低复杂性, <code>对内</code>采用松耦合的实现方式来应对快速变化的需求。</p>
<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>API网关的流行，源于近几年来，移动应用与企业间互联需求的兴起。移动应用、企业互联，使得后台服务支持的对象，从以前单一的Web应用，扩展到多种使用场景，且每种使用场景对后台服务的要求都不尽相同。这不仅增加了后台服务的响应量，还增加了后台服务的复杂性。随着微服务架构概念的提出，API网关成为了微服务架构的一个标配组件。</p>
<p>它用于处理很多通用的问题, 比如访问认证、报文转换、访问统计、服务发现、限流等等。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>王延炯在<a href="https://mp.weixin.qq.com/s?__biz=MzI5MDEzMzg5Nw==&amp;mid=2660393016&amp;idx=1&amp;sn=78596df454773ebfcbcdb62b56d5b6f1&amp;scene=21#wechat_redirect" target="_blank" rel="external">谈API网关的背景、架构以及落地方案</a>有如下5种场景介绍:</p>
<ul>
<li>面向Web App的网关<br>这类场景，在物理形态上类似前后端分离，此时的Web App已经不是全功能的Web App，而是根据场景定制、场景化的App。</li>
<li>面向MobileApp的网关<br>这类场景，移动App是后端Service的使用者，此时的APIGW还需要承担一部分MDM（此处是指移动设备管理，不是主数据管理）的职能。</li>
<li>面向PartnerOpenAPI的网关<br>这类场景，主要为了满足业务形态对外开放，与企业外部合作伙伴建立生态圈，此时的API GW需要增加配额、流控、令牌等一系列安全管控功能。</li>
<li>面向PartnerExternalAPI的网关<br>这类场景，主要是为了满足企业自身业务的需要，实现对企业自有业务的映射。一个典型的例子就是使用「合作方账号登录」、「使用第三方支付平台支付」等等。此时的APIGW就需要在边界上，为企业内部Service 统一调用外部的API做统一的认证、授权、以及访问控制。</li>
<li>面向IoTSmartDevice的网关<br>这类场景主要在传统企业，尤其是工业企业，传感器、物理设备从工业控制协议向IP转换，导致物理链路上会存在一部分公网链路。此时的API GW所需要满足的「内外兼修」的双向数据流，设备一般通过一个「客户侧」的集中网关在和企业的接入网关进行通信。</li>
</ul>
<p>在我们讲的微服务架构下的API网关，一般指的是前两种使用场景。即，主要是把企业内部的API能力，暴露给其他应用或合作伙伴使用。</p>
<h2 id="网关的价值"><a href="#网关的价值" class="headerlink" title="网关的价值"></a>网关的价值</h2><p>网关层作为客户端与服务端的一层挡板，主要起到了三大类作用:</p>
<ul>
<li>内外隔离: 强调安全性, 企业系统的边界,隔离外网环境和内网环境。</li>
<li>服务解耦: 有了网关和服务层的解耦, 使得微服务系统的各方能够独立、自由、高效、灵活地调整，而不用担心给其他方面带来影响, 便于各个团队工作的独立性。</li>
<li>辅助功能: 提供了一个地点，方便通过扩展机制对请求进行一系列加工和处理。</li>
</ul>
<h3 id="内外隔离"><a href="#内外隔离" class="headerlink" title="内外隔离"></a>内外隔离</h3><p><img src="http://oiw1gzfww.bkt.clouddn.com/api-gateway-securety.png" alt="内外隔离"><br>企业为了保护内部系统的安全性，内网与外网都是隔离的，企业的服务应用都是运行在内网环境中，为了安全的考量，一般都不允许外部直接访问。API网关部署在防火墙外面，起到一层挡板作用，内部系统只接受API网关转发过来的请求。网关通过白名单或校验规则，对访问进行了初步的过滤。相比防火墙，这种软件实现的过滤规则，更加动态灵活。<br>在安全的角度而言, 此时网关充当着应用防火墙的作用(WAF)。</p>
<h3 id="服务解耦"><a href="#服务解耦" class="headerlink" title="服务解耦"></a>服务解耦</h3><p>在微服务架构下，整个环境包括服务的提供者、服务的消费者、服务运维人员、安全管理人员等，每个角色的职责和述求都不同。例如：服务消费者已经需要提出一些新的服务需求，以快速应对业务变化；服务提供者，作为业务服务的沉淀方，希望保持服务的通用性与稳定性，很难应对快速的变化。有了API网关这一层，可以很好的解耦各方的相互依赖关系，让各方更加专注自己的目标。</p>
<ul>
<li>解耦功能与非功能<br>企业在把服务提供给外部访问时，除了实现业务逻辑功能外，还面临许多非功能性的要求。例如：需要防范黑客攻击，需要应对突发的访问量、需要确认用户的权限，需要对访问进行监控等。这些非功能逻辑，不能与业务逻辑的开发混在一起，需要有专业的人员甚至专业的团队来处理。</li>
<li>解耦客户端与服务提供者<br>客户端与服务提供者分属于不同的团队，工作性质要求也不相同。对于服务提供者来说，他主要的职责是对业务进行抽象，提供可复用的业务功能，他们需要对业务模型进行深入的思考和沉淀，不能轻易为了响应外部的需求而破坏业务模型的稳定性。而业务的快速变化，又要求企业快速提供接口来满足客户端需求。这就需要一个中间层，来对服务层的接口进行封装，以及时响应客户端的需求。<br>通过解耦，服务层可以使用统一的接口、协议和报文格式来暴露服务，而不必考虑客户端的多种形态。<br>那么 网关层是否需要实现服务的编排？<br>在介绍API网关的一些文章中，提到了网关层的服务编排能力。从解耦的角度出发，服务的编排不适合在网关层进行。对服务的编排，其实是提供了一种业务能力，如果把服务的编排放在了网关层，实际上是把一部分业务能力放在了网关层，这样一来，服务层、网关层都有一些业务能力，造成团队职责的不清，也不利于业务能力的沉淀。</li>
</ul>
<h3 id="辅助功能"><a href="#辅助功能" class="headerlink" title="辅助功能"></a>辅助功能</h3><p>网关层除了请求的路由、转发外，还需要负责安全、鉴权、限流、监控等。这些功能的实现方式，往往随着业务的变化不断调整。例如权限控制方面，早期可能只需要简单的用户+密码方式，后续用户量大了后，可能会使用高性能的第三方解决方案。又例如，针对不同的监控方案，需要记录不同的日志文件。<br>所以，这些能力不能一开始就固化在网关平台上，而应该是一种可配置的方式，便于修改和替换。这就要求网关层提供一套机制，可以很好地支持这种动态扩展。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>有了API网关后, 会有以下优点</p>
<ul>
<li>网关层对外部和内部进行了隔离，保障了后台服务的安全性。</li>
<li>对外访问控制由网络层面转换成了运维层面，减少变更的流程和错误成本</li>
<li>减少客户端与服务的耦合，服务可以独立发展。通过网关层来做映射。</li>
<li>通过网关层聚合，减少外部访问的频次，提升访问效率。</li>
<li>节约后端服务开发成本，减少上线风险。</li>
<li>为服务熔断，灰度发布，线上测试提供简单方案。</li>
<li>便于扩展。</li>
</ul>
<h2 id="设计要求"><a href="#设计要求" class="headerlink" title="设计要求"></a>设计要求</h2><p>那么API网关在设计时需要考虑到那些点喃？</p>
<h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><p>网关作为应用访问的唯一入口, 所有的请求都会经过API网关进行转发, 可想而知, 对API网关的访问压力是巨大的。因此API网关对性能要求比较高, 性能上至少不能比nginx弱太多, 因此业内使用nginx + lua的比较多。</p>
<h3 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h3><p>API网关作为逻辑上的单点，一旦发生问题，将造成所有服务的不可用，对企业来说可能造成的致命的影响。计算短时间的不可用，也会给企业带来直接的经济损失。所以，如何保证API网关的7*24小时的稳定运行, 因此 网关在实现时一定要考虑横向扩展和API热更新的能力, 避免API网关宕机。</p>
<h3 id="高扩展"><a href="#高扩展" class="headerlink" title="高扩展"></a>高扩展</h3><p>前面说到, 一些非业务功能的需求需要网关提供, 比如: 例如日志、安全、负载均衡策略、鉴权等, 这就需要网关层提供这样一种机制，使得可以灵活地进行这些调整和变化，而不用频繁对网关层进行改动，确保网关层的稳定性。比如nginx采用模块来进行扩展, 并且支持模块的动态加载。</p>
<h3 id="高运维"><a href="#高运维" class="headerlink" title="高运维"></a>高运维</h3><p>API在上线、发布过程中，都需要涉及到网关层的配合，例如，需要网关层知道API发布的地址，API的接口形式、报文格式，也需要网关层对后台API进行封装。在API调整后，需要作出相应的修改。所以，API网关设计时，需要明确网关层与服务层的职责切分与协作模式，使得API的管理、发布更加高效。</p>
<h2 id="落地方案"><a href="#落地方案" class="headerlink" title="落地方案"></a>落地方案</h2><p>针对以上的需要, 如何设计一款还靠谱的API网关喃?</p>
<h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ul>
<li>高性能: 采用Golang来进行开发, 确保性能</li>
<li>高可用: 1. 网关层采用无状态设计, 将认证模块独立处理 2. 优雅下线, 采用go 的graceful做处理</li>
<li>高扩展: 采用http中间件的方式, 提供灵活的扩展能力</li>
</ul>
<h3 id="功能点"><a href="#功能点" class="headerlink" title="功能点"></a>功能点</h3><p>一个完整的API网关应该具有如下几方面的功能:</p>
<ul>
<li>服务发现, 负载均衡, 服务健康状态检查<br>API Gateway需要知道每一个微服务的IP和端口。在传统应用中，你可能会硬编码这些地址，但是在现在云基础的微服务应用中，这将是个简单的问题。基础服务通常会采用静态地址，可以采用操作系统环境变量来指定。但是，探测应用服务的地址就没那么容易了。应用服务通常动态分配地址和端口。同样的，由于扩展或者升级，服务的实例也会动态的改变。因此，API Gateway需要采用系统的服务发现机制，要么采用服务端发现，要么是客户端发现。如果采用客户端发现服务，API Gateway必须要去查询服务注册处，也就是微服务实例地址的数据库。<br>发现了多个微服务的实例过后, 需要采用负载均衡机制进行调度, 并且需要检查服务状态, 当服务离线时, 请求将不会调度到该节点。</li>
<li>熔断模式<br>也叫circuit break模式，它可以将客户端从无响应服务的无尽等待中停止。如果一个服务的错误率超过预设值，将中断服务，并且在一段时间内所有请求立刻失效。<br>具体可以参考: <a href="https://eacdy.gitbooks.io/spring-cloud-book/content/2%20Spring%20Cloud/2.4%20%E7%86%94%E6%96%AD%E5%99%A8.html" target="_blank" rel="external">熔断器</a></li>
<li>速率限制<br>无论如何 你后端的服务资源不可能无限动态扩展, 终有读, 为了保护后端服务不被击垮, 可以在网关层做访问速率的限制。</li>
<li>基于IP的访问控制<br>这个是WAF的基本功能, 避免DOS, 封锁某个IP的恶意访问。</li>
<li>协议转换<br>网关提供RESTful的HTTP的接口, 但是后端 可能提供服务的协议可能各不相同通, 比如gRPC, HTTP, MQ, 等。因此网关应该能适配多协议的支持。</li>
<li>请求路由<br>基于URL的路由功能</li>
<li>API使用统计<br>记录API Metric如请求次数、请求大小、响应状态和延迟，可视化API Metric</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.dreamfever.me/api-gateway/" target="_blank" rel="external">浅谈 API Gateway</a><br><a href="http://www.yantinglam.com/2016/12/15/Microservices-2016-12-15-API-Gateway-of-micro-service/" target="_blank" rel="external">微服务架构中的API Gateway</a><br><a href="http://dockone.io/article/482" target="_blank" rel="external">微服务实战（二）：使用API Gateway</a><br><a href="https://mp.weixin.qq.com/s/RuN5RfQfksQZRPACloqHEq" target="_blank" rel="external">企业级API网关的设计</a><br><a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/8258990?fr=aladdin&amp;fromid=5577988&amp;fromtitle=SOA%E6%9E%B6%E6%9E%84" target="_blank" rel="external">面向服务架构</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微服务架构中那些单体微服务关注与自身领域, 而APIGateway关注服务全貌, 所以他是一个统筹者, 很多全局都需要的功能需要在APIGateway处进行实现, 这篇文章是设计一个API Gateway的概述, 讲述API网关的需求、价值、以及设计要求。&lt;br&gt;
    
    </summary>
    
      <category term="微服务" scheme="https://blog.yumaojun.net/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="APIGateway" scheme="https://blog.yumaojun.net/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/APIGateway/"/>
    
    
      <category term="APIGateway" scheme="https://blog.yumaojun.net/tags/APIGateway/"/>
    
  </entry>
  
  <entry>
    <title>IOT架构</title>
    <link href="https://blog.yumaojun.net/2017/07/17/iot-architecture/"/>
    <id>https://blog.yumaojun.net/2017/07/17/iot-architecture/</id>
    <published>2017-07-17T08:58:05.000Z</published>
    <updated>2017-08-08T03:15:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近开发了一次IOT组件, 在此期间也参考了下其他IOT平台的设计架构, 有所感想, 因此将其记录下来, 和大家分享, 欢迎交流。<br><a id="more"></a></p>
<h2 id="IOT是什么"><a href="#IOT是什么" class="headerlink" title="IOT是什么"></a>IOT是什么</h2><p>IoT是Internet of Things的缩写, 它是互联网从人向物的延伸, 核心和基础仍然是互联网技术，是互联网技术基础上的延伸和扩展。 它将各种信息传感设备，如射频识别装置、红外感应器、全球定位系统、激光扫描器等种种装置, 按约定的协议, 将任何物品与互联网相连接, 达到物品之间进行信息交换和通讯的目的，以实现智能化识别、定位、追踪、监控和管理等。<br>IOT也将加速AI的觉醒, 它将万物互联, 再加上成熟的大数据处理, 深度学习的应用 会让万物都带有灵性, 这是多么宏大的一个时代, 2016被称为AI的元年, 随着IOT的加速, 我们将是这样一个时代的见证者,见证AI觉醒的第一代人。<br>下面是一张物联网在工业引用的一张图<br><img src="http://www.mr-wu.cn/wp-content/uploads/2015/12/The-internet-of-things.jpg" alt="应用场景"><br>这样看来未来很美好, 但是现实很残酷, 如何实现落地一套可靠的IOT方案任然是个难题, 在参考了一些国外的方案过后, 结合自己的实践, 给出了一种我认为的可落到的IOT方案架构。</p>
<h2 id="IOT的难点"><a href="#IOT的难点" class="headerlink" title="IOT的难点"></a>IOT的难点</h2><p>IOT在落地过程中有诸多难点, 国内很多IOT也是刚起步的状态, 能参考的就国外几家云的大厂商。</p>
<h3 id="涉及技术众多"><a href="#涉及技术众多" class="headerlink" title="涉及技术众多"></a>涉及技术众多</h3><p>IOT涉及到很多技术, 下面一张图 从几个维度展示了IOT涉及到的一些技术点:<br><img src="http://oiw1gzfww.bkt.clouddn.com/iot-tech.png" alt="技术体系"><br>从技术上看, 涉及众多技术, 因此对开发者有一定的要求, 招人是个问题。</p>
<h3 id="架构难设计"><a href="#架构难设计" class="headerlink" title="架构难设计"></a>架构难设计</h3><p>IOT面对的是万物, 在万物接入时需要考虑到 数据的安全, 链接的管理, 海量流数据上传, 海量数据的存储 管理 分析。综合来说 架构设计必须满足: 海量、通用、可扩展、简单 因此这是一套庞大灵活的系统, 而这样的系统 往往云厂商比较有经验, 比如Openstack的设计就是一个不错的架构。<br>整体而言IOT的架构应该属于微服务架构, 微服务架构的设计和开发 往往都是把双刃剑, 如果划不清服务的边界(领域划分)和规范不了服务交互的流程和方式, 那么这样的架构也是一个灾难, 最终造成 理不断剪还乱的一个局面。<br>下面是一张基础的IOT架构图, 能很好的描述IOT中核心的关键点:<br><img src="http://www.eeiot.com/Public/Upload/attached/image/20150529/20150529151253_23315.jpg" alt="基于MQTT的物联网架构"></p>
<h2 id="架构概述"><a href="#架构概述" class="headerlink" title="架构概述"></a>架构概述</h2><p>再复杂的事儿, 也需要抓住其核心点 才能有效展开。因此我们需要知道这个架构的精髓是啥, 在围绕那核心点。<br>参考上面那张架构图, 我们可以理解IOT的核心在完成这样几件事:</p>
<ul>
<li>连接设备</li>
<li>设备数据分析</li>
<li>设备数据运营与可视化</li>
</ul>
<p>核心之外是以下周边服务, 用于提升和扩展功能:</p>
<ul>
<li>功能平台: 比如消息通知, 提供对平台核心功能以外的一些补充。</li>
</ul>
<h2 id="架构详解"><a href="#架构详解" class="headerlink" title="架构详解"></a>架构详解</h2><p>在参考了AWS和Azure的IOT过后, 结合自己的认识,总结出来的IOT架构图。<br><img src="http://oiw1gzfww.bkt.clouddn.com/iot-define.png" alt="iot架构图"><br>按照领域对模块进行划分, 主要由几下几个模块组成:</p>
<ul>
<li>连接设备: <ul>
<li>本地: 负责设备数据的采集上报与反向控制。</li>
<li>云端: 将所有设备接入云，接收数据，同时负责管理这些设备的授权和限制 </li>
</ul>
</li>
<li>数据分析: 通过提供 离线计算或者在线计算的可编程接口 为用户提供数据分析的能力</li>
<li>数据可视化与运营: 采集上报的数据以及分析过后的数据的可视化, 数据标记, 数据授权等带业务性质的数据管理。</li>
<li>API网关: 负责请求的统一代理, 屏蔽掉内部系统的复杂性。</li>
<li>用户管理: 统一的用户体系 用于用户管理, 权限管理 </li>
</ul>
<h3 id="概念简介"><a href="#概念简介" class="headerlink" title="概念简介"></a>概念简介</h3><p>整个架构中 设计到如下一些概念:</p>
<ul>
<li>业务概念: 与数据相关, 用户自己定义的<ol>
<li>设备(device): 用户的需要接入互联网的实体设备</li>
</ol>
</li>
<li>系统概念: 与系统组件相关, 通过系统组件来接入的数据的组件<ol>
<li>代理(agent): 获取设备信息和控制设备的代理</li>
<li>设备网关代理(device-gateway-proxy): 代理device-gateway验证设备, 代理设备与云端通信</li>
<li>设备网关(device-gateway): 云端设备网关, 管理设备接入<br>整个系统对于不同角色的划分:</li>
<li>超级管理员: 具有系统已经数据的所有权限</li>
<li>设备管理员: 负责将设备加入系统, 查看设备的数据, 以及以设备为维度的数据权限分配</li>
<li>数据运营员: 负责点位数据的多维度管理(基础维度是设备), 以业务为维度的数据权限分配</li>
<li>算法管理员: 负责管理和运行相应维度的算法(基础维度是设备), 以及数据的查看权限</li>
<li>普通用户或者第三方开发者: 负责点位数据的多维度查看(基础维度是设备)</li>
</ol>
</li>
</ul>
<h3 id="设备连接"><a href="#设备连接" class="headerlink" title="设备连接"></a>设备连接</h3><p>设备的连接分为2部分云端和本地2部分构成, 由于云端和本地网络的差异, 需要考虑:</p>
<ul>
<li>网络的安全</li>
<li>网络的不稳定<br>为了方便本地设备与云端相连, 需要约定一个协议, 因此需要考虑:</li>
<li>通信协议的多适配: 比如MQTT, HTTP, CoAP等</li>
<li>数据格式定义<br>由于本地网络的复杂多变性, 我们可能需要面对不同的场景:</li>
<li>设备能直接联网上报数据</li>
<li>设备无法联网, 需要将数据发生给本地一个网关代理, 由网关代理统一上报数据<br>设备连接的一个架构示意图:<br><img src="http://oiw1gzfww.bkt.clouddn.com/local_agent_arch.png" alt="设备连接"></li>
</ul>
<h4 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h4><p>本地会负责设备数据的采集上报以及控制, 这些功能由一个agent负责完成, 它功能方向如下:</p>
<ul>
<li>数据采集与上报: 配置云端凭证, 按照约定协议上报设备数据。</li>
<li>接收云端控制: 向云端汇报控制指令, 接收云端发起的控制,以及返回执行结果。</li>
</ul>
<h5 id="设备代理-agent"><a href="#设备代理-agent" class="headerlink" title="设备代理(agent)"></a>设备代理(agent)</h5><p>设备代理负责收集设备的数据, 然后上报给云端网关, agent位于数据第一线, 需要考虑良好的扩展性, 因此适合采用 插件式 驱动开发模式。<br>采集器需要从云端获取证书, 配置云端设备编号, 然后按照指定的报文格式 将数据上报给云端。比如云端规范的数据上报格式,以influxDB的数据写入格式为例说明:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">measurement[,tag_key1=tag_value1...] field_key=field_value[,field_key2=field_value2] [timestamp]</div><div class="line"></div><div class="line">1. 一类设备一个库, 比如车, 比如飞机, 一个库里面存放所有这类设备的指标, 一组相关的指标一个组, 比如变速器, 齿轮箱, 算法计算的平均飞速</div><div class="line">2. 所有与数据无关的数据 均以标签的方式录入, 这些Tag分为2类: 1.系统标签: device-id, collector-id 2. 用户自定义标签</div></pre></td></tr></table></figure></p>
<p>agent核心功能点概述:</p>
<ul>
<li>数据采集与上报<ol>
<li>数据采集: 以插件的形式, 支持多协议适配,  默认情况下 只要数据符合规范 就可以上报</li>
<li>数据处理: 如何数据不符合规范, 需要编写 数据处理插件, 处理成合法规则</li>
<li>聚合数据: 如果数据量过大, 可以编写聚合插件, 对数据进行聚合, 比如针对设备震频数据。</li>
<li>数据上报: 经历所有以上步骤过后, 将数据通过设备的数据上报管道上报云端</li>
</ol>
</li>
<li>设备控制:<ol>
<li>控制指令上报: agent启动时需要将 已经实现的控制指令通过控制上传通道向云端汇报。</li>
<li>执行控制指令: agent订阅控制下发管道, 当有命令到来时, 立马执行, 并且将结果写回控制上传管道。</li>
</ol>
</li>
<li>异常处理:<ol>
<li>设备下线异常: 由于设备下线无法和设备建立连接, 无法采集数据(DeviceOffLineError), 通过控制上传通道上报</li>
<li>点位采集异常: 由于设备没有该点位, 无法获取到该点位数据(NoPointError), 通过控制上传通道上报</li>
</ol>
</li>
<li>agent控制:<ol>
<li>代理配置: 通过控制下发通道, 下发代理配置.</li>
<li>代理重启: 通过控制下发通道, 得知代理重新通知, 重启代理.</li>
<li>状态上报: 通过控制上传通道, 汇报代理状态</li>
</ol>
</li>
<li>agent异常:<ol>
<li>代理运行异常: 代理异常下线及时通知云端(AgentRuntimeError)</li>
</ol>
</li>
</ul>
<h5 id="网关代理-device-gateway-proxy"><a href="#网关代理-device-gateway-proxy" class="headerlink" title="网关代理(device-gateway-proxy)"></a>网关代理(device-gateway-proxy)</h5><p>网关代理主要运用于代理无法访问公网的场景(有火墙), 它在本地网络中扮演着云端网关的角色, 控制着所有设备的连接, 因为他是代理, 所有相关控制信息均从云端网关获取。<br>网关代理在设计时需要满足如下原则:</p>
<ul>
<li>透明性: 对于云端来说, 不能因为代理而带来设备处理的差异性, 因此代理主要功能是代理设备 与 云端通信, 对于云网关来说 看到的依然是设备,而不是代理。</li>
<li>缓存性: 代理需要面临网络中断,所以需要有数据缓存机制, 并且可以配置存储策略。<br>以下是gateway-proxy的核心功能概述:</li>
<li>数据上报:<ol>
<li>检查设备合法性: 网关代理能代理那些设备建立连接 需要从云端网关获取, 如果设备不合法, 则拒绝为该设备建立连接。</li>
<li>数据上报: 网关代理模拟agent与真正的网关建立连接, 通过设备数据上报通道上报数据到云端。 </li>
</ol>
</li>
<li>设备控制:<ol>
<li>控制指令上报: 代理设备建立控制上传通道, 上报控制指令到云端。</li>
<li>执行控制指令: 代理设备接收控制下发通道里面的 控制指令, 调度给agent执行, 将结果返回到控制上去通道。</li>
</ol>
</li>
<li>异常处理:<ol>
<li>设备下线异常: 由于设备下线无法和设备建立连接, 无法采集数据(DeviceOffLineError), 通过控制上传通道上报</li>
<li>点位采集异常: 由于设备没有该点位, 无法获取到该点位数据(NoPointError), 通过控制上传通道上报</li>
</ol>
</li>
<li>网关代理控制:<ol>
<li>proxy配置: 通过proxy的控制上传通道 请求 proxy的配置信息, 配置proxy需要代理的设备列表</li>
<li>proxy从启: 通过proxy的控制下发通道 执行云端对proxy的操作</li>
<li>proxy状态上报: proxy通过控制上传通道 上报自身状态</li>
<li>agent状态代理上报: proxy代理agent 上报状态(proxy控制上传通道)</li>
<li>agent异常代理上报: proxy代理agent 上报异常(proxy控制上传通道)</li>
</ol>
</li>
<li>网关代理异常:<ol>
<li>proxy运行异常: 及时向云端上报(ProxyRuntimeError), 通过proxy控制上传通道</li>
</ol>
</li>
</ul>
<h4 id="云端-device-gateway"><a href="#云端-device-gateway" class="headerlink" title="云端(device-gateway)"></a>云端(device-gateway)</h4><p>云端负责设备的连接的组件我们称之为设备网关(device-gateway), 它负责接收设备上传的数据与设备的控制。<br>设备网关在设计时需要满足如下原则:</p>
<ul>
<li>数据安全: 为了确保网关和数据上报者之间这段公网数据链路的安全, 需采用TLS进行加密和双向认证。 数据网关需充当CA的角色, 向agent或者颁发数字证书 </li>
<li>接入设备资产的管理</li>
<li>数据存储: 在数据存入数据库之前,这些数据被称为事件, 数据被存储之后成为历史数据, 事件和历史数据分别对应不同的场景<br>device-gateway的控制层功能概述:</li>
<li>类型管理:<br>连接上云端的设备必须要指明设备的类型, 设备类型用于校验 设备上传的数据 是否合规, 如果不合规,就丢弃掉, 但是需要记录日志, 让用户可以查看<br>类型的定义以Json为主, 需要定义 属性名称(字段名称), 字段的值的数据类型, 以及其他字段的相关信息。<ol>
<li>类型的增删改查</li>
</ol>
</li>
<li>设备管理<ol>
<li>设备创建: 必须参数参数: 设备名称, 接入方式(通过agent接入还是通过proxy接入), 设备类型(先定义类型)  可选参数: 地理位置, 设备标签, 其他属性,<br>真正创建时我们需要考虑:<ol>
<li>配额检查(限制一个用户可以创建的设备数)</li>
<li>如果通过agent接入, 为agent颁发设备接入证书和私钥</li>
<li>生成接入云端的用户和密码</li>
<li>配置设备和云端通信的通道</li>
<li>云端订阅这些通道, 等待数据上报或者来自agent的请求</li>
</ol>
</li>
<li>查看设备:<br>设备创建成功过后用户可以查看到:<ol>
<li>设备的基本信息, 比如名称, ID, 接入方式, 地理位置, 创建时间</li>
<li>设备标签信息, 这是简单的资产, 用于通过标签分类设备, 简单的资产分类管理</li>
<li>设备通道信息, 数据上报通道和设备控制通道的名称</li>
<li>接入信息, 接入云端的用户名和密码</li>
<li>设备状态信息, 设备是否下线, 能否和设备通信</li>
<li>agent状态信息, agent是否运行</li>
<li>如果是通过proxy接入, 显示proxy名称和状态信息</li>
</ol>
</li>
<li>修改设备:<br>  提供设备基本信息的修改:<ol>
<li>设备名称, 接入方式, 地理位置, 以及其他用户自定义属性的修改</li>
</ol>
</li>
<li>禁用设备:<br>  禁用设备后, 将禁止设备与云端建立连接:<ol>
<li>如果是agent接入, 剔除该agent的回话, 并禁止该设备 与云端建立连接</li>
<li>如果是proxy接入, 通知proxy, 停止为该设备建立与云端的连接</li>
</ol>
</li>
<li>启用设备:<br>  启用设备后, 恢复允许设备与云端建立连接:<ol>
<li>如果是agent接入, 撤销设备禁止接入云端的控制</li>
<li>如果是proxy接入, 通知proxy, 重新为该设备建立与云端的连接</li>
</ol>
</li>
<li>删除设备:<br>  删除设备后, 与设备相关的所有连接都将断开, 该设备从此以后将无法与云端建立连接<ol>
<li>取消该设备通道的所有处理</li>
<li>清除接入用户信息, 用户无法和云端建立连接</li>
<li>如果是proxy接入, 通知代理 该设备已经删除, 更新代理列表, 停止为该设备代理</li>
<li>清除设备相关元数据</li>
</ol>
</li>
<li>设备配额管理:<br>  限制用户可以创建的设备数量<ol>
<li>查询配置:</li>
<li>修改配额: 由管理员修改配额</li>
</ol>
</li>
<li>设备标签管理:<br>  基于标签的资产管理<ol>
<li>标签的创建,查看,修改,删除</li>
<li>为设备添加标签</li>
<li>移除设备的标签</li>
</ol>
</li>
<li>设备状态影子:<ol>
<li>查看设备最新状态, 设备数据接入云端时需要通过 设备类型 检查设备的上报的数据是否合法, 并且经最新状态 录入, 用户可以看到该设备的 最新状态数据.</li>
</ol>
</li>
</ol>
</li>
<li>设备的反向控制:<ol>
<li>控制指令查看<br>控制指令由agent的控制器实现, 在agent启动时上报给云端:<ol>
<li>控制指令的基本信息: 控制指令的名称, 功能说明, 使用方式, 预期结果, 异常说明。</li>
<li>控制指令的上报时间, 执行权使用者列表</li>
<li>控制指令的执行记录</li>
</ol>
</li>
<li>执行权分配<br>将控制指令的执行权分配给有个用户, 该用户可以执行该控制指令</li>
<li>执行权回收<br>将控制指令的执行权回收。用户将没有改指令的执行权</li>
<li>执行控制指令<br>默认仅有管理员可以执行控制指令, 执行控制指令, 得到执行结果</li>
<li>禁用控制指令<br> 由管理员决定是否禁用该控制指令</li>
<li>启用控制指令<br>由管理员决定是否启用该控制指令</li>
</ol>
</li>
<li>proxy管理:<ol>
<li>创建代理: 必须参数: 代理名称, 可选参数: 地理位置, 其他创建属性</li>
<li>查看代理:<ol>
<li>名称, 地理位置, 其他属性, 创建时间</li>
<li>代理状态: 未接入, 运行中, 禁用</li>
<li>代理的 数字签名证书, CA证书, 代理私钥</li>
<li>代理自己使用的控制通道(代理和云端通信的接口), 和异常上报通道</li>
</ol>
</li>
<li>修改代理:<br>名称, 地理位置, 其他属性</li>
<li>删除代理:<ol>
<li>确认该代理下面没有设备后方可以删除, 移除后的设备属于无上报方式的设备, </li>
<li>吊销代理的证书</li>
<li>剔除代理 的上报回话(非常危险, 如果代理正在上报数据)</li>
<li>清除代理信息</li>
</ol>
</li>
<li>禁用代理: 禁止该代理发布数据到云端(的数据管道)</li>
<li>启用代理: 禁止该代理发布数据到云端(的数据管道)</li>
<li>查看代理下的设备: 列出该代理下面的设备列表</li>
<li>添加设备到该代理下面</li>
<li>移除该代理下面的设备</li>
</ol>
</li>
</ul>
<p>device-gateway后台功能概述:</p>
<ul>
<li>数据存储<br>负责将数据存储到后端存储<ol>
<li>状态数据存储</li>
<li>热数据存储</li>
<li>历史数据存储</li>
</ol>
</li>
</ul>
<h3 id="数据可视化与运营-data-manager"><a href="#数据可视化与运营-data-manager" class="headerlink" title="数据可视化与运营(data-manager)"></a>数据可视化与运营(data-manager)</h3><p>主要负责数据的管理和查看, 数据以类型组织在一起, 以点位为核心, 用户通过为这些 数据添加标签 来添加 数据维度, 方便业务使用。</p>
<ul>
<li>数据分类<br>提供数据的查看与运营管理, 数据以指标的方式存储, 用户通过标签来运营数据。运营的数据主要由2类构成: </li>
</ul>
<ol>
<li>物理指标数据: 采集上来的原始数据, 以点位的最小逻辑单元为指标,比如 齿轮箱等。</li>
<li>分析过后的指标数据: 经过分析过后的数据 以算法为指标, 分析根据需要为这些数据打算标签。(比如打算设备标签)</li>
</ol>
<ul>
<li>数据查看<br>提供对数据的基本展现的支持, 但不提供大量原始数据的导出功能, 大量原始数据是留给计算平台使用的, 如需导出请使用导出工具进行导出。</li>
</ul>
<ol>
<li>数据查询配置查看: <ol>
<li>历史数据分层配置: 1. 按时间为维度进行划分, 默认为3个月 2. 按容量进行划分, 默认为最近1w条数据, 默认按规则1执行。</li>
<li>状态数据查询容量限制: 默认为1000条数据, 及设备点位不得默认不得超过1000</li>
<li>历史数据查询容量限制: 默认为100 * 100条数据, 及设备点位不能超过100个，每个点位的数据不得超过100条</li>
</ol>
</li>
<li>数据查询配置修改: 修改以上那些默认配置</li>
<li>查询数据: <ol>
<li>状态查询:  也就是当前接入事件的查询(用于查看当下接入的数据, 不能查看历史数据), 如果设备接入异常 请显示接入异常信息, 以websocket 进行实时提供</li>
<li>历史查询: 也就是趋势查询<ol>
<li>热数据查询:   如果数据量过大，需要分组进行聚合</li>
<li>冷数据查询:   如果数据量过大，需要分组进行聚合</li>
</ol>
</li>
</ol>
</li>
</ol>
<ul>
<li>数据标签管理<ol>
<li>数据标签查询, 默认标签属于系统标签(比如数据属于那台设备, 数据是由那个采集器采集上来的), 禁止修改, 为只读状态, 其他是用户为数据 进行的自定义标签</li>
<li>添加标签: 为数据 添加标签， 标签有长度限制(最长不得超过16个字符)</li>
<li>删除标签: 删除标签,但是删除之前 需要确认数据是否已经授权, 如果已经授权分享, 需要撤销分享 才能删除</li>
</ol>
</li>
<li>数据授权<br> 用户按照自己的需要 将数据打上标签, 或者使用默认标签, 将对应的数据 分析给其他用户访问.<ol>
<li>数据分享查询: 查询那些数据,被分析给了那些用户</li>
<li>分享权限撤销: 撤销已经分析出去的数据授权</li>
<li>数据分享: 指定某些用户可以访问那些标签的数据。</li>
</ol>
</li>
</ul>
<h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><p>数据分析围绕算法和任务进行展开, 关键的在于 算法的高度可定制化, 算法测试, 运行时检查, 以及算法执行过程中任务的可视化。功能是满足高级用户 对于数据分析的需求。 通过算法对数据进行深度分析的功能。</p>
<ul>
<li>实时计算</li>
<li>离线计算(报表统计和深度学习, 深度需要依赖大量数据训练出模型，然后通过模型 应用到事件分析, 达到智能分析的目的)</li>
<li>混合计算: 比如先使用离线计算训练模型, 然后将模型 应用到实时计算, 或者使用实时计算作为测试数据,以历史数据作为训练数据 进行交叉验证,以便训练准确的模型。</li>
</ul>
<h4 id="算法管"><a href="#算法管" class="headerlink" title="算法管"></a>算法管</h4><p>管理算法文件, 算法文件表现为一个脚本文件, 对于storm 平台而已, 算法文件是groove脚本, 对于spark 平台而言, 算法文件 可以是spark支持的多种语言的脚本。</p>
<ul>
<li>上传算法: 上传脚本文件,  算法名称(默认是算法文件的名称,去掉后缀), 算法描述信息(包含算法要解决的问题, 输入参数的解释和输出参数的解释), 算法运行平台()</li>
<li>下载算法: 下载算法文件。</li>
<li>删除算法: 删除算法文件.</li>
<li>更新算法元数据: 更新算法的名称 或者算法的描述信息</li>
<li>查看算法: 查看所有算法。</li>
<li>算法访问授权: 授权算法给某个用户访问。</li>
<li>算法授权撤销: 撤销某个用户访问某个算法的权限。</li>
</ul>
<h4 id="任务执行"><a href="#任务执行" class="headerlink" title="任务执行"></a>任务执行</h4><p>算法 运行时产生一个真正的任务, 因此运行算法 需要有以下这些参数:</p>
<ul>
<li>算法文件, 通过指定算法文件的id来完成</li>
<li>算法的输入和输出:<ol>
<li>扫描获取算法文件的 输入和输出形参()</li>
<li>选定输入源的形参对应的数据, 通过去输入源 查看得出, 选择输出源 对应的名称。(可以检查输入源是否有数据)</li>
</ol>
</li>
<li>执行平台, 根据算法文件id, 得知该算法调度到那个平台上运行(jstrom, spark), 如果没有对应平台支持,  则报错</li>
</ul>
<h2 id="现有物联网平台参考"><a href="#现有物联网平台参考" class="headerlink" title="现有物联网平台参考"></a>现有物联网平台参考</h2><p><a href="http://www.cnblogs.com/kinging/category/881401.html" target="_blank" rel="external">国内外物联网平台架构</a><br><a href="http://www.chengshiluntan.com/wg/a/20160907/503c29c323fd2d59999501e91099ecf7.html" target="_blank" rel="external">微软Azure IoT</a><br><a href="http://www.cnblogs.com/kinging/articles/5865116.html" target="_blank" rel="external">亚马逊AWS IoT</a><br><a href="http://www.cnblogs.com/kinging/articles/5865139.html" target="_blank" rel="external">IBM Watson IOT</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近开发了一次IOT组件, 在此期间也参考了下其他IOT平台的设计架构, 有所感想, 因此将其记录下来, 和大家分享, 欢迎交流。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="iot" scheme="https://blog.yumaojun.net/tags/iot/"/>
    
  </entry>
  
  <entry>
    <title>Python的mqtt客户端使用说明</title>
    <link href="https://blog.yumaojun.net/2017/07/04/mqtt-reconnect/"/>
    <id>https://blog.yumaojun.net/2017/07/04/mqtt-reconnect/</id>
    <published>2017-07-04T07:21:58.000Z</published>
    <updated>2017-08-08T03:16:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用Python写一个后台服务处理mqtt里面的事件时遇到了一个麻烦: mqtt连接重置时(重启mqtt服务后), 之前pub消息的线程不能正常工作了, 经过多次踩坑, 终于解决. 引发问题的原因是我使用姿势不对造成的, 一旦你使用姿势不对 会造成一些奇怪的问题,并且很难解决。 因此请正确使用mqtt。<br><a id="more"></a></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>关于MQTT协议的介绍请参考之前博客: <a href="/2017/07/02/mqtt-introduce/" title="物联网之MQTT">物联网之MQTT</a>, 只有在了解MQTT协议过后, 我们才能以正确的姿势使用她, 以下是我觉得需要注意的地方:</p>
<ul>
<li>按需使用MQTT的Qos, 当Qos=2时可靠性最高, 但是会损失性能。</li>
<li>尽量使用<code>client_id</code>来标示客户端, 但是注意 如果2个客户端使用同一个<code>client_id</code>, 会出现client争抢连接的状态, 所以全局持有一个client是不错的选择。</li>
<li>注意异步处理, 在回调函数中不能阻塞。</li>
<li>将所有数据处理逻辑放到回调函数里面, 防止链接重置时，漏掉处理逻</li>
<li>在on_message的回调里面 处理所有的订阅消息</li>
<li>断开连接时尽量从新连接, 避免mqtt离线后, 重新上线, 造成服务连接异常。(注意loop的返回, 保证loop网络事件持续处理中)</li>
</ul>
<h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><p>介绍下我的测试环境:</p>
<ul>
<li>Python Version: 3.6</li>
<li>MQTT Server: emqttserver:2.2-rc1</li>
<li>MQTT Client: paho-mqtt: 1.3.0</li>
</ul>
<p>emqtt server安装参考<a href="http://emqtt.io/docs/v2/install.html#install-via-docker-image" target="_blank" rel="external">emqtt docker安装</a><br>python mqtt客户端的安装请参考<a href="https://github.com/eclipse/paho.mqtt.python" target="_blank" rel="external">Github地址</a></p>
<h2 id="客户端使用介绍"><a href="#客户端使用介绍" class="headerlink" title="客户端使用介绍"></a>客户端使用介绍</h2><p>paho-mqtt有一个客户端类, 我们主要使用该类来和mqttserver进行交互, 那么如何使用这个类喃: </p>
<ul>
<li>建立连接: 使用connect()/connect_async()来链接到broker(mqtt server)</li>
<li>断开连接: 使用disconnect()方法来断开和broker(mqtt server)之间的网络连接。</li>
<li>处理网络事件: 请频繁调用loop()来维持和broker(mqtt server)之间的网络事件。如果不想自己频繁的调用loop来维护网络事件, 可以使用loop_forever()方法来处理,该方法会帮你循环调用loop, 因此该方法是一个阻塞的方法。如果不想在程序里面阻塞,可以使用loop_start()方法,该方法会启动一个线程在后台执行loop_forever。</li>
<li>订阅消息: 使用subscribe()方法来订阅topic和接收数据</li>
<li>发布消息: 使用publish()方法来发布消息</li>
</ul>
<p>mqtt的通信是异步的, 通过网络事件来进行回调处理, 因此我们基本采用回调来编程, 回调函数的签名如下, 所有的回调函数都2个固定参数: </p>
<blockquote>
<ol>
<li>client: 回调时传递来的客户端实例 </li>
<li>userdata: user的任何类型的数据, 实例化client时传入, 用户自己使用。</li>
</ol>
</blockquote>
<h3 id="on-connect-client-userdata-flags-rc"><a href="#on-connect-client-userdata-flags-rc" class="headerlink" title="on_connect(client, userdata, flags, rc)"></a>on_connect(client, userdata, flags, rc)</h3><p>当broker响应了我们链接之后调用, 涉及到的参数:</p>
<ul>
<li><p>flags: 是一个字典, 包含broker返回的响应标志<br>现在只有1中标志: session present, 通过flags[‘session present’]获取到该标志里面的内容, 当clean session为0时(clean_session=False), broker会保存client的的session信息, 该信息会在client重新上线时, 通过session present这个标志 返回给客户端。</p>
</li>
<li><p>rc: retrun code, 返回状态码</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>RC</th>
<th style="text-align:center">Status</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td style="text-align:center">successful</td>
<td style="text-align:center">connected</td>
</tr>
<tr>
<td>1</td>
<td style="text-align:center">refused</td>
<td style="text-align:center">incorrect protocol version</td>
</tr>
<tr>
<td>2</td>
<td style="text-align:center">refused</td>
<td style="text-align:center">invalid client identifier</td>
</tr>
<tr>
<td>3</td>
<td style="text-align:center">refused</td>
<td style="text-align:center">server unavailable</td>
</tr>
<tr>
<td>4</td>
<td style="text-align:center">refused</td>
<td style="text-align:center">bad username or password</td>
</tr>
<tr>
<td>5</td>
<td style="text-align:center">refused</td>
<td style="text-align:center">not authorised</td>
</tr>
<tr>
<td>6-255</td>
<td style="text-align:center">refused</td>
<td style="text-align:center">Currently unused</td>
</tr>
</tbody>
</table>
<h3 id="on-disconnect-client-userdata-rc"><a href="#on-disconnect-client-userdata-rc" class="headerlink" title="on_disconnect(client, userdata, rc)"></a>on_disconnect(client, userdata, rc)</h3><p>当client和broker断开连接时调用. rc表示断开连接是的状态</p>
<table>
<thead>
<tr>
<th>RC</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td style="text-align:center">MQTT_ERR_SUCCESS, 客户端调用disconnect()方法断开连接, 属于正常断开</td>
</tr>
<tr>
<td>1</td>
<td style="text-align:center">网络等其他原因照成的连接断开, 异常断开</td>
</tr>
</tbody>
</table>
<h3 id="on-message-client-userdata-message"><a href="#on-message-client-userdata-message" class="headerlink" title="on_message(client, userdata, message)"></a>on_message(client, userdata, message)</h3><p>当客户端订阅的topic上有数据 被接收时调用, message是一个MQTTMessage的类, 该类包含了message的所有数据:</p>
<ul>
<li>topic: 数据所在的topic</li>
<li>payload: message的数据部分</li>
<li>qos: 该消息的质量: 0, 1, 2</li>
<li>retain: 该消息是否是保留消息, 如果为True 这为保留消息, 如果为False就是最新的消息。</li>
<li>mid: message id</li>
</ul>
<h3 id="on-publish-client-userdata-mid"><a href="#on-publish-client-userdata-mid" class="headerlink" title="on_publish(client, userdata, mid)"></a>on_publish(client, userdata, mid)</h3><p>当使用publish方法将message传输到broker后调用, 但是这要针对不同的qos, 对于qos1和2而言, 这表示消息已经到达后的回调, 如果qos是0那么仅仅表示消息离开了客户端之后的回调。这个回调很重要，因为即使publish()调用返回成功，并不总是意味着已经发送了消息</p>
<ul>
<li>mid: 表示已经publish出去的消息的message id</li>
</ul>
<h3 id="on-subscribe-client-userdata-mid-granted-qos"><a href="#on-subscribe-client-userdata-mid-granted-qos" class="headerlink" title="on_subscribe(client, userdata, mid, granted_qos)"></a>on_subscribe(client, userdata, mid, granted_qos)</h3><p>当broker响应了subscribe请求之后调用。</p>
<ul>
<li>mid: 被订阅消息的message id</li>
<li>granted_qos: broker为不同的订阅请求授权的qos级别。是一个列表。</li>
</ul>
<h3 id="on-unsubscribe-client-userdata-mid"><a href="#on-unsubscribe-client-userdata-mid" class="headerlink" title="on_unsubscribe(client, userdata, mid)"></a>on_unsubscribe(client, userdata, mid)</h3><p>当broker响应了取消订阅的请求过后调用。</p>
<ul>
<li>mid: 取消订阅的消息的message id</li>
</ul>
<h3 id="on-log-client-userdata-level-buf"><a href="#on-log-client-userdata-level-buf" class="headerlink" title="on_log(client, userdata, level, buf)"></a>on_log(client, userdata, level, buf)</h3><p>MQTT通信过程中的一些Debug信息</p>
<ul>
<li>level: 日志级别MQTT_LOG_INFO, MQTT_LOG_NOTICE, MQTT_LOG_WARNING, MQTT_LOG_ERR, and MQTT_LOG_DEBUG</li>
<li>buf: message buffer, debug信息本身。</li>
</ul>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>我Github上有: <a href="https://github.com/yumaojun03/python/blob/master/mqtt/main.py" target="_blank" rel="external">完整示例代码</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="keyword">from</span> paho.mqtt.client <span class="keyword">import</span> Client</div><div class="line"></div><div class="line">FORMAT = <span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span></div><div class="line">logging.basicConfig(format=FORMAT, level=logging.INFO)</div><div class="line">logger = logging.getLogger()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pub_topic_test01</span><span class="params">(client)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        client.publish(topic=<span class="string">"test01"</span>, qos=<span class="number">2</span>, payload=<span class="string">"test01 topic data"</span>)</div><div class="line">        time.sleep(<span class="number">2</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pub_topic_test02</span><span class="params">(client)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        client.publish(topic=<span class="string">"test02"</span>, qos=<span class="number">2</span>, payload=<span class="string">"test02 topic data"</span>)</div><div class="line">        time.sleep(<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMQTTClass</span><span class="params">(Client)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    mqtt client for deal data</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(MyMQTTClass, self).__init__(client_id=<span class="string">"test client"</span>, clean_session=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_connect</span><span class="params">(self, client, obj, flags, rc)</span>:</span></div><div class="line">        logger.info(<span class="string">"on connect, rc: %s"</span> % rc)</div><div class="line"></div><div class="line">        <span class="comment"># 链接过后先处理sub</span></div><div class="line">        client.subscribe(topic=<span class="string">"test01"</span>, qos=<span class="number">2</span>)</div><div class="line">        client.subscribe(topic=<span class="string">"test02"</span>, qos=<span class="number">2</span>)</div><div class="line"></div><div class="line">        logger.info(<span class="string">"start topic service1..."</span>)</div><div class="line">        t1 = threading.Thread(target=pub_topic_test01, args=(client,))</div><div class="line">        t1.start()</div><div class="line">        self.worker1 = t1</div><div class="line"></div><div class="line">        logger.info(<span class="string">"start topic service2..."</span>)</div><div class="line">        t2 = threading.Thread(target=pub_topic_test02, args=(client,))</div><div class="line">        t2.start()</div><div class="line">        self.worker2 = t2</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_message</span><span class="params">(self, client, obj, msg)</span>:</span></div><div class="line">        logger.debug(<span class="string">"on message, topic: %s, qos: %s, data: %s"</span> % (msg.topic, msg.qos, msg.payload))</div><div class="line"></div><div class="line">        <span class="keyword">if</span> msg.topic == <span class="string">"test01"</span>:</div><div class="line">            logger.info(<span class="string">"deal test01, data: %s"</span> % msg.payload)</div><div class="line"></div><div class="line">        <span class="keyword">elif</span> msg.topic == <span class="string">"test02"</span>:</div><div class="line">            logger.info(<span class="string">"deal test02, data: %s"</span> % msg.payload)</div><div class="line"></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            logger.info(<span class="string">"other topic %s, data: %s"</span> %(msg.topic, msg.payload))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_publish</span><span class="params">(self, client, obj, mid)</span>:</span></div><div class="line">        logger.debug(<span class="string">"publish -&gt; ,mid: %s"</span> % mid)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_subscribe</span><span class="params">(self, client, obj, mid, granted_qos)</span>:</span></div><div class="line">        logger.debug(<span class="string">"subscribed &lt;- ,mid: %s, qos: %s"</span> %(mid, granted_qos))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_log</span><span class="params">(self, mqttc, obj, level, string)</span>:</span></div><div class="line">        logger.debug(<span class="string">"mqtt debug: %s"</span> % string)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_disconnect</span><span class="params">(self, client, userdata, rc)</span>:</span></div><div class="line">        logger.info(<span class="string">"disconnect: %s"</span> % rc)</div><div class="line"></div><div class="line">        <span class="keyword">while</span> rc == <span class="number">1</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                client.reconnect()</div><div class="line">                logger.info(<span class="string">"reconnect success"</span>)</div><div class="line">                rc = <span class="number">0</span></div><div class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                logger.error(<span class="string">"reconnect error, %s retry after 3s"</span> % e)</div><div class="line">                time.sleep(<span class="number">3</span>)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        self.connect(<span class="string">"172.16.112.251"</span>, <span class="number">1883</span>, <span class="number">60</span>)</div><div class="line"></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            rc = self.loop()</div><div class="line">            <span class="keyword">if</span> rc != <span class="number">0</span>:</div><div class="line">                time.sleep(<span class="number">1</span>)</div><div class="line">                rc = self.loop()</div><div class="line">                logger.info(<span class="string">"recovery from error loop, %s"</span> % rc)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    client = MyMQTTClass()</div><div class="line">    client.run()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近使用Python写一个后台服务处理mqtt里面的事件时遇到了一个麻烦: mqtt连接重置时(重启mqtt服务后), 之前pub消息的线程不能正常工作了, 经过多次踩坑, 终于解决. 引发问题的原因是我使用姿势不对造成的, 一旦你使用姿势不对 会造成一些奇怪的问题,并且很难解决。 因此请正确使用mqtt。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="mqtt" scheme="https://blog.yumaojun.net/tags/mqtt/"/>
    
  </entry>
  
  <entry>
    <title>物联网之MQTT</title>
    <link href="https://blog.yumaojun.net/2017/07/02/mqtt-introduce/"/>
    <id>https://blog.yumaojun.net/2017/07/02/mqtt-introduce/</id>
    <published>2017-07-02T04:46:42.000Z</published>
    <updated>2017-08-08T03:16:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>物联网物接入协议MQTT<br><a id="more"></a></p>
<p>相对来说，IoT的技术挑战，主要在安全隐患、连接管理、海量数据管理，用关键字来说就是海量、通用、可扩展、简单。<br>物接入云端，有很多挑战, 数据的安全尤为重要 </p>
<h2 id="协议比较"><a href="#协议比较" class="headerlink" title="协议比较"></a>协议比较</h2><p><a href="http://www.365yg.com/group/6408407122584879362/" target="_blank" rel="external">协议比较</a></p>
<h2 id="MQTT简介"><a href="#MQTT简介" class="headerlink" title="MQTT简介"></a>MQTT简介</h2><p>MQTT是一个客户端服务端架构的发布/订阅模式的消息传输协议。它的设计思想是轻巧、开放、简单、规范，易于实现。这些特点使得它对很多场景来说都是很好的选择，特别是对于受限的环境如机器与机器的通信(M2M)以及物联网环境(IoT)。<br>总体来说MQTT有如下特性:</p>
<ul>
<li>轻量级的 machine-to-machine 通信协议。</li>
<li>publish/subscribe模式。</li>
<li>基于TCP/IP。</li>
<li>支持QoS。</li>
<li>适合于低带宽、不可靠连接、嵌入式设备、CPU内存资源紧张。</li>
<li>是一种比较不错的Android消息推送方案。</li>
<li>FacebookMessenger采用了MQTT。</li>
<li>MQTT有可能成为物联网的重要协议</li>
</ul>
<p><a href="http://dataguild.org/?p=6817" target="_blank" rel="external">mqtt协议简介</a></p>
<p><a href="http://www.cnblogs.com/caca/p/mqtt.html" target="_blank" rel="external">协议简介</a></p>
<h2 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h2><table class="tg"><tr><th class="tg-baqh">bit</th><th class="tg-yw4l">7</th><th class="tg-yw4l">6</th><th class="tg-yw4l">5</th><th class="tg-yw4l">4</th><th class="tg-yw4l">3</th><th class="tg-yw4l">2</th><th class="tg-yw4l">1</th><th class="tg-yw4l">0</th></tr><tr><td class="tg-q1yk">byte 1</td><td class="tg-6k2t" colspan="4">Message type</td><td class="tg-6k2t">DUP</td><td class="tg-6k2t" colspan="2">QoS level</td><td class="tg-6k2t">RETAIN</td></tr><tr><td class="tg-jogk">byte 2</td><td class="tg-yw4l" colspan="8">Message length (between one and four bytes)</td></tr><tr><td class="tg-r78f">byte 3</td><td class="tg-j0tj" colspan="8">… if needed to encode message length</td></tr><tr><td class="tg-574v">byte 4</td><td class="tg-baqh" colspan="8">… if needed to encode message length</td></tr><tr><td class="tg-r78f">byte 5</td><td class="tg-j0tj" colspan="8">… if needed to encode message length</td></tr></table>

<h2 id="控制指令"><a href="#控制指令" class="headerlink" title="控制指令"></a>控制指令</h2><table>
<thead>
<tr>
<th>Message Type</th>
<th style="text-align:center">Value</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>CONNECT</td>
<td style="text-align:center">1</td>
<td style="text-align:center">Client request to connect to Server</td>
</tr>
<tr>
<td>CONNACK</td>
<td style="text-align:center">2</td>
<td style="text-align:center">Connect Acknowledgment</td>
</tr>
<tr>
<td>PUBLISH</td>
<td style="text-align:center">3</td>
<td style="text-align:center">Publish message</td>
</tr>
<tr>
<td>PUBACK</td>
<td style="text-align:center">4</td>
<td style="text-align:center">Publish Acknowledgment</td>
</tr>
<tr>
<td>PUBREC</td>
<td style="text-align:center">5</td>
<td style="text-align:center">Publish Received (assured delivery part 1)</td>
</tr>
<tr>
<td>PUBREL</td>
<td style="text-align:center">6</td>
<td style="text-align:center">Publish Release (assured delivery part 2)</td>
</tr>
<tr>
<td>PUBCOMP</td>
<td style="text-align:center">7</td>
<td style="text-align:center">Publish Complete (assured delivery part 3)</td>
</tr>
<tr>
<td>SUBSCRIBE</td>
<td style="text-align:center">8</td>
<td style="text-align:center">Client Subscribe request</td>
</tr>
<tr>
<td>SUBACK</td>
<td style="text-align:center">9</td>
<td style="text-align:center">Subscribe Acknowledgment</td>
</tr>
<tr>
<td>UNSUBSCRIBE</td>
<td style="text-align:center">10</td>
<td style="text-align:center">Client Unsubscribe request</td>
</tr>
<tr>
<td>UNSUBACK</td>
<td style="text-align:center">11</td>
<td style="text-align:center">Unsubscribe Acknowledgment</td>
</tr>
<tr>
<td>PINGREQ</td>
<td style="text-align:center">12</td>
<td style="text-align:center">PING Request</td>
</tr>
<tr>
<td>PINGRESP</td>
<td style="text-align:center">13</td>
<td style="text-align:center">PING Response</td>
</tr>
<tr>
<td>DISCONNECT</td>
<td style="text-align:center">14</td>
<td style="text-align:center">Client is Disconnecting</td>
</tr>
</tbody>
</table>
<h2 id="Qos"><a href="#Qos" class="headerlink" title="Qos"></a>Qos</h2><p><img src="https://image.slidesharecdn.com/mqttiotprotocolscomparison-140219090749-phpapp01/95/mqtt-iot-protocols-comparison-8-638.jpg?cb=1392817944" alt=""></p>
<h2 id="mqtt的状态机"><a href="#mqtt的状态机" class="headerlink" title="mqtt的状态机"></a>mqtt的状态机</h2><p><img src="http://www.sharetechnote.com/html/IoT/image/IoT_MQTT_ProtocolOverview_01.png" alt=""><br>wo </p>
<p><img src="https://infocenter.nordicsemi.com/topic/com.nordic.infocenter.iotsdk.v0.9.0/msc_mqtt.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;物联网物接入协议MQTT&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="iot" scheme="https://blog.yumaojun.net/tags/iot/"/>
    
      <category term="mqtt" scheme="https://blog.yumaojun.net/tags/mqtt/"/>
    
  </entry>
  
  <entry>
    <title>Python编码风格</title>
    <link href="https://blog.yumaojun.net/2017/06/24/python-style-pep8/"/>
    <id>https://blog.yumaojun.net/2017/06/24/python-style-pep8/</id>
    <published>2017-06-24T10:49:39.000Z</published>
    <updated>2017-06-27T05:33:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近做项目一直使用Golang, 距离上次使用Python已经半年之久了, 对于Go来说有fmt帮忙格式化, 解决了绝大部分编码风格问题, 而Python则需要自己注意,根据官方指导PEP8或者一些最佳实践比如Google Style来控制风格。时间久了 一些细节部分就忘记了, 于是翻阅之前写的博客, 受益良多, 于是打算把之前的这几篇博客迁移过来, 顺便更新, 方便以后查阅。<br><a id="more"></a></p>
<h2 id="关于本文"><a href="#关于本文" class="headerlink" title="关于本文"></a>关于本文</h2><p>本文主要参考PEP8(Python版本标准库的编码约定),以及Google Style编码风格, 但却不会完全按照PEP8进行翻译, 我不会贴出不合规范的代码, 尽量简洁易懂, 方便快速阅读, 如果想看完整版本的PEP8相关文档, 请移步参考文档部分。 </p>
<h2 id="风格指南的目的"><a href="#风格指南的目的" class="headerlink" title="风格指南的目的"></a>风格指南的目的</h2><p>风格指南的目的在于统一编码风格,让代码有规可循,这样人们就可以专注于”你在说什么”, 而不是”你在怎么说”.从而改善Python代码的可读性,即<a href="https://www.python.org/dev/peps/pep-0020/" target="_blank" rel="external">PEP 20</a>所说的“可读性计数”(Readability counts).</p>
<p>风格指针在于统一风格, PEP8仅仅是官方指导, 本地编码风格同样重要, 如果满足可读性, 优先保持本地风格, 使得你整体项目的代码风格一致。 </p>
<h2 id="代码布局"><a href="#代码布局" class="headerlink" title="代码布局"></a>代码布局</h2><ol>
<li><p>每级缩进用4个空格(强烈建议使用4个空格作为缩进), 不要混用空格和Tab, Python3中不允许混合使用Tab和空格缩进</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_version</span><span class="params">(version=None)</span>:</span></div><div class="line">    <span class="string">"Returns a PEP 386-compliant version number from VERSION."</span></div><div class="line">    version = get_complete_version(version)</div></pre></td></tr></table></figure>
</li>
<li><p>括号中使用垂直隐式缩进或使用悬挂缩进（对准左括号）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">foo = long_function_name(var_one, var_two,</div><div class="line">                         var_three, var_four)</div></pre></td></tr></table></figure>
</li>
<li><p>if语句跨行时，两个字符关键字(比如if)加上一个空格，再加上左括号构成了很好的缩进。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Add some extra indentation on the conditional continuation line.</span></div><div class="line"><span class="keyword">if</span> (this_is_one_thing</div><div class="line">        <span class="keyword">and</span> that_is_another_thing):</div><div class="line">    do_something()</div></pre></td></tr></table></figure>
</li>
<li><p>右边括号也可以另起一行（右括号回退）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">my_list = [</div><div class="line">    <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,</div><div class="line">    <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,</div><div class="line">]</div><div class="line">result = some_function_that_takes_arguments(</div><div class="line">    <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>,</div><div class="line">    <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>,</div><div class="line">)</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="最大行宽"><a href="#最大行宽" class="headerlink" title="最大行宽"></a>最大行宽</h2><p>限制所有行的最大行宽为79字符。文本长块，比如文档字符串或注释，行长度应限制为72个字符。<br>续行的首选方法是使用小括号、中括号和大括号反斜线仍可能在适当的时候。其次是反斜杠。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">'/path/to/some/file/you/want/to/read'</span>) <span class="keyword">as</span> file_1, \</div><div class="line">     open(<span class="string">'/path/to/some/file/being/written'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> file_2:</div><div class="line">    file_2.write(file_1.read())</div></pre></td></tr></table></figure></p>
<h2 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h2><ul>
<li>空二行: 顶级定义之间空两行, 比如函数或者类定义. </li>
<li>空一行: 方法定义, 类定义与第一个方法之间, 都应该空一行. 函数或方法中, 某些地方要是你觉得合适, 就空一行.<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamingHttpResponse</span><span class="params">(HttpResponseBase)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    A streaming HTTP response class with an iterator as content.</div><div class="line"> </div><div class="line">    This should only be iterated once, when the response is streamed to the</div><div class="line">    client. However, it can be appended to or replaced with a new iterator</div><div class="line">    that wraps the original content (or yields entirely new content).</div><div class="line">    """</div><div class="line"> </div><div class="line">    streaming = <span class="keyword">True</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, streaming_content=<span class="params">()</span>, *args, **kwargs)</span>:</span></div><div class="line">        super(StreamingHttpResponse, self).__init__(*args, **kwargs)</div><div class="line">        <span class="comment"># `streaming_content` should be an iterable of bytestrings.</span></div><div class="line">        <span class="comment"># See the `streaming_content` property methods.</span></div><div class="line">        self.streaming_content = streaming_content</div><div class="line"> </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">content</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">"This %s instance has no `content` attribute. "</span></div><div class="line">            <span class="string">"Use `streaming_content` instead."</span> % self.__class__.__name__)</div><div class="line"> </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">streaming_content</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> map(self.make_bytes, self._iterator)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h2><ul>
<li>导入在单独成行, 同一个模块的多个对象被导出时使用()</li>
<li>导入始终在文件的顶部，在模块注释和文档字符串之后，在模块全局变量和常量之前。</li>
<li>推荐绝对路径导入，因为它们通常更可读，而且往往是表现更好的（或至少提供更好的错误消息。</li>
<li>禁止使用通配符导入。</li>
<li>导入顺序如下：标准库进口,相关的第三方库，本地库。各组的导入之间要有空行。<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 标准库</span></div><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> traceback</div><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</div><div class="line"><span class="keyword">from</span> inspect <span class="keyword">import</span> isawaitable</div><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</div><div class="line"><span class="keyword">from</span> signal <span class="keyword">import</span> (</div><div class="line">    SIGTERM, SIGINT,</div><div class="line">    signal <span class="keyword">as</span> signal_func,</div><div class="line">    Signals</div><div class="line">)</div><div class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> (</div><div class="line">    socket,</div><div class="line">    SOL_SOCKET,</div><div class="line">    SO_REUSEADDR,</div><div class="line">)</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="comment"># 第三方库</span></div><div class="line"><span class="keyword">from</span> httptools <span class="keyword">import</span> HttpRequestParser</div><div class="line"><span class="keyword">from</span> httptools.parser.errors <span class="keyword">import</span> HttpParserError</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">import</span> uvloop <span class="keyword">as</span> async_loop</div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    async_loop = asyncio</div><div class="line"></div><div class="line"><span class="comment"># 本地库</span></div><div class="line"><span class="keyword">from</span> sanic.log <span class="keyword">import</span> log, netlog</div><div class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> HTTPResponse</div><div class="line"><span class="keyword">from</span> sanic.request <span class="keyword">import</span> Request</div><div class="line"><span class="keyword">from</span> sanic.exceptions <span class="keyword">import</span> (</div><div class="line">    RequestTimeout, PayloadTooLarge, InvalidUsage, ServerError)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="字符串引用"><a href="#字符串引用" class="headerlink" title="字符串引用"></a>字符串引用</h2><p>Python中单引号字符串和双引号字符串都是相同的。注意尽量避免在字符串中的反斜杠以提高可读性。<br>比如一段字符串里面既有单引号，又有双引号，就的使用 多行字符串的方式，避免使用 \” 或\’<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error = <span class="string">"""My Class hasn't "test" attribute."""</span></div></pre></td></tr></table></figure></p>
<h2 id="表达式和语句中的空格"><a href="#表达式和语句中的空格" class="headerlink" title="表达式和语句中的空格"></a>表达式和语句中的空格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 括号里边避免空格 </span></div><div class="line">spam(ham[<span class="number">1</span>], &#123;eggs: <span class="number">2</span>&#125;)</div><div class="line"><span class="comment"># 逗号，冒号，分号之前避免空格</span></div><div class="line"><span class="keyword">if</span> x == <span class="number">4</span>: <span class="keyword">print</span> x, y; x, y = y, x</div><div class="line"><span class="comment"># 索引操作符不留空格</span></div><div class="line">ham[<span class="number">1</span>:<span class="number">9</span>:<span class="number">3</span>]</div><div class="line"><span class="comment"># 函数调用的左括号之前不能有空格</span></div><div class="line">spam(<span class="number">1</span>)</div><div class="line"><span class="comment"># 二元操作符两边留一个空格,涉及 =、符合操作符 ( += , -=等)、比较( == , &lt; , &gt; , != , &lt;&gt; , &lt;= , &gt;= , in , not in , is , is not )、布尔( and , or , not )</span></div><div class="line">x = <span class="number">1</span></div><div class="line"><span class="comment"># 搞优先级运算符前后不留空格</span></div><div class="line">hypot2 = x*x + y*y</div><div class="line">c = (a+b) * (a-b)</div><div class="line"><span class="comment"># 关键字参数和默认值参数的前后不要加空格</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">complex</span><span class="params">(real, imag=<span class="number">0.0</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> magic(r=real, i=imag)</div><div class="line"><span class="comment"># 函数注释中，=前后要有空格，冒号和"-&gt;"的前面无空格，后面有空格。</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">(sep: AnyStr = None)</span>:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">()</span> -&gt; AnyStr:</span></div><div class="line"><span class="comment"># 尽量不使用复合语句(Compound statements: 多条语句写在同一行)</span></div><div class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>:</div><div class="line">    do_blah_thing()</div></pre></td></tr></table></figure>
<h2 id="普通注释"><a href="#普通注释" class="headerlink" title="普通注释"></a>普通注释</h2><p>通用规则:</p>
<ul>
<li>与代码自相矛盾的注释比没注释更差。修改代码时要优先更新注释！</li>
<li>注释是完整的句子。如果注释是断句，首字母应该大写，除非它是小写字母开头的标识符(永远不要修改标识符的大小写)。</li>
<li>如果注释很短，可以省略末尾的句号。注释块通常由一个或多个段落组成。段落由完整的句子构成且每个句子应该以点号(后面要有两个空格)结束，并注意断词和空格。</li>
<li>非英语国家的程序员请用英语书写你的注释，除非你200%确信代码永远不会被不懂你的语言的人阅读。</li>
</ul>
<p>注释块:</p>
<ul>
<li>注释块通常应用在代码前，并和这些代码有同样的缩进。每行以 ‘# ‘(除非它是注释内的缩进文本，注意#后面有空格)。</li>
<li>注释块内的段落用仅包含单个 ‘#’ 的行分割。</li>
</ul>
<p>行内注释:</p>
<ul>
<li>慎用行内注释(Inline Comments) 节俭使用行内注释。 行内注释是和语句在同一行，至少用两个空格和语句分开。行内注释不是必需的，重复罗嗦会使人分心。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># We use a weighted dictionary search to find out where i is in</span></div><div class="line"><span class="comment"># the array.  We extrapolate position based on the largest num</span></div><div class="line"><span class="comment"># in the array and the array size and then do binary search to</span></div><div class="line"><span class="comment"># get the exact number.</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> i &amp; (i<span class="number">-1</span>) == <span class="number">0</span>:        <span class="comment"># true iff i is a power of 2</span></div></pre></td></tr></table></figure>
<h2 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h2><p>这部分很重要, 他是Python独有的, 为所有公共模块、函数、类和方法书写文档字符串。非公开方法不一定有文档字符串，建议有注释(出现在def行之后)来描述这个方法做什么, 详情参考<a href="https://www.python.org/dev/peps/pep-0257/" target="_blank" rel="external">PEP 257 文档字符串约定</a><br>, 但是这部分我比较推崇Google Style风格。</p>
<h3 id="文档字符串"><a href="#文档字符串" class="headerlink" title="文档字符串"></a>文档字符串</h3><p>什么是文档字符串(Document String):<br>文档字符串是包, 模块, 类或函数里的第一个语句. 这些字符串可以通过对象的<code>__doc__</code>成员被自动提取, 并且被pydoc所用.</p>
<p>文档字符串的格式:<br>首先是一行以句号, 问号或惊叹号结尾的概述(或者该文档字符串单纯只有一行). 接着是一个空行. 接着是文档字符串剩下的部分,它应该与文档字符串的第一行的第一个引号对齐. 下面有更多文档字符串的格式化规范.</p>
<h3 id="模块文档"><a href="#模块文档" class="headerlink" title="模块文档"></a>模块文档</h3><p>模块说明: 对这个模块进行概貌性的描述, 比如Json库的说明<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="string">r"""JSON (JavaScript Object Notation) &lt;http://json.org&gt; is a subset of</span></div><div class="line">JavaScript syntax (ECMA-262 3rd edition) used as a lightweight data</div><div class="line">interchange format.</div><div class="line"></div><div class="line">:mod:`json` exposes an API familiar to users of the standard library</div><div class="line">:mod:`marshal` and :mod:`pickle` modules. It is the externally maintained</div><div class="line">version of the :mod:`json` library contained in Python 2.6, but maintains</div><div class="line">compatibility with Python 2.4 and Python 2.5 and (currently) has</div><div class="line">significant performance advantages, even without using the optional C</div><div class="line">extension for speedups.</div><div class="line"></div><div class="line">Compact encoding::</div><div class="line"></div><div class="line">    &gt;&gt;&gt; import json</div><div class="line">    &gt;&gt;&gt; json.dumps([1,2,3,&#123;'4': 5, '6': 7&#125;], sort_keys=True, separators=(',',':'))</div><div class="line">    '[1,2,3,&#123;"4":5,"6":7&#125;]'</div><div class="line"></div><div class="line">Using json.tool from the shell to validate and pretty-print::</div><div class="line"></div><div class="line">    $ echo '&#123;"json":"obj"&#125;' | python -m json.tool</div><div class="line">    &#123;</div><div class="line">        "json": "obj"</div><div class="line">    &#125;</div><div class="line">    $ echo '&#123; 1.2:3.4&#125;' | python -m json.tool</div><div class="line">    Expecting property name enclosed in double quotes: line 1 column 3 (char 2)</div><div class="line">"""</div></pre></td></tr></table></figure></p>
<h3 id="函数和方法文档"><a href="#函数和方法文档" class="headerlink" title="函数和方法文档"></a>函数和方法文档</h3><p>这里说的函数,包括函数, 方法, 以及生成器。 一个函数必须要有文档字符串, 除非它满足以下条件:</p>
<ul>
<li>外部不可见</li>
<li>非常短小</li>
<li>简单明了</li>
</ul>
<p>文档字符串应该提供足够的信息, 当别人编写代码调用该函数时, 他不需要看一行代码, 只要看文档字符串就可以了.因此需要描述清楚以下几点:</p>
<ul>
<li><p>函数参数: Args<br>列出每个参数的名字, 并在名字后使用一个冒号和一个空格, 分隔对该参数的描述.如果描述太长超过了单行80字符,使用2或者4个空格的悬挂缩进(与文件其他部分保持一致). 描述应该包括所需的类型和含义. 如果一个函数接受<em>foo(可变长度参数列表)或者**bar (任意关键字参数), 应该详细列出</em>foo和**bar.</p>
</li>
<li><p>正常返回: Returns/Yields<br>描述返回值的类型和语义. 如果函数返回None, 这一部分可以省略.</p>
</li>
<li><p>异常返回: Raises:<br>列出与接口有关的所有异常.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_bigtable_rows</span><span class="params">(big_table, keys, other_silly_variable=None)</span>:</span></div><div class="line">    <span class="string">"""Fetches rows from a Bigtable.</span></div><div class="line"></div><div class="line">    Retrieves rows pertaining to the given keys from the Table instance</div><div class="line">    represented by big_table.  Silly things may happen if</div><div class="line">    other_silly_variable is not None.</div><div class="line"></div><div class="line">    Args:</div><div class="line">        big_table: An open Bigtable Table instance.</div><div class="line">        keys: A sequence of strings representing the key of each table row</div><div class="line">            to fetch.</div><div class="line">        other_silly_variable: Another optional variable, that has a much</div><div class="line">            longer name than the other args, and which does nothing.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        A dict mapping keys to the corresponding table row data</div><div class="line">        fetched. Each row is represented as a tuple of strings. For</div><div class="line">        example:</div><div class="line"></div><div class="line">        &#123;'Serak': ('Rigel VII', 'Preparer'),</div><div class="line">         'Zim': ('Irk', 'Invader'),</div><div class="line">         'Lrrr': ('Omicron Persei 8', 'Emperor')&#125;</div><div class="line"></div><div class="line">        If a key from the keys argument is missing from the dictionary,</div><div class="line">        then that row was not found in the table.</div><div class="line"></div><div class="line">    Raises:</div><div class="line">        IOError: An error occurred accessing the bigtable.Table object.</div><div class="line">    """</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="类文档"><a href="#类文档" class="headerlink" title="类文档"></a>类文档</h3><p>同理类也需要做详尽的描述:</p>
<ul>
<li>该类的目的, 以及概貌描述</li>
<li>类有公共属性(Attributes), 需要描述其意义</li>
<li>注意事项</li>
<li>继承object, 因为object实现了一些内置方法,方便兼容。 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleClass</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""Summary of class here.</span></div><div class="line"></div><div class="line">    Longer class information....</div><div class="line">    Longer class information....</div><div class="line"></div><div class="line">    Attributes:</div><div class="line">        likes_spam: A boolean indicating if we like SPAM or not.</div><div class="line">        eggs: An integer count of the eggs we have laid.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, likes_spam=False)</span>:</span></div><div class="line">        <span class="string">"""Inits SampleClass with blah."""</span></div><div class="line">        self.likes_spam = likes_spam</div><div class="line">        self.eggs = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">public_method</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Performs operation blah."""</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="TODO注释"><a href="#TODO注释" class="headerlink" title="TODO注释"></a>TODO注释</h3><p>如果类或者方法，函数 没有实现完整功能, 请使用TODO标记, 很多IDE都能找到这个标记, 方便以后改进, 别留坑.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># TODO(kl@gmail.com): Use a "*" here for string repetition.</span></div><div class="line"><span class="comment"># TODO(Zeke) Change this to use relations.</span></div></pre></td></tr></table></figure></p>
<h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><p>合理的访问控制会使得代码更加健壮</p>
<ul>
<li><code>__slots__</code>: 控制对象可以绑定的属性, 避免对象被临时添加属性，造成对象的不可预期行为。</li>
<li><code>@property</code>: 通过属性装饰器控制属性的读和写的行为, 防止不符合规范数据的录入。</li>
<li><code>__</code>或者<code>_</code>: 使用下划线开头的变量，为私有变量(只是别名了, 你真想访问还是有办法的, 但是请不要这样做)。</li>
<li><code>__all__</code>: 对于from import来说, 导出指定对象, 防止导出全局变量。</li>
</ul>
<p>注意: 对暴露出去的共有变量请慎重, 因为如果你暴露出去过会, 下次在调整就需要考虑到兼容性了, 所以优先使用私有变量(<code>__</code>或者<code>_</code>)。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    __slots__ = [<span class="string">'birth'</span>, <span class="string">'age'</span>]</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._birth</div><div class="line"></div><div class="line"><span class="meta">    @birth.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span><span class="params">(self, value)</span>:</span></div><div class="line">        self._birth = value</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="number">2015</span> - self._birth</div></pre></td></tr></table></figure>
<h2 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h2><p>Python库的命名约定有点混乱，不可能完全一致。但依然有些普遍推荐的命名规范的。新的模块和包 (包括第三方的框架) 应该遵循这些标准。对不同风格的已有的库，建议保持内部的一致性。</p>
<ul>
<li>包和模块名: 模块名要简短，全部用小写字母，可使用下划线以提高可读性。包名和模块名类似，但不推荐使用下划线</li>
<li>类名: 遵循CapWord。</li>
<li>函数和方法的参数: 实例方法第一个参数是 ‘self’。类方法第一个参数是 ‘cls’。如果函数的参数名与保留关键字冲突，通常在参数名后加一个下划线。</li>
<li>方法名和实例变量: 同函数命名规则。</li>
<li>非公开方法和实例变量增加一个前置下划线。</li>
<li>为避免与子类命名冲突，采用两个前置下划线来触发重整。类Foo属性名为<code>__a</code>， 不能以 <code>Foo.__a</code>访问。(执著的用户还是可以通过<code>Foo._Foo__a</code>。) 通常双前置下划线仅被用来避免与基类的属性发生命名冲突。</li>
<li>函数名: 函数名应该为小写，必要时可用下划线分隔单词以增加可读性。 mixedCase(混合大小写)仅被允许用于兼容性考虑(如: threading.py)。</li>
<li>异常名: 如果确实是错误，需要在类名添加后缀 “Error”。</li>
<li>全局变量名: 变量尽量只用于模块内部，约定类似函数。</li>
<li>对设计为通过 “from M import ” 来使用的模块，应采用<code>__all__</code>机制来防止导入全局变量；或者为全局变量加一个前置下划线。</li>
<li>常量: 常量通常在模块级定义,由大写字母用下划线分隔组成。比如括MAX_OVERFLOW和TOTAL。</li>
</ul>
<h2 id="合理的设计"><a href="#合理的设计" class="headerlink" title="合理的设计"></a>合理的设计</h2><h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><p>考虑类的方法和实例变量(统称为属性)是否公开。如果有疑问，选择不公开；把其改为公开比把公开属性改为非公开要容易。<br>公开属性可供所有人使用，并通常向后兼容。非公开属性不给第三方使用、可变甚至被移除。<br>这里不使用术语”private”， Python中没有属性是真正私有的。<br>另一类属性是子类API(在其他语言中通常称为 “protected”)。 一些类被设计为基类，可以扩展和修改。</p>
<p>谨记这些Python指南：</p>
<ul>
<li>公开属性应该没有前导下划线</li>
<li>如果公开属性名和保留关键字冲突，可以添加后置下划线</li>
<li>简单的公开数据属性，最好只公开属性名，没有复杂的访问/修改方法，python的Property提供了很好的封装方法。 如果不希望子类使用的属性，考虑用两个前置下划线(没有后置下划线)命名</li>
<li>任何向后兼容的保证只适用于公共接口。</li>
<li>文档化的接口通常是公共的，除非明说明是临时的或为内部接口、其他所有接口默认是内部的。</li>
<li>为了更好地支持内省，模块要在<code>__all__</code>属性列出公共API。</li>
<li>内部接口要有前置下划线。</li>
<li>如果命名空间(包、模块或类)是内部的，里面的接口也是内部的。</li>
<li>导入名称应视为实现细节。其他模块不能间接访名字，除非在模块的API文档中明确记载，如os.path中或包的<code>__init__</code>暴露了子模块。</li>
</ul>
<h3 id="函数设计"><a href="#函数设计" class="headerlink" title="函数设计"></a>函数设计</h3><p>当流程足够繁杂时，就要考虑函数，及如何将函数组合在一起。在Python中做函数设计，主要考虑到函数大小、聚合性、耦合性三个方面，这三者应该归结于规划与设计的范畴。高内聚、低耦合则是任何语言函数设计的总体原则。</p>
<ul>
<li>如何将任务分解成更有针对性的函数从而导致了聚合性</li>
<li>如何设计函数间的通信则又涉及到耦合性</li>
<li>如何设计函数的大小用以加强其聚合性及降低其耦合性</li>
</ul>
<p>聚合</p>
<ul>
<li>完美的程序设计，每个函数应该而且只需做一件事</li>
<li>比如说:把大象放进冰箱分三步:把门打开、把大象放进去、把门关上。</li>
<li>这样就应该写三个函数而不是一个函数拿所有的事全做了。这样结构清晰，层次分明，也好理解！</li>
</ul>
<p>大小</p>
<ul>
<li>Python代码以简单明了著称，一个过长或者有着深层嵌套的函数往往成为设计缺陷的征兆。</li>
<li>如果项目中设计的一个函数需要翻页才能看完的话，就要考虑将函数拆分了。</li>
</ul>
<p>耦合</p>
<ul>
<li>参数传入，return结果, 这样做可以让函数独立于它外部的东西。参数和return语句就是隔离外部依赖的最好的办法。</li>
<li>慎用全局变量, 全局变量通常是一种蹩脚的函数间的进行通信的方式。它会引发依赖关系和计时的问题，从而会导致程序调试和修改的困难。而且从代码及性能优化来考虑，本地变量远比全局变量快。</li>
<li>避免修改可变类型的参数（或者直接避免传入可变类型的参数，而使用<em>args， 或者*</em>kwargs 收集）Python数据类型比如说列表、字典属于可变对象。在作为参数传递给函数时，有时会像全局变量一样被修改。这样做的坏处是：增强了函数之间的耦合性，从而导致函数过于特殊和不友好。维护起来也困难。这个时候就要考虑使用切片S[:]和copy模块中的copy()函数和deepcopy()函数来做个拷贝，避免修改可变对象</li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="external">PEP8官方文档</a></li>
<li><a href="https://my.oschina.net/u/1433482/blog/464444" target="_blank" rel="external">PEP8中文翻译</a></li>
<li><a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/background/" target="_blank" rel="external">Google Python风格指南</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做项目一直使用Golang, 距离上次使用Python已经半年之久了, 对于Go来说有fmt帮忙格式化, 解决了绝大部分编码风格问题, 而Python则需要自己注意,根据官方指导PEP8或者一些最佳实践比如Google Style来控制风格。时间久了 一些细节部分就忘记了, 于是翻阅之前写的博客, 受益良多, 于是打算把之前的这几篇博客迁移过来, 顺便更新, 方便以后查阅。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="pythonic" scheme="https://blog.yumaojun.net/tags/pythonic/"/>
    
  </entry>
  
  <entry>
    <title>MySQL批量更新与插入</title>
    <link href="https://blog.yumaojun.net/2017/06/19/mysql-performance-for-bulk-action/"/>
    <id>https://blog.yumaojun.net/2017/06/19/mysql-performance-for-bulk-action/</id>
    <published>2017-06-19T02:09:57.000Z</published>
    <updated>2017-06-21T06:24:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直使用gorm来操作数据库, 但当遇到一些批量操作时,感觉性能很差, 原因很简单, gorm是一条一条的执行的,效率很低, 所以对于批量操作, 特别是对于大量record需要创建或者修改时, 直接使用SQL, 才是正确的选择。<br><a id="more"></a></p>
<h2 id="调整MySQL配置-MariaDB10"><a href="#调整MySQL配置-MariaDB10" class="headerlink" title="调整MySQL配置(MariaDB10)"></a>调整MySQL配置(MariaDB10)</h2><ul>
<li>bulk_insert_buffer_size: 调整批量插入缓冲， 默认是16M, 为了能支持更大数据的批量插入, 按需调整, 我这里调整到128M</li>
<li>net_buffer_length: 客户发出的SQL语句期望的长度, 默认是16K。如果语句超过这个长度，缓冲区自动地被扩大，直到max_allowed_packet个字节, 我调整到128K</li>
<li>max_allowed_packet: 一个包的最大尺寸, 默认也是16M。消息缓冲区被初始化为net_buffer_length字节，但是可在需要时增加到max_allowed_packet个字节, 我也调整到128M</li>
</ul>
<p>将这些配置写入MySQL的配置文件中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bulk_insert_buffer_size = 128M</div><div class="line">net_buffer_length = 128K</div><div class="line">max_allowed_packet = 128M</div></pre></td></tr></table></figure></p>
<p>从启MySQL查看这些全局变量是否生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</div><div class="line">Your MariaDB connection id is 142</div><div class="line">Server version: 10.1.21-MariaDB-1~jessie mariadb.org binary distribution</div><div class="line"></div><div class="line">Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.</div><div class="line"></div><div class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> help. Type <span class="string">'\c'</span> to clear the current input statement.</div><div class="line"></div><div class="line">MariaDB [(none)]&gt; show variables like <span class="string">"bulk_insert_buffer_size"</span>;</div><div class="line">+-------------------------+----------+</div><div class="line">| Variable_name           | Value    |</div><div class="line">+-------------------------+----------+</div><div class="line">| bulk_insert_buffer_size | 16777216 |</div><div class="line">+-------------------------+----------+</div><div class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div><div class="line"></div><div class="line">MariaDB [(none)]&gt; show variables like <span class="string">"net_buffer_length"</span>;</div><div class="line">+-------------------+-------+</div><div class="line">| Variable_name     | Value |</div><div class="line">+-------------------+-------+</div><div class="line">| net_buffer_length | 16384 |</div><div class="line">+-------------------+-------+</div><div class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div><div class="line"></div><div class="line">MariaDB [(none)]&gt; show variables like <span class="string">"max_allowed_packet"</span>;</div><div class="line">+--------------------+----------+</div><div class="line">| Variable_name      | Value    |</div><div class="line">+--------------------+----------+</div><div class="line">| max_allowed_packet | 16777216 |</div><div class="line">+--------------------+----------+</div><div class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div></pre></td></tr></table></figure></p>
<h2 id="使用事务"><a href="#使用事务" class="headerlink" title="使用事务"></a>使用事务</h2><p>批量创建和修改多条记录时, 如果使用了多条语句, 请一定使用事物, 因为这些动作是一个事物, 避免部分成功,部分失败 造成数据不一致的问题。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">tx,_ := db.Begin()  </div><div class="line">stm,_ := Tx.Preapare(<span class="string">"insert into test values(?,null)"</span>)  </div><div class="line">result,err := stm.Exec(<span class="string">'123'</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">    tx.Commit()</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    tx.Rollback()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h2><p>批量插入的方法一般包含: </p>
<ul>
<li>直接循环提供(非常不推荐)</li>
<li>基于事物的循环提交</li>
<li>利用INSERT INTO的多值插入语句</li>
</ul>
<p>这里以插入10000条数据为例进行测试, 关于下面的测试代码见: <a href="https://github.com/yumaojun03/golang/blob/master/mysql/bulk_perf_test.go" target="_blank" rel="external">测试代码完整示例</a></p>
<h3 id="直接循环提交"><a href="#直接循环提交" class="headerlink" title="直接循环提交"></a>直接循环提交</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用For循环执行</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">forInsert</span><span class="params">()</span></span> &#123;</div><div class="line">	start := time.Now()</div><div class="line"></div><div class="line">	stmt, err := db.Prepare(<span class="string">`INSERT user (user_name,user_age,user_sex) values (?,?,?)`</span>)</div><div class="line">	checkErr(err)</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</div><div class="line">		name := <span class="string">"tony"</span> + strconv.Itoa(i)</div><div class="line">		_, err := stmt.Exec(name, i, <span class="number">1</span>)</div><div class="line">		checkErr(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	delta := time.Now().Sub(start).String()</div><div class="line">	fmt.Println(<span class="string">"For Insert Total Time: "</span>, delta)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="基于事物循环提交"><a href="#基于事物循环提交" class="headerlink" title="基于事物循环提交"></a>基于事物循环提交</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在一个事物内循环执行</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">withTxInsert</span><span class="params">()</span></span> &#123;</div><div class="line">	start := time.Now()</div><div class="line"></div><div class="line">	tx, err := db.Begin()</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	stmt, err := tx.Prepare(<span class="string">`INSERT user (user_name,user_age,user_sex) values (?,?,?)`</span>)</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</div><div class="line">		name := <span class="string">"tony"</span> + strconv.Itoa(i)</div><div class="line">		_, err := stmt.Exec(name, i, <span class="number">1</span>)</div><div class="line">		checkErr(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		err := tx.Rollback()</div><div class="line">		checkErr(err)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	err = tx.Commit()</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	delta := time.Now().Sub(start).String()</div><div class="line">	fmt.Println(<span class="string">"Bulk With Transaction Insert Total Time: "</span>, delta)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="构造成一条语句提交"><a href="#构造成一条语句提交" class="headerlink" title="构造成一条语句提交"></a>构造成一条语句提交</h3><p>SQL样例: “INSERT INTO table (field1,field2,field3) VALUES (‘a’,’b’,’c’), (‘a’,’b’,’c’),(‘a’,’b’,’c’);”<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 构造一条Insert语句批量提交</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">bulkoneInsert</span><span class="params">()</span></span> &#123;</div><div class="line">	start := time.Now()</div><div class="line"></div><div class="line">	sql := <span class="string">"INSERT INTO `user` (`user_name`,`user_age`,`user_sex`) VALUES "</span></div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</div><div class="line">		name := <span class="string">"tony"</span> + strconv.Itoa(i)</div><div class="line">		<span class="keyword">if</span> i &lt; <span class="number">10000</span> &#123;</div><div class="line">			sql += fmt.Sprintf(<span class="string">"('%s','%d','%d'),"</span>, name, i, <span class="number">1</span>)</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			sql += fmt.Sprintf(<span class="string">"('%s','%d','%d');"</span>, name, i, <span class="number">1</span>)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// fmt.Println(sql)</span></div><div class="line">	tx, err := db.Begin()</div><div class="line">	checkErr(err)</div><div class="line">	_, err = tx.Exec(sql)</div><div class="line">	<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</div><div class="line">		tx.Commit()</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">		tx.Rollback()</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	delta := time.Now().Sub(start).String()</div><div class="line">	fmt.Println(<span class="string">"Bulk One Insert Total Time: "</span>, delta)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最对3种状况的插入时间排名:</p>
<table>
<thead>
<tr>
<th>Ranking</th>
<th style="text-align:center">Function Name</th>
<th style="text-align:center">Time</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td style="text-align:center">bulkoneInsert</td>
<td style="text-align:center">283.548003ms</td>
</tr>
<tr>
<td>2</td>
<td style="text-align:center">withTxInsert</td>
<td style="text-align:center">4.047390845s</td>
</tr>
<tr>
<td>3</td>
<td style="text-align:center">forInsert</td>
<td style="text-align:center">1m55.580310398s</td>
</tr>
</tbody>
</table>
<p>结论很明显: <strong>构造一条SQL插入效率高很多</strong></p>
<h2 id="批量更新"><a href="#批量更新" class="headerlink" title="批量更新"></a>批量更新</h2><p>我们可以使用多个<code>UPDATE</code>语句批量提交, 同时MySQL也支持一个SQL语句批量更新多条记录, 标准的SQL是使用<code>UPDATE WHEN</code>来实现, 除此之外 他的SQL扩展还支持<code>INSERT INTO</code> 和<code>REPLACE INTO</code>用于record的批量更新, 但是最好别用REPLACE INTO, 因为他是先删除再新增, 因此本质上它不是更新操作, <code>因为删除后, 更新时缺少某些字段的话, 会导致数据丢失, 这在业务上是绝对不允许的, 请谨慎使用 REPLACE INTO</code>。而INSERT INTO则不会这样。 最后使用临时表也能进行批量更新(先更新临时表，然后从临时表中update),效率也相当不错,但是需要用户有temporary表的create权限, 因此使用也受限。<br>我一般会使用INSERT INTO来构造批量更新的SQL, 因为该语法方便构造, 下面会对各种操作做简单的性能对比。</p>
<p>这里以更新10000条数据为例进行测试(基于上面插入的数据), 关于下面的测试代码见: <a href="https://github.com/yumaojun03/golang/blob/master/mysql/bulk_perf_test.go" target="_blank" rel="external">测试代码完整示例</a></p>
<h3 id="循环更新"><a href="#循环更新" class="headerlink" title="循环更新"></a>循环更新</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 循环更新</span></div><div class="line"><span class="comment">// UPDATE table SET column1=?,column2=? WHERE column=?</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">withTxUpdate</span><span class="params">()</span></span> &#123;</div><div class="line">	start := time.Now()</div><div class="line"></div><div class="line">	tx, err := db.Begin()</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	stmt, err := tx.Prepare(<span class="string">"UPDATE `user` SET `user_name`=? WHERE `user_id`=?;"</span>)</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</div><div class="line">		name := <span class="string">"forupdate"</span> + strconv.Itoa(i)</div><div class="line">		_, err := stmt.Exec(name, i+<span class="number">1</span>)</div><div class="line">		checkErr(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		err := tx.Rollback()</div><div class="line">		checkErr(err)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	err = tx.Commit()</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	delta := time.Now().Sub(start).String()</div><div class="line">	fmt.Println(<span class="string">"Bulk With Transaction Update Total Time: "</span>, delta)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="标准的UPDATE语句批量更新"><a href="#标准的UPDATE语句批量更新" class="headerlink" title="标准的UPDATE语句批量更新"></a>标准的UPDATE语句批量更新</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 标准Update语句更新</span></div><div class="line"><span class="comment">// UPDATE categories</span></div><div class="line"><span class="comment">//     SET dingdan = CASE id</span></div><div class="line"><span class="comment">//         WHEN 1 THEN 3</span></div><div class="line"><span class="comment">//         WHEN 2 THEN 4</span></div><div class="line"><span class="comment">//         WHEN 3 THEN 5</span></div><div class="line"><span class="comment">//     END,</span></div><div class="line"><span class="comment">//     title = CASE id</span></div><div class="line"><span class="comment">//         WHEN 1 THEN 'New Title 1'</span></div><div class="line"><span class="comment">//         WHEN 2 THEN 'New Title 2'</span></div><div class="line"><span class="comment">//         WHEN 3 THEN 'New Title 3'</span></div><div class="line"><span class="comment">//     END</span></div><div class="line"><span class="comment">// WHERE id IN (1,2,3)</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">bulkStandardUpdate</span><span class="params">()</span></span> &#123;</div><div class="line">	start := time.Now()</div><div class="line"></div><div class="line">	core := <span class="string">""</span></div><div class="line">	where := <span class="string">""</span></div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</div><div class="line">		name := <span class="string">"standardupdate"</span> + strconv.Itoa(i)</div><div class="line">		core += fmt.Sprintf(<span class="string">"WHEN '%d' THEN '%s' "</span>, i+<span class="number">1</span>, name)</div><div class="line">		<span class="keyword">if</span> i == <span class="number">0</span> &#123;</div><div class="line">			where += fmt.Sprintf(<span class="string">"'%d'"</span>, i+<span class="number">1</span>)</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			where += fmt.Sprintf(<span class="string">",'%d'"</span>, i+<span class="number">1</span>)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	sql := fmt.Sprintf(<span class="string">"UPDATE `user` SET `user_name`= CASE `user_id` %s END WHERE `user_id` IN (%s)"</span>, core, where)</div><div class="line"></div><div class="line">	tx, err := db.Begin()</div><div class="line">	checkErr(err)</div><div class="line">	_, err = tx.Exec(sql)</div><div class="line">	<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</div><div class="line">		tx.Commit()</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">		tx.Rollback()</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	delta := time.Now().Sub(start).String()</div><div class="line">	fmt.Println(<span class="string">"Bulk Standard Update Total Time: "</span>, delta)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="SQL扩展-INSERT-INTO-…-ON-DUPLICATE-KEY-UPDATE"><a href="#SQL扩展-INSERT-INTO-…-ON-DUPLICATE-KEY-UPDATE" class="headerlink" title="SQL扩展(INSERT INTO … ON DUPLICATE KEY UPDATE)"></a>SQL扩展(INSERT INTO … ON DUPLICATE KEY UPDATE)</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// insert into语句更新</span></div><div class="line"><span class="comment">// INSERT INTO test_tbl (id,dr) VALUES (1,'2'),(2,'3'),...(x,'y') ON DUPLICATE KEY UPDATE dr=values(dr);</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">bulkInsertIntoUpdate</span><span class="params">()</span></span> &#123;</div><div class="line">	start := time.Now()</div><div class="line"></div><div class="line">	core := <span class="string">""</span></div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</div><div class="line">		name := <span class="string">"insertintoupdate"</span> + strconv.Itoa(i)</div><div class="line">		<span class="keyword">if</span> i == <span class="number">0</span> &#123;</div><div class="line">			core += fmt.Sprintf(<span class="string">"('%d', '%s')"</span>, i+<span class="number">1</span>, name)</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			core += fmt.Sprintf(<span class="string">",('%d', '%s')"</span>, i+<span class="number">1</span>, name)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	sql := fmt.Sprintf(<span class="string">"INSERT INTO `user` (`user_id`, `user_name`) VALUES %s ON DUPLICATE KEY UPDATE `user_name`=values(`user_name`);"</span>, core)</div><div class="line"></div><div class="line">	tx, err := db.Begin()</div><div class="line">	checkErr(err)</div><div class="line">	_, err = tx.Exec(sql)</div><div class="line">	<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</div><div class="line">		tx.Commit()</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">		tx.Rollback()</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	delta := time.Now().Sub(start).String()</div><div class="line">	fmt.Println(<span class="string">"Bulk Insert Into Update Total Time: "</span>, delta)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="SQL扩展-REPLACE-INTO"><a href="#SQL扩展-REPLACE-INTO" class="headerlink" title="SQL扩展(REPLACE INTO)"></a>SQL扩展(REPLACE INTO)</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// replace inot语句更新</span></div><div class="line"><span class="comment">// REPLACE INTO test_tbl (id,dr) VALUES (1,'2'),(2,'3'),...(x,'y');</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">bulkReplaceIntoUpdate</span><span class="params">()</span></span> &#123;</div><div class="line">	start := time.Now()</div><div class="line"></div><div class="line">	core := <span class="string">""</span></div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</div><div class="line">		name := <span class="string">"replaceintoupdate"</span> + strconv.Itoa(i)</div><div class="line">		<span class="keyword">if</span> i == <span class="number">0</span> &#123;</div><div class="line">			core += fmt.Sprintf(<span class="string">"('%d', '%s')"</span>, i+<span class="number">1</span>, name)</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			core += fmt.Sprintf(<span class="string">",('%d', '%s')"</span>, i+<span class="number">1</span>, name)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	sql := fmt.Sprintf(<span class="string">"REPLACE INTO `user` (`user_id`, `user_name`) VALUES %s;"</span>, core)</div><div class="line"></div><div class="line">	tx, err := db.Begin()</div><div class="line">	checkErr(err)</div><div class="line">	_, err = tx.Exec(sql)</div><div class="line">	<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</div><div class="line">		tx.Commit()</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">		tx.Rollback()</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	delta := time.Now().Sub(start).String()</div><div class="line">	fmt.Println(<span class="string">"Bulk Replace Into Update Total Time: "</span>, delta)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>最对4种状况的插入时间排名:</p>
<table>
<thead>
<tr>
<th>Ranking</th>
<th style="text-align:center">Function Name</th>
<th style="text-align:center">Time</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td style="text-align:center">bulkInsertIntoUpdate</td>
<td style="text-align:center">462.575115ms</td>
</tr>
<tr>
<td>2</td>
<td style="text-align:center">bulkReplaceIntoUpdate</td>
<td style="text-align:center">564.974107ms</td>
</tr>
<tr>
<td>3</td>
<td style="text-align:center">bulkStandardUpdate</td>
<td style="text-align:center">3.160858907s</td>
</tr>
<tr>
<td>4</td>
<td style="text-align:center">withTxUpdate</td>
<td style="text-align:center">3.998437161s</td>
</tr>
</tbody>
</table>
<p>结论很明显: <strong>InsertInto更新效率高很多</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直使用gorm来操作数据库, 但当遇到一些批量操作时,感觉性能很差, 原因很简单, gorm是一条一条的执行的,效率很低, 所以对于批量操作, 特别是对于大量record需要创建或者修改时, 直接使用SQL, 才是正确的选择。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="MySQL" scheme="https://blog.yumaojun.net/tags/MySQL/"/>
    
  </entry>
  
</feed>
