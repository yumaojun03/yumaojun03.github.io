<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>紫川秀的博客</title>
  <subtitle>比你优秀的人不可怕,可怕的是比你优秀的人比你更努力。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.yumaojun.net/"/>
  <updated>2017-07-06T05:22:46.000Z</updated>
  <id>https://blog.yumaojun.net/</id>
  
  <author>
    <name>紫川秀</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>物联网之MQTT</title>
    <link href="https://blog.yumaojun.net/2017/07/05/mqtt-introduce/"/>
    <id>https://blog.yumaojun.net/2017/07/05/mqtt-introduce/</id>
    <published>2017-07-05T04:46:42.000Z</published>
    <updated>2017-07-06T05:22:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>是时候搞IOT了<br><a id="more"></a></p>
<h2 id="MQTT简介"><a href="#MQTT简介" class="headerlink" title="MQTT简介"></a>MQTT简介</h2><p>MQTT是一个客户端服务端架构的发布/订阅模式的消息传输协议。它的设计思想是轻巧、开放、简单、规范，易于实现。这些特点使得它对很多场景来说都是很好的选择，特别是对于受限的环境如机器与机器的通信(M2M)以及物联网环境(IoT)。<br>总体来说MQTT有如下特性:</p>
<ul>
<li>轻量级的 machine-to-machine 通信协议。</li>
<li>publish/subscribe模式。</li>
<li>基于TCP/IP。</li>
<li>支持QoS。</li>
<li>适合于低带宽、不可靠连接、嵌入式设备、CPU内存资源紧张。</li>
<li>是一种比较不错的Android消息推送方案。</li>
<li>FacebookMessenger采用了MQTT。</li>
<li>MQTT有可能成为物联网的重要协议</li>
</ul>
<p><img src="http://www.eeiot.com/Public/Upload/attached/image/20150529/20150529151253_23315.jpg" alt="基于MQTT的物联网架构"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;是时候搞IOT了&lt;br&gt;
    
    </summary>
    
    
      <category term="mqtt" scheme="https://blog.yumaojun.net/tags/mqtt/"/>
    
  </entry>
  
  <entry>
    <title>Python的mqtt客户端使用说明</title>
    <link href="https://blog.yumaojun.net/2017/07/04/mqtt-reconnect/"/>
    <id>https://blog.yumaojun.net/2017/07/04/mqtt-reconnect/</id>
    <published>2017-07-04T07:21:58.000Z</published>
    <updated>2017-07-06T05:15:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用Python写一个后台服务处理mqtt里面的事件时遇到了一个麻烦: mqtt连接重置时(重启mqtt服务后), 之前pub消息的线程不能正常工作了, 经过多次踩坑, 终于解决. 引发问题的原因是我使用姿势不对造成的, 一旦你使用姿势不对 会造成一些奇怪的问题,并且很难解决。 因此请正确使用mqtt。<br><a id="more"></a></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>关于MQTT协议的介绍请参考之前博客: <a href="/2017/07/05/mqtt-introduce/" title="物联网之MQTT">物联网之MQTT</a>, 只有在了解MQTT协议过后, 我们才能以正确的姿势使用她, 以下是我觉得需要注意的地方:</p>
<ul>
<li>按需使用MQTT的Qos, 当Qos=2时可靠性最高, 但是会损失性能。</li>
<li>尽量使用<code>client_id</code>来标示客户端, 但是注意 如果2个客户端使用同一个<code>client_id</code>, 会出现client争抢连接的状态, 所以全局持有一个client是不错的选择。</li>
<li>注意异步处理, 在回调函数中不能阻塞。</li>
<li>将所有数据处理逻辑放到回调函数里面, 防止链接重置时，漏掉处理逻</li>
<li>在on_message的回调里面 处理所有的订阅消息</li>
<li>断开连接时尽量从新连接, 避免mqtt离线后, 重新上线, 造成服务连接异常。(注意loop的返回, 保证loop网络事件持续处理中)</li>
</ul>
<h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><p>介绍下我的测试环境:</p>
<ul>
<li>Python Version: 3.6</li>
<li>MQTT Server: emqttserver:2.2-rc1</li>
<li>MQTT Client: paho-mqtt: 1.3.0</li>
</ul>
<p>emqtt server安装参考<a href="http://emqtt.io/docs/v2/install.html#install-via-docker-image" target="_blank" rel="external">emqtt docker安装</a><br>python mqtt客户端的安装请参考<a href="https://github.com/eclipse/paho.mqtt.python" target="_blank" rel="external">Github地址</a></p>
<h2 id="客户端使用介绍"><a href="#客户端使用介绍" class="headerlink" title="客户端使用介绍"></a>客户端使用介绍</h2><p>paho-mqtt有一个客户端类, 我们主要使用该类来和mqttserver进行交互, 那么如何使用这个类喃: </p>
<ul>
<li>建立连接: 使用connect()/connect_async()来链接到broker(mqtt server)</li>
<li>断开连接: 使用disconnect()方法来断开和broker(mqtt server)之间的网络连接。</li>
<li>处理网络事件: 请频繁调用loop()来维持和broker(mqtt server)之间的网络事件。如果不想自己频繁的调用这些来维护网络事件, 可以使用loop_forever()方法来处理,该方法会帮你循环调用loop, 因此该方法式一个阻塞的方法。如果不想在程序里面阻塞,可以使用loop_start()方法,该方法会启动一个线程在后台执行loop_forever。</li>
<li>订阅消息: 使用subscribe()方法来订阅topic和接收数据</li>
<li>发布消息: 使用publish()方法来发布消息</li>
</ul>
<p>mqtt的通信是异步的, 通过网络事件来进行回调处理, 因此我们基本采用回调来编程, 回调函数的签名如下, 所有的回调函数都2个固定参数: </p>
<blockquote>
<ol>
<li>client: 回调时传递来的客户端实例 </li>
<li>userdata: user的任何类型的数据, 实例化client时传入, 用户自己使用。</li>
</ol>
</blockquote>
<h3 id="on-connect-client-userdata-flags-rc"><a href="#on-connect-client-userdata-flags-rc" class="headerlink" title="on_connect(client, userdata, flags, rc)"></a>on_connect(client, userdata, flags, rc)</h3><p>当broker响应了我们链接之后调用, 涉及到的参数:</p>
<ul>
<li><p>flags: 是一个字典, 包含broker返回的响应标志<br>现在只有1中标准: session present, 通过flags[‘session present’]获取到该标准里面的内容, 当clean session为0时(clean_session=False), broker会保存client的的session信息, 该信息会在client重新上线时, 通过session present这个标志 返回给客户端。</p>
</li>
<li><p>rc: retrun code, 返回状态码</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>RC</th>
<th style="text-align:center">Status</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td style="text-align:center">successful</td>
<td style="text-align:center">connected</td>
</tr>
<tr>
<td>1</td>
<td style="text-align:center">refused</td>
<td style="text-align:center">incorrect protocol version</td>
</tr>
<tr>
<td>2</td>
<td style="text-align:center">refused</td>
<td style="text-align:center">invalid client identifier</td>
</tr>
<tr>
<td>3</td>
<td style="text-align:center">refused</td>
<td style="text-align:center">server unavailable</td>
</tr>
<tr>
<td>4</td>
<td style="text-align:center">refused</td>
<td style="text-align:center">bad username or password</td>
</tr>
<tr>
<td>5</td>
<td style="text-align:center">refused</td>
<td style="text-align:center">not authorised</td>
</tr>
<tr>
<td>6-255</td>
<td style="text-align:center">refused</td>
<td style="text-align:center">Currently unused</td>
</tr>
</tbody>
</table>
<h3 id="on-disconnect-client-userdata-rc"><a href="#on-disconnect-client-userdata-rc" class="headerlink" title="on_disconnect(client, userdata, rc)"></a>on_disconnect(client, userdata, rc)</h3><p>当client和broker断开连接时调用. rc表示断开连接是的状态</p>
<table>
<thead>
<tr>
<th>RC</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td style="text-align:center">MQTT_ERR_SUCCESS, 客户端调用disconnect()方法断开连接, 属于正常断开</td>
</tr>
<tr>
<td>1</td>
<td style="text-align:center">网络等其他原因照成的连接断开, 异常断开</td>
</tr>
</tbody>
</table>
<h3 id="on-message-client-userdata-message"><a href="#on-message-client-userdata-message" class="headerlink" title="on_message(client, userdata, message)"></a>on_message(client, userdata, message)</h3><p>当客户端订阅的topic上有数据 被接收时调用, message是一个MQTTMessage的类, 该类包含了message的所有数据:</p>
<ul>
<li>topic: 数据所在的topic</li>
<li>payload: message的数据部分</li>
<li>qos: 该消息的质量: 0, 1, 2</li>
<li>retain: 该消息是否是保留消息, 如果为True 这为保留消息, 如果为False就是最新的消息。</li>
<li>mid: message id</li>
</ul>
<h3 id="on-publish-client-userdata-mid"><a href="#on-publish-client-userdata-mid" class="headerlink" title="on_publish(client, userdata, mid)"></a>on_publish(client, userdata, mid)</h3><p>当使用publish方法将message传输到broker后调用, 但是这要针对不同的qos, 对于qos1和2而言, 这表示消息已经到达后的回调, 如果qos是0那么仅仅表示消息离开了客户端之后的回调。这个回调很重要，因为即使publish()调用返回成功，并不总是意味着已经发送了消息</p>
<ul>
<li>mid: 表示已经publish出去的消息的message id</li>
</ul>
<h3 id="on-subscribe-client-userdata-mid-granted-qos"><a href="#on-subscribe-client-userdata-mid-granted-qos" class="headerlink" title="on_subscribe(client, userdata, mid, granted_qos)"></a>on_subscribe(client, userdata, mid, granted_qos)</h3><p>当broker响应了subscribe请求之后调用。</p>
<ul>
<li>mid: 被订阅消息的message id</li>
<li>granted_qos: broker为不同的订阅请求授权的qos级别。是一个列表。</li>
</ul>
<h3 id="on-unsubscribe-client-userdata-mid"><a href="#on-unsubscribe-client-userdata-mid" class="headerlink" title="on_unsubscribe(client, userdata, mid)"></a>on_unsubscribe(client, userdata, mid)</h3><p>当broker响应了取消订阅的请求过后调用。</p>
<ul>
<li>mid: 取消订阅的消息的message id</li>
</ul>
<h3 id="on-log-client-userdata-level-buf"><a href="#on-log-client-userdata-level-buf" class="headerlink" title="on_log(client, userdata, level, buf)"></a>on_log(client, userdata, level, buf)</h3><p>MQTT通信过程中的一些Debug信息</p>
<ul>
<li>level: 日志级别MQTT_LOG_INFO, MQTT_LOG_NOTICE, MQTT_LOG_WARNING, MQTT_LOG_ERR, and MQTT_LOG_DEBUG</li>
<li>buf: message buffer, debug信息本身。</li>
</ul>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>我Github上有: <a href="https://github.com/yumaojun03/python/blob/master/mqtt/main.py" target="_blank" rel="external">完整示例代码</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="keyword">from</span> paho.mqtt.client <span class="keyword">import</span> Client</div><div class="line"></div><div class="line">FORMAT = <span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span></div><div class="line">logging.basicConfig(format=FORMAT, level=logging.INFO)</div><div class="line">logger = logging.getLogger()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pub_topic_test01</span><span class="params">(client)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        client.publish(topic=<span class="string">"test01"</span>, qos=<span class="number">2</span>, payload=<span class="string">"test01 topic data"</span>)</div><div class="line">        time.sleep(<span class="number">2</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pub_topic_test02</span><span class="params">(client)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        client.publish(topic=<span class="string">"test02"</span>, qos=<span class="number">2</span>, payload=<span class="string">"test02 topic data"</span>)</div><div class="line">        time.sleep(<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMQTTClass</span><span class="params">(Client)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    mqtt client for deal data</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(MyMQTTClass, self).__init__(client_id=<span class="string">"test client"</span>, clean_session=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_connect</span><span class="params">(self, client, obj, flags, rc)</span>:</span></div><div class="line">        logger.info(<span class="string">"on connect, rc: %s"</span> % rc)</div><div class="line"></div><div class="line">        <span class="comment"># 链接过后先处理sub</span></div><div class="line">        client.subscribe(topic=<span class="string">"test01"</span>, qos=<span class="number">2</span>)</div><div class="line">        client.subscribe(topic=<span class="string">"test02"</span>, qos=<span class="number">2</span>)</div><div class="line"></div><div class="line">        logger.info(<span class="string">"start topic service1..."</span>)</div><div class="line">        t1 = threading.Thread(target=pub_topic_test01, args=(client,))</div><div class="line">        t1.start()</div><div class="line">        self.worker1 = t1</div><div class="line"></div><div class="line">        logger.info(<span class="string">"start topic service2..."</span>)</div><div class="line">        t2 = threading.Thread(target=pub_topic_test02, args=(client,))</div><div class="line">        t2.start()</div><div class="line">        self.worker2 = t2</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_message</span><span class="params">(self, client, obj, msg)</span>:</span></div><div class="line">        logger.debug(<span class="string">"on message, topic: %s, qos: %s, data: %s"</span> % (msg.topic, msg.qos, msg.payload))</div><div class="line"></div><div class="line">        <span class="keyword">if</span> msg.topic == <span class="string">"test01"</span>:</div><div class="line">            logger.info(<span class="string">"deal test01, data: %s"</span> % msg.payload)</div><div class="line"></div><div class="line">        <span class="keyword">elif</span> msg.topic == <span class="string">"test02"</span>:</div><div class="line">            logger.info(<span class="string">"deal test02, data: %s"</span> % msg.payload)</div><div class="line"></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            logger.info(<span class="string">"other topic %s, data: %s"</span> %(msg.topic, msg.payload))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_publish</span><span class="params">(self, client, obj, mid)</span>:</span></div><div class="line">        logger.debug(<span class="string">"publish -&gt; ,mid: %s"</span> % mid)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_subscribe</span><span class="params">(self, client, obj, mid, granted_qos)</span>:</span></div><div class="line">        logger.debug(<span class="string">"subscribed &lt;- ,mid: %s, qos: %s"</span> %(mid, granted_qos))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_log</span><span class="params">(self, mqttc, obj, level, string)</span>:</span></div><div class="line">        logger.debug(<span class="string">"mqtt debug: %s"</span> % string)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_disconnect</span><span class="params">(self, client, userdata, rc)</span>:</span></div><div class="line">        logger.info(<span class="string">"disconnect: %s"</span> % rc)</div><div class="line"></div><div class="line">        <span class="keyword">while</span> rc == <span class="number">1</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                client.reconnect()</div><div class="line">                logger.info(<span class="string">"reconnect success"</span>)</div><div class="line">                rc = <span class="number">0</span></div><div class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                logger.error(<span class="string">"reconnect error, %s retry after 3s"</span> % e)</div><div class="line">                time.sleep(<span class="number">3</span>)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        self.connect(<span class="string">"172.16.112.251"</span>, <span class="number">1883</span>, <span class="number">60</span>)</div><div class="line"></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            rc = self.loop()</div><div class="line">            <span class="keyword">if</span> rc != <span class="number">0</span>:</div><div class="line">                time.sleep(<span class="number">1</span>)</div><div class="line">                rc = self.loop()</div><div class="line">                logger.info(<span class="string">"recovery from error loop, %s"</span> % rc)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    client = MyMQTTClass()</div><div class="line">    client.run()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近使用Python写一个后台服务处理mqtt里面的事件时遇到了一个麻烦: mqtt连接重置时(重启mqtt服务后), 之前pub消息的线程不能正常工作了, 经过多次踩坑, 终于解决. 引发问题的原因是我使用姿势不对造成的, 一旦你使用姿势不对 会造成一些奇怪的问题,并且很难解决。 因此请正确使用mqtt。&lt;br&gt;
    
    </summary>
    
    
      <category term="mqtt" scheme="https://blog.yumaojun.net/tags/mqtt/"/>
    
  </entry>
  
  <entry>
    <title>Python编码风格</title>
    <link href="https://blog.yumaojun.net/2017/06/24/python-style-pep8/"/>
    <id>https://blog.yumaojun.net/2017/06/24/python-style-pep8/</id>
    <published>2017-06-24T10:49:39.000Z</published>
    <updated>2017-06-27T05:33:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近做项目一直使用Golang, 距离上次使用Python已经半年之久了, 对于Go来说有fmt帮忙格式化, 解决了绝大部分编码风格问题, 而Python则需要自己注意,根据官方指导PEP8或者一些最佳实践比如Google Style来控制风格。时间久了 一些细节部分就忘记了, 于是翻阅之前写的博客, 受益良多, 于是打算把之前的这几篇博客迁移过来, 顺便更新, 方便以后查阅。<br><a id="more"></a></p>
<h2 id="关于本文"><a href="#关于本文" class="headerlink" title="关于本文"></a>关于本文</h2><p>本文主要参考PEP8(Python版本标准库的编码约定),以及Google Style编码风格, 但却不会完全按照PEP8进行翻译, 我不会贴出不合规范的代码, 尽量简洁易懂, 方便快速阅读, 如果想看完整版本的PEP8相关文档, 请移步参考文档部分。 </p>
<h2 id="风格指南的目的"><a href="#风格指南的目的" class="headerlink" title="风格指南的目的"></a>风格指南的目的</h2><p>风格指南的目的在于统一编码风格,让代码有规可循,这样人们就可以专注于”你在说什么”, 而不是”你在怎么说”.从而改善Python代码的可读性,即<a href="https://www.python.org/dev/peps/pep-0020/" target="_blank" rel="external">PEP 20</a>所说的“可读性计数”(Readability counts).</p>
<p>风格指针在于统一风格, PEP8仅仅是官方指导, 本地编码风格同样重要, 如果满足可读性, 优先保持本地风格, 使得你整体项目的代码风格一致。 </p>
<h2 id="代码布局"><a href="#代码布局" class="headerlink" title="代码布局"></a>代码布局</h2><ol>
<li><p>每级缩进用4个空格(强烈建议使用4个空格作为缩进), 不要混用空格和Tab, Python3中不允许混合使用Tab和空格缩进</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_version</span><span class="params">(version=None)</span>:</span></div><div class="line">    <span class="string">"Returns a PEP 386-compliant version number from VERSION."</span></div><div class="line">    version = get_complete_version(version)</div></pre></td></tr></table></figure>
</li>
<li><p>括号中使用垂直隐式缩进或使用悬挂缩进（对准左括号）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">foo = long_function_name(var_one, var_two,</div><div class="line">                         var_three, var_four)</div></pre></td></tr></table></figure>
</li>
<li><p>if语句跨行时，两个字符关键字(比如if)加上一个空格，再加上左括号构成了很好的缩进。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Add some extra indentation on the conditional continuation line.</span></div><div class="line"><span class="keyword">if</span> (this_is_one_thing</div><div class="line">        <span class="keyword">and</span> that_is_another_thing):</div><div class="line">    do_something()</div></pre></td></tr></table></figure>
</li>
<li><p>右边括号也可以另起一行（右括号回退）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">my_list = [</div><div class="line">    <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,</div><div class="line">    <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,</div><div class="line">]</div><div class="line">result = some_function_that_takes_arguments(</div><div class="line">    <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>,</div><div class="line">    <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>,</div><div class="line">)</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="最大行宽"><a href="#最大行宽" class="headerlink" title="最大行宽"></a>最大行宽</h2><p>限制所有行的最大行宽为79字符。文本长块，比如文档字符串或注释，行长度应限制为72个字符。<br>续行的首选方法是使用小括号、中括号和大括号反斜线仍可能在适当的时候。其次是反斜杠。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">'/path/to/some/file/you/want/to/read'</span>) <span class="keyword">as</span> file_1, \</div><div class="line">     open(<span class="string">'/path/to/some/file/being/written'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> file_2:</div><div class="line">    file_2.write(file_1.read())</div></pre></td></tr></table></figure></p>
<h2 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h2><ul>
<li>空二行: 顶级定义之间空两行, 比如函数或者类定义. </li>
<li>空一行: 方法定义, 类定义与第一个方法之间, 都应该空一行. 函数或方法中, 某些地方要是你觉得合适, 就空一行.<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamingHttpResponse</span><span class="params">(HttpResponseBase)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    A streaming HTTP response class with an iterator as content.</div><div class="line"> </div><div class="line">    This should only be iterated once, when the response is streamed to the</div><div class="line">    client. However, it can be appended to or replaced with a new iterator</div><div class="line">    that wraps the original content (or yields entirely new content).</div><div class="line">    """</div><div class="line"> </div><div class="line">    streaming = <span class="keyword">True</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, streaming_content=<span class="params">()</span>, *args, **kwargs)</span>:</span></div><div class="line">        super(StreamingHttpResponse, self).__init__(*args, **kwargs)</div><div class="line">        <span class="comment"># `streaming_content` should be an iterable of bytestrings.</span></div><div class="line">        <span class="comment"># See the `streaming_content` property methods.</span></div><div class="line">        self.streaming_content = streaming_content</div><div class="line"> </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">content</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">"This %s instance has no `content` attribute. "</span></div><div class="line">            <span class="string">"Use `streaming_content` instead."</span> % self.__class__.__name__)</div><div class="line"> </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">streaming_content</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> map(self.make_bytes, self._iterator)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h2><ul>
<li>导入在单独成行, 同一个模块的多个对象被导出时使用()</li>
<li>导入始终在文件的顶部，在模块注释和文档字符串之后，在模块全局变量和常量之前。</li>
<li>推荐绝对路径导入，因为它们通常更可读，而且往往是表现更好的（或至少提供更好的错误消息。</li>
<li>禁止使用通配符导入。</li>
<li>导入顺序如下：标准库进口,相关的第三方库，本地库。各组的导入之间要有空行。<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 标准库</span></div><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> traceback</div><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</div><div class="line"><span class="keyword">from</span> inspect <span class="keyword">import</span> isawaitable</div><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</div><div class="line"><span class="keyword">from</span> signal <span class="keyword">import</span> (</div><div class="line">    SIGTERM, SIGINT,</div><div class="line">    signal <span class="keyword">as</span> signal_func,</div><div class="line">    Signals</div><div class="line">)</div><div class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> (</div><div class="line">    socket,</div><div class="line">    SOL_SOCKET,</div><div class="line">    SO_REUSEADDR,</div><div class="line">)</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="comment"># 第三方库</span></div><div class="line"><span class="keyword">from</span> httptools <span class="keyword">import</span> HttpRequestParser</div><div class="line"><span class="keyword">from</span> httptools.parser.errors <span class="keyword">import</span> HttpParserError</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">import</span> uvloop <span class="keyword">as</span> async_loop</div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    async_loop = asyncio</div><div class="line"></div><div class="line"><span class="comment"># 本地库</span></div><div class="line"><span class="keyword">from</span> sanic.log <span class="keyword">import</span> log, netlog</div><div class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> HTTPResponse</div><div class="line"><span class="keyword">from</span> sanic.request <span class="keyword">import</span> Request</div><div class="line"><span class="keyword">from</span> sanic.exceptions <span class="keyword">import</span> (</div><div class="line">    RequestTimeout, PayloadTooLarge, InvalidUsage, ServerError)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="字符串引用"><a href="#字符串引用" class="headerlink" title="字符串引用"></a>字符串引用</h2><p>Python中单引号字符串和双引号字符串都是相同的。注意尽量避免在字符串中的反斜杠以提高可读性。<br>比如一段字符串里面既有单引号，又有双引号，就的使用 多行字符串的方式，避免使用 \” 或\’<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error = <span class="string">"""My Class hasn't "test" attribute."""</span></div></pre></td></tr></table></figure></p>
<h2 id="表达式和语句中的空格"><a href="#表达式和语句中的空格" class="headerlink" title="表达式和语句中的空格"></a>表达式和语句中的空格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 括号里边避免空格 </span></div><div class="line">spam(ham[<span class="number">1</span>], &#123;eggs: <span class="number">2</span>&#125;)</div><div class="line"><span class="comment"># 逗号，冒号，分号之前避免空格</span></div><div class="line"><span class="keyword">if</span> x == <span class="number">4</span>: <span class="keyword">print</span> x, y; x, y = y, x</div><div class="line"><span class="comment"># 索引操作符不留空格</span></div><div class="line">ham[<span class="number">1</span>:<span class="number">9</span>:<span class="number">3</span>]</div><div class="line"><span class="comment"># 函数调用的左括号之前不能有空格</span></div><div class="line">spam(<span class="number">1</span>)</div><div class="line"><span class="comment"># 二元操作符两边留一个空格,涉及 =、符合操作符 ( += , -=等)、比较( == , &lt; , &gt; , != , &lt;&gt; , &lt;= , &gt;= , in , not in , is , is not )、布尔( and , or , not )</span></div><div class="line">x = <span class="number">1</span></div><div class="line"><span class="comment"># 搞优先级运算符前后不留空格</span></div><div class="line">hypot2 = x*x + y*y</div><div class="line">c = (a+b) * (a-b)</div><div class="line"><span class="comment"># 关键字参数和默认值参数的前后不要加空格</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">complex</span><span class="params">(real, imag=<span class="number">0.0</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> magic(r=real, i=imag)</div><div class="line"><span class="comment"># 函数注释中，=前后要有空格，冒号和"-&gt;"的前面无空格，后面有空格。</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">(sep: AnyStr = None)</span>:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">()</span> -&gt; AnyStr:</span></div><div class="line"><span class="comment"># 尽量不使用复合语句(Compound statements: 多条语句写在同一行)</span></div><div class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>:</div><div class="line">    do_blah_thing()</div></pre></td></tr></table></figure>
<h2 id="普通注释"><a href="#普通注释" class="headerlink" title="普通注释"></a>普通注释</h2><p>通用规则:</p>
<ul>
<li>与代码自相矛盾的注释比没注释更差。修改代码时要优先更新注释！</li>
<li>注释是完整的句子。如果注释是断句，首字母应该大写，除非它是小写字母开头的标识符(永远不要修改标识符的大小写)。</li>
<li>如果注释很短，可以省略末尾的句号。注释块通常由一个或多个段落组成。段落由完整的句子构成且每个句子应该以点号(后面要有两个空格)结束，并注意断词和空格。</li>
<li>非英语国家的程序员请用英语书写你的注释，除非你200%确信代码永远不会被不懂你的语言的人阅读。</li>
</ul>
<p>注释块:</p>
<ul>
<li>注释块通常应用在代码前，并和这些代码有同样的缩进。每行以 ‘# ‘(除非它是注释内的缩进文本，注意#后面有空格)。</li>
<li>注释块内的段落用仅包含单个 ‘#’ 的行分割。</li>
</ul>
<p>行内注释:</p>
<ul>
<li>慎用行内注释(Inline Comments) 节俭使用行内注释。 行内注释是和语句在同一行，至少用两个空格和语句分开。行内注释不是必需的，重复罗嗦会使人分心。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># We use a weighted dictionary search to find out where i is in</span></div><div class="line"><span class="comment"># the array.  We extrapolate position based on the largest num</span></div><div class="line"><span class="comment"># in the array and the array size and then do binary search to</span></div><div class="line"><span class="comment"># get the exact number.</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> i &amp; (i<span class="number">-1</span>) == <span class="number">0</span>:        <span class="comment"># true iff i is a power of 2</span></div></pre></td></tr></table></figure>
<h2 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h2><p>这部分很重要, 他是Python独有的, 为所有公共模块、函数、类和方法书写文档字符串。非公开方法不一定有文档字符串，建议有注释(出现在def行之后)来描述这个方法做什么, 详情参考<a href="https://www.python.org/dev/peps/pep-0257/" target="_blank" rel="external">PEP 257 文档字符串约定</a><br>, 但是这部分我比较推崇Google Style风格。</p>
<h3 id="文档字符串"><a href="#文档字符串" class="headerlink" title="文档字符串"></a>文档字符串</h3><p>什么是文档字符串(Document String):<br>文档字符串是包, 模块, 类或函数里的第一个语句. 这些字符串可以通过对象的<code>__doc__</code>成员被自动提取, 并且被pydoc所用.</p>
<p>文档字符串的格式:<br>首先是一行以句号, 问号或惊叹号结尾的概述(或者该文档字符串单纯只有一行). 接着是一个空行. 接着是文档字符串剩下的部分,它应该与文档字符串的第一行的第一个引号对齐. 下面有更多文档字符串的格式化规范.</p>
<h3 id="模块文档"><a href="#模块文档" class="headerlink" title="模块文档"></a>模块文档</h3><p>模块说明: 对这个模块进行概貌性的描述, 比如Json库的说明<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="string">r"""JSON (JavaScript Object Notation) &lt;http://json.org&gt; is a subset of</span></div><div class="line">JavaScript syntax (ECMA-262 3rd edition) used as a lightweight data</div><div class="line">interchange format.</div><div class="line"></div><div class="line">:mod:`json` exposes an API familiar to users of the standard library</div><div class="line">:mod:`marshal` and :mod:`pickle` modules. It is the externally maintained</div><div class="line">version of the :mod:`json` library contained in Python 2.6, but maintains</div><div class="line">compatibility with Python 2.4 and Python 2.5 and (currently) has</div><div class="line">significant performance advantages, even without using the optional C</div><div class="line">extension for speedups.</div><div class="line"></div><div class="line">Compact encoding::</div><div class="line"></div><div class="line">    &gt;&gt;&gt; import json</div><div class="line">    &gt;&gt;&gt; json.dumps([1,2,3,&#123;'4': 5, '6': 7&#125;], sort_keys=True, separators=(',',':'))</div><div class="line">    '[1,2,3,&#123;"4":5,"6":7&#125;]'</div><div class="line"></div><div class="line">Using json.tool from the shell to validate and pretty-print::</div><div class="line"></div><div class="line">    $ echo '&#123;"json":"obj"&#125;' | python -m json.tool</div><div class="line">    &#123;</div><div class="line">        "json": "obj"</div><div class="line">    &#125;</div><div class="line">    $ echo '&#123; 1.2:3.4&#125;' | python -m json.tool</div><div class="line">    Expecting property name enclosed in double quotes: line 1 column 3 (char 2)</div><div class="line">"""</div></pre></td></tr></table></figure></p>
<h3 id="函数和方法文档"><a href="#函数和方法文档" class="headerlink" title="函数和方法文档"></a>函数和方法文档</h3><p>这里说的函数,包括函数, 方法, 以及生成器。 一个函数必须要有文档字符串, 除非它满足以下条件:</p>
<ul>
<li>外部不可见</li>
<li>非常短小</li>
<li>简单明了</li>
</ul>
<p>文档字符串应该提供足够的信息, 当别人编写代码调用该函数时, 他不需要看一行代码, 只要看文档字符串就可以了.因此需要描述清楚以下几点:</p>
<ul>
<li><p>函数参数: Args<br>列出每个参数的名字, 并在名字后使用一个冒号和一个空格, 分隔对该参数的描述.如果描述太长超过了单行80字符,使用2或者4个空格的悬挂缩进(与文件其他部分保持一致). 描述应该包括所需的类型和含义. 如果一个函数接受<em>foo(可变长度参数列表)或者**bar (任意关键字参数), 应该详细列出</em>foo和**bar.</p>
</li>
<li><p>正常返回: Returns/Yields<br>描述返回值的类型和语义. 如果函数返回None, 这一部分可以省略.</p>
</li>
<li><p>异常返回: Raises:<br>列出与接口有关的所有异常.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_bigtable_rows</span><span class="params">(big_table, keys, other_silly_variable=None)</span>:</span></div><div class="line">    <span class="string">"""Fetches rows from a Bigtable.</span></div><div class="line"></div><div class="line">    Retrieves rows pertaining to the given keys from the Table instance</div><div class="line">    represented by big_table.  Silly things may happen if</div><div class="line">    other_silly_variable is not None.</div><div class="line"></div><div class="line">    Args:</div><div class="line">        big_table: An open Bigtable Table instance.</div><div class="line">        keys: A sequence of strings representing the key of each table row</div><div class="line">            to fetch.</div><div class="line">        other_silly_variable: Another optional variable, that has a much</div><div class="line">            longer name than the other args, and which does nothing.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        A dict mapping keys to the corresponding table row data</div><div class="line">        fetched. Each row is represented as a tuple of strings. For</div><div class="line">        example:</div><div class="line"></div><div class="line">        &#123;'Serak': ('Rigel VII', 'Preparer'),</div><div class="line">         'Zim': ('Irk', 'Invader'),</div><div class="line">         'Lrrr': ('Omicron Persei 8', 'Emperor')&#125;</div><div class="line"></div><div class="line">        If a key from the keys argument is missing from the dictionary,</div><div class="line">        then that row was not found in the table.</div><div class="line"></div><div class="line">    Raises:</div><div class="line">        IOError: An error occurred accessing the bigtable.Table object.</div><div class="line">    """</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="类文档"><a href="#类文档" class="headerlink" title="类文档"></a>类文档</h3><p>同理类也需要做详尽的描述:</p>
<ul>
<li>该类的目的, 以及概貌描述</li>
<li>类有公共属性(Attributes), 需要描述其意义</li>
<li>注意事项</li>
<li>继承object, 因为object实现了一些内置方法,方便兼容。 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleClass</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""Summary of class here.</span></div><div class="line"></div><div class="line">    Longer class information....</div><div class="line">    Longer class information....</div><div class="line"></div><div class="line">    Attributes:</div><div class="line">        likes_spam: A boolean indicating if we like SPAM or not.</div><div class="line">        eggs: An integer count of the eggs we have laid.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, likes_spam=False)</span>:</span></div><div class="line">        <span class="string">"""Inits SampleClass with blah."""</span></div><div class="line">        self.likes_spam = likes_spam</div><div class="line">        self.eggs = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">public_method</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Performs operation blah."""</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="TODO注释"><a href="#TODO注释" class="headerlink" title="TODO注释"></a>TODO注释</h3><p>如果类或者方法，函数 没有实现完整功能, 请使用TODO标记, 很多IDE都能找到这个标记, 方便以后改进, 别留坑.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># TODO(kl@gmail.com): Use a "*" here for string repetition.</span></div><div class="line"><span class="comment"># TODO(Zeke) Change this to use relations.</span></div></pre></td></tr></table></figure></p>
<h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><p>合理的访问控制会使得代码更加健壮</p>
<ul>
<li><code>__slots__</code>: 控制对象可以绑定的属性, 避免对象被临时添加属性，造成对象的不可预期行为。</li>
<li><code>@property</code>: 通过属性装饰器控制属性的读和写的行为, 防止不符合规范数据的录入。</li>
<li><code>__</code>或者<code>_</code>: 使用下划线开头的变量，为私有变量(只是别名了, 你真想访问还是有办法的, 但是请不要这样做)。</li>
<li><code>__all__</code>: 对于from import来说, 导出指定对象, 防止导出全局变量。</li>
</ul>
<p>注意: 对暴露出去的共有变量请慎重, 因为如果你暴露出去过会, 下次在调整就需要考虑到兼容性了, 所以优先使用私有变量(<code>__</code>或者<code>_</code>)。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    __slots__ = [<span class="string">'birth'</span>, <span class="string">'age'</span>]</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._birth</div><div class="line"></div><div class="line"><span class="meta">    @birth.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span><span class="params">(self, value)</span>:</span></div><div class="line">        self._birth = value</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="number">2015</span> - self._birth</div></pre></td></tr></table></figure>
<h2 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h2><p>Python库的命名约定有点混乱，不可能完全一致。但依然有些普遍推荐的命名规范的。新的模块和包 (包括第三方的框架) 应该遵循这些标准。对不同风格的已有的库，建议保持内部的一致性。</p>
<ul>
<li>包和模块名: 模块名要简短，全部用小写字母，可使用下划线以提高可读性。包名和模块名类似，但不推荐使用下划线</li>
<li>类名: 遵循CapWord。</li>
<li>函数和方法的参数: 实例方法第一个参数是 ‘self’。类方法第一个参数是 ‘cls’。如果函数的参数名与保留关键字冲突，通常在参数名后加一个下划线。</li>
<li>方法名和实例变量: 同函数命名规则。</li>
<li>非公开方法和实例变量增加一个前置下划线。</li>
<li>为避免与子类命名冲突，采用两个前置下划线来触发重整。类Foo属性名为<code>__a</code>， 不能以 <code>Foo.__a</code>访问。(执著的用户还是可以通过<code>Foo._Foo__a</code>。) 通常双前置下划线仅被用来避免与基类的属性发生命名冲突。</li>
<li>函数名: 函数名应该为小写，必要时可用下划线分隔单词以增加可读性。 mixedCase(混合大小写)仅被允许用于兼容性考虑(如: threading.py)。</li>
<li>异常名: 如果确实是错误，需要在类名添加后缀 “Error”。</li>
<li>全局变量名: 变量尽量只用于模块内部，约定类似函数。</li>
<li>对设计为通过 “from M import ” 来使用的模块，应采用<code>__all__</code>机制来防止导入全局变量；或者为全局变量加一个前置下划线。</li>
<li>常量: 常量通常在模块级定义,由大写字母用下划线分隔组成。比如括MAX_OVERFLOW和TOTAL。</li>
</ul>
<h2 id="合理的设计"><a href="#合理的设计" class="headerlink" title="合理的设计"></a>合理的设计</h2><h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><p>考虑类的方法和实例变量(统称为属性)是否公开。如果有疑问，选择不公开；把其改为公开比把公开属性改为非公开要容易。<br>公开属性可供所有人使用，并通常向后兼容。非公开属性不给第三方使用、可变甚至被移除。<br>这里不使用术语”private”， Python中没有属性是真正私有的。<br>另一类属性是子类API(在其他语言中通常称为 “protected”)。 一些类被设计为基类，可以扩展和修改。</p>
<p>谨记这些Python指南：</p>
<ul>
<li>公开属性应该没有前导下划线</li>
<li>如果公开属性名和保留关键字冲突，可以添加后置下划线</li>
<li>简单的公开数据属性，最好只公开属性名，没有复杂的访问/修改方法，python的Property提供了很好的封装方法。 如果不希望子类使用的属性，考虑用两个前置下划线(没有后置下划线)命名</li>
<li>任何向后兼容的保证只适用于公共接口。</li>
<li>文档化的接口通常是公共的，除非明说明是临时的或为内部接口、其他所有接口默认是内部的。</li>
<li>为了更好地支持内省，模块要在<code>__all__</code>属性列出公共API。</li>
<li>内部接口要有前置下划线。</li>
<li>如果命名空间(包、模块或类)是内部的，里面的接口也是内部的。</li>
<li>导入名称应视为实现细节。其他模块不能间接访名字，除非在模块的API文档中明确记载，如os.path中或包的<code>__init__</code>暴露了子模块。</li>
</ul>
<h3 id="函数设计"><a href="#函数设计" class="headerlink" title="函数设计"></a>函数设计</h3><p>当流程足够繁杂时，就要考虑函数，及如何将函数组合在一起。在Python中做函数设计，主要考虑到函数大小、聚合性、耦合性三个方面，这三者应该归结于规划与设计的范畴。高内聚、低耦合则是任何语言函数设计的总体原则。</p>
<ul>
<li>如何将任务分解成更有针对性的函数从而导致了聚合性</li>
<li>如何设计函数间的通信则又涉及到耦合性</li>
<li>如何设计函数的大小用以加强其聚合性及降低其耦合性</li>
</ul>
<p>聚合</p>
<ul>
<li>完美的程序设计，每个函数应该而且只需做一件事</li>
<li>比如说:把大象放进冰箱分三步:把门打开、把大象放进去、把门关上。</li>
<li>这样就应该写三个函数而不是一个函数拿所有的事全做了。这样结构清晰，层次分明，也好理解！</li>
</ul>
<p>大小</p>
<ul>
<li>Python代码以简单明了著称，一个过长或者有着深层嵌套的函数往往成为设计缺陷的征兆。</li>
<li>如果项目中设计的一个函数需要翻页才能看完的话，就要考虑将函数拆分了。</li>
</ul>
<p>耦合</p>
<ul>
<li>参数传入，return结果, 这样做可以让函数独立于它外部的东西。参数和return语句就是隔离外部依赖的最好的办法。</li>
<li>慎用全局变量, 全局变量通常是一种蹩脚的函数间的进行通信的方式。它会引发依赖关系和计时的问题，从而会导致程序调试和修改的困难。而且从代码及性能优化来考虑，本地变量远比全局变量快。</li>
<li>避免修改可变类型的参数（或者直接避免传入可变类型的参数，而使用<em>args， 或者*</em>kwargs 收集）Python数据类型比如说列表、字典属于可变对象。在作为参数传递给函数时，有时会像全局变量一样被修改。这样做的坏处是：增强了函数之间的耦合性，从而导致函数过于特殊和不友好。维护起来也困难。这个时候就要考虑使用切片S[:]和copy模块中的copy()函数和deepcopy()函数来做个拷贝，避免修改可变对象</li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="external">PEP8官方文档</a></li>
<li><a href="https://my.oschina.net/u/1433482/blog/464444" target="_blank" rel="external">PEP8中文翻译</a></li>
<li><a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/background/" target="_blank" rel="external">Google Python风格指南</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做项目一直使用Golang, 距离上次使用Python已经半年之久了, 对于Go来说有fmt帮忙格式化, 解决了绝大部分编码风格问题, 而Python则需要自己注意,根据官方指导PEP8或者一些最佳实践比如Google Style来控制风格。时间久了 一些细节部分就忘记了, 于是翻阅之前写的博客, 受益良多, 于是打算把之前的这几篇博客迁移过来, 顺便更新, 方便以后查阅。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="pythonic" scheme="https://blog.yumaojun.net/tags/pythonic/"/>
    
  </entry>
  
  <entry>
    <title>MySQL批量更新与插入</title>
    <link href="https://blog.yumaojun.net/2017/06/19/mysql-performance-for-bulk-action/"/>
    <id>https://blog.yumaojun.net/2017/06/19/mysql-performance-for-bulk-action/</id>
    <published>2017-06-19T02:09:57.000Z</published>
    <updated>2017-06-21T06:24:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直使用gorm来操作数据库, 但当遇到一些批量操作时,感觉性能很差, 原因很简单, gorm是一条一条的执行的,效率很低, 所以对于批量操作, 特别是对于大量record需要创建或者修改时, 直接使用SQL, 才是正确的选择。<br><a id="more"></a></p>
<h2 id="调整MySQL配置-MariaDB10"><a href="#调整MySQL配置-MariaDB10" class="headerlink" title="调整MySQL配置(MariaDB10)"></a>调整MySQL配置(MariaDB10)</h2><ul>
<li>bulk_insert_buffer_size: 调整批量插入缓冲， 默认是16M, 为了能支持更大数据的批量插入, 按需调整, 我这里调整到128M</li>
<li>net_buffer_length: 客户发出的SQL语句期望的长度, 默认是16K。如果语句超过这个长度，缓冲区自动地被扩大，直到max_allowed_packet个字节, 我调整到128K</li>
<li>max_allowed_packet: 一个包的最大尺寸, 默认也是16M。消息缓冲区被初始化为net_buffer_length字节，但是可在需要时增加到max_allowed_packet个字节, 我也调整到128M</li>
</ul>
<p>将这些配置写入MySQL的配置文件中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bulk_insert_buffer_size = 128M</div><div class="line">net_buffer_length = 128K</div><div class="line">max_allowed_packet = 128M</div></pre></td></tr></table></figure></p>
<p>从启MySQL查看这些全局变量是否生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</div><div class="line">Your MariaDB connection id is 142</div><div class="line">Server version: 10.1.21-MariaDB-1~jessie mariadb.org binary distribution</div><div class="line"></div><div class="line">Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.</div><div class="line"></div><div class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> help. Type <span class="string">'\c'</span> to clear the current input statement.</div><div class="line"></div><div class="line">MariaDB [(none)]&gt; show variables like <span class="string">"bulk_insert_buffer_size"</span>;</div><div class="line">+-------------------------+----------+</div><div class="line">| Variable_name           | Value    |</div><div class="line">+-------------------------+----------+</div><div class="line">| bulk_insert_buffer_size | 16777216 |</div><div class="line">+-------------------------+----------+</div><div class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div><div class="line"></div><div class="line">MariaDB [(none)]&gt; show variables like <span class="string">"net_buffer_length"</span>;</div><div class="line">+-------------------+-------+</div><div class="line">| Variable_name     | Value |</div><div class="line">+-------------------+-------+</div><div class="line">| net_buffer_length | 16384 |</div><div class="line">+-------------------+-------+</div><div class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div><div class="line"></div><div class="line">MariaDB [(none)]&gt; show variables like <span class="string">"max_allowed_packet"</span>;</div><div class="line">+--------------------+----------+</div><div class="line">| Variable_name      | Value    |</div><div class="line">+--------------------+----------+</div><div class="line">| max_allowed_packet | 16777216 |</div><div class="line">+--------------------+----------+</div><div class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div></pre></td></tr></table></figure></p>
<h2 id="使用事务"><a href="#使用事务" class="headerlink" title="使用事务"></a>使用事务</h2><p>批量创建和修改多条记录时, 如果使用了多条语句, 请一定使用事物, 因为这些动作是一个事物, 避免部分成功,部分失败 造成数据不一致的问题。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">tx,_ := db.Begin()  </div><div class="line">stm,_ := Tx.Preapare(<span class="string">"insert into test values(?,null)"</span>)  </div><div class="line">result,err := stm.Exec(<span class="string">'123'</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">    tx.Commit()</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    tx.Rollback()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h2><p>批量插入的方法一般包含: </p>
<ul>
<li>直接循环提供(非常不推荐)</li>
<li>基于事物的循环提交</li>
<li>利用INSERT INTO的多值插入语句</li>
</ul>
<p>这里以插入10000条数据为例进行测试, 关于下面的测试代码见: <a href="https://github.com/yumaojun03/golang/blob/master/mysql/bulk_perf_test.go" target="_blank" rel="external">测试代码完整示例</a></p>
<h3 id="直接循环提交"><a href="#直接循环提交" class="headerlink" title="直接循环提交"></a>直接循环提交</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用For循环执行</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">forInsert</span><span class="params">()</span></span> &#123;</div><div class="line">	start := time.Now()</div><div class="line"></div><div class="line">	stmt, err := db.Prepare(<span class="string">`INSERT user (user_name,user_age,user_sex) values (?,?,?)`</span>)</div><div class="line">	checkErr(err)</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</div><div class="line">		name := <span class="string">"tony"</span> + strconv.Itoa(i)</div><div class="line">		_, err := stmt.Exec(name, i, <span class="number">1</span>)</div><div class="line">		checkErr(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	delta := time.Now().Sub(start).String()</div><div class="line">	fmt.Println(<span class="string">"For Insert Total Time: "</span>, delta)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="基于事物循环提交"><a href="#基于事物循环提交" class="headerlink" title="基于事物循环提交"></a>基于事物循环提交</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在一个事物内循环执行</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">withTxInsert</span><span class="params">()</span></span> &#123;</div><div class="line">	start := time.Now()</div><div class="line"></div><div class="line">	tx, err := db.Begin()</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	stmt, err := tx.Prepare(<span class="string">`INSERT user (user_name,user_age,user_sex) values (?,?,?)`</span>)</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</div><div class="line">		name := <span class="string">"tony"</span> + strconv.Itoa(i)</div><div class="line">		_, err := stmt.Exec(name, i, <span class="number">1</span>)</div><div class="line">		checkErr(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		err := tx.Rollback()</div><div class="line">		checkErr(err)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	err = tx.Commit()</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	delta := time.Now().Sub(start).String()</div><div class="line">	fmt.Println(<span class="string">"Bulk With Transaction Insert Total Time: "</span>, delta)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="构造成一条语句提交"><a href="#构造成一条语句提交" class="headerlink" title="构造成一条语句提交"></a>构造成一条语句提交</h3><p>SQL样例: “INSERT INTO table (field1,field2,field3) VALUES (‘a’,’b’,’c’), (‘a’,’b’,’c’),(‘a’,’b’,’c’);”<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 构造一条Insert语句批量提交</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">bulkoneInsert</span><span class="params">()</span></span> &#123;</div><div class="line">	start := time.Now()</div><div class="line"></div><div class="line">	sql := <span class="string">"INSERT INTO `user` (`user_name`,`user_age`,`user_sex`) VALUES "</span></div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</div><div class="line">		name := <span class="string">"tony"</span> + strconv.Itoa(i)</div><div class="line">		<span class="keyword">if</span> i &lt; <span class="number">10000</span> &#123;</div><div class="line">			sql += fmt.Sprintf(<span class="string">"('%s','%d','%d'),"</span>, name, i, <span class="number">1</span>)</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			sql += fmt.Sprintf(<span class="string">"('%s','%d','%d');"</span>, name, i, <span class="number">1</span>)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// fmt.Println(sql)</span></div><div class="line">	tx, err := db.Begin()</div><div class="line">	checkErr(err)</div><div class="line">	_, err = tx.Exec(sql)</div><div class="line">	<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</div><div class="line">		tx.Commit()</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">		tx.Rollback()</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	delta := time.Now().Sub(start).String()</div><div class="line">	fmt.Println(<span class="string">"Bulk One Insert Total Time: "</span>, delta)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最对3种状况的插入时间排名:</p>
<table>
<thead>
<tr>
<th>Ranking</th>
<th style="text-align:center">Function Name</th>
<th style="text-align:center">Time</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td style="text-align:center">bulkoneInsert</td>
<td style="text-align:center">283.548003ms</td>
</tr>
<tr>
<td>2</td>
<td style="text-align:center">withTxInsert</td>
<td style="text-align:center">4.047390845s</td>
</tr>
<tr>
<td>3</td>
<td style="text-align:center">forInsert</td>
<td style="text-align:center">1m55.580310398s</td>
</tr>
</tbody>
</table>
<p>结论很明显: <strong>构造一条SQL插入效率高很多</strong></p>
<h2 id="批量更新"><a href="#批量更新" class="headerlink" title="批量更新"></a>批量更新</h2><p>我们可以使用多个<code>UPDATE</code>语句批量提交, 同时MySQL也支持一个SQL语句批量更新多条记录, 标准的SQL是使用<code>UPDATE WHEN</code>来实现, 除此之外 他的SQL扩展还支持<code>INSERT INTO</code> 和<code>REPLACE INTO</code>用于record的批量更新, 但是最好别用REPLACE INTO, 因为他是先删除再新增, 因此本质上它不是更新操作, <code>因为删除后, 更新时缺少某些字段的话, 会导致数据丢失, 这在业务上是绝对不允许的, 请谨慎使用 REPLACE INTO</code>。而INSERT INTO则不会这样。 最后使用临时表也能进行批量更新(先更新临时表，然后从临时表中update),效率也相当不错,但是需要用户有temporary表的create权限, 因此使用也受限。<br>我一般会使用INSERT INTO来构造批量更新的SQL, 因为该语法方便构造, 下面会对各种操作做简单的性能对比。</p>
<p>这里以更新10000条数据为例进行测试(基于上面插入的数据), 关于下面的测试代码见: <a href="https://github.com/yumaojun03/golang/blob/master/mysql/bulk_perf_test.go" target="_blank" rel="external">测试代码完整示例</a></p>
<h3 id="循环更新"><a href="#循环更新" class="headerlink" title="循环更新"></a>循环更新</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 循环更新</span></div><div class="line"><span class="comment">// UPDATE table SET column1=?,column2=? WHERE column=?</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">withTxUpdate</span><span class="params">()</span></span> &#123;</div><div class="line">	start := time.Now()</div><div class="line"></div><div class="line">	tx, err := db.Begin()</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	stmt, err := tx.Prepare(<span class="string">"UPDATE `user` SET `user_name`=? WHERE `user_id`=?;"</span>)</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</div><div class="line">		name := <span class="string">"forupdate"</span> + strconv.Itoa(i)</div><div class="line">		_, err := stmt.Exec(name, i+<span class="number">1</span>)</div><div class="line">		checkErr(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		err := tx.Rollback()</div><div class="line">		checkErr(err)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	err = tx.Commit()</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	delta := time.Now().Sub(start).String()</div><div class="line">	fmt.Println(<span class="string">"Bulk With Transaction Update Total Time: "</span>, delta)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="标准的UPDATE语句批量更新"><a href="#标准的UPDATE语句批量更新" class="headerlink" title="标准的UPDATE语句批量更新"></a>标准的UPDATE语句批量更新</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 标准Update语句更新</span></div><div class="line"><span class="comment">// UPDATE categories</span></div><div class="line"><span class="comment">//     SET dingdan = CASE id</span></div><div class="line"><span class="comment">//         WHEN 1 THEN 3</span></div><div class="line"><span class="comment">//         WHEN 2 THEN 4</span></div><div class="line"><span class="comment">//         WHEN 3 THEN 5</span></div><div class="line"><span class="comment">//     END,</span></div><div class="line"><span class="comment">//     title = CASE id</span></div><div class="line"><span class="comment">//         WHEN 1 THEN 'New Title 1'</span></div><div class="line"><span class="comment">//         WHEN 2 THEN 'New Title 2'</span></div><div class="line"><span class="comment">//         WHEN 3 THEN 'New Title 3'</span></div><div class="line"><span class="comment">//     END</span></div><div class="line"><span class="comment">// WHERE id IN (1,2,3)</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">bulkStandardUpdate</span><span class="params">()</span></span> &#123;</div><div class="line">	start := time.Now()</div><div class="line"></div><div class="line">	core := <span class="string">""</span></div><div class="line">	where := <span class="string">""</span></div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</div><div class="line">		name := <span class="string">"standardupdate"</span> + strconv.Itoa(i)</div><div class="line">		core += fmt.Sprintf(<span class="string">"WHEN '%d' THEN '%s' "</span>, i+<span class="number">1</span>, name)</div><div class="line">		<span class="keyword">if</span> i == <span class="number">0</span> &#123;</div><div class="line">			where += fmt.Sprintf(<span class="string">"'%d'"</span>, i+<span class="number">1</span>)</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			where += fmt.Sprintf(<span class="string">",'%d'"</span>, i+<span class="number">1</span>)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	sql := fmt.Sprintf(<span class="string">"UPDATE `user` SET `user_name`= CASE `user_id` %s END WHERE `user_id` IN (%s)"</span>, core, where)</div><div class="line"></div><div class="line">	tx, err := db.Begin()</div><div class="line">	checkErr(err)</div><div class="line">	_, err = tx.Exec(sql)</div><div class="line">	<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</div><div class="line">		tx.Commit()</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">		tx.Rollback()</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	delta := time.Now().Sub(start).String()</div><div class="line">	fmt.Println(<span class="string">"Bulk Standard Update Total Time: "</span>, delta)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="SQL扩展-INSERT-INTO-…-ON-DUPLICATE-KEY-UPDATE"><a href="#SQL扩展-INSERT-INTO-…-ON-DUPLICATE-KEY-UPDATE" class="headerlink" title="SQL扩展(INSERT INTO … ON DUPLICATE KEY UPDATE)"></a>SQL扩展(INSERT INTO … ON DUPLICATE KEY UPDATE)</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// insert into语句更新</span></div><div class="line"><span class="comment">// INSERT INTO test_tbl (id,dr) VALUES (1,'2'),(2,'3'),...(x,'y') ON DUPLICATE KEY UPDATE dr=values(dr);</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">bulkInsertIntoUpdate</span><span class="params">()</span></span> &#123;</div><div class="line">	start := time.Now()</div><div class="line"></div><div class="line">	core := <span class="string">""</span></div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</div><div class="line">		name := <span class="string">"insertintoupdate"</span> + strconv.Itoa(i)</div><div class="line">		<span class="keyword">if</span> i == <span class="number">0</span> &#123;</div><div class="line">			core += fmt.Sprintf(<span class="string">"('%d', '%s')"</span>, i+<span class="number">1</span>, name)</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			core += fmt.Sprintf(<span class="string">",('%d', '%s')"</span>, i+<span class="number">1</span>, name)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	sql := fmt.Sprintf(<span class="string">"INSERT INTO `user` (`user_id`, `user_name`) VALUES %s ON DUPLICATE KEY UPDATE `user_name`=values(`user_name`);"</span>, core)</div><div class="line"></div><div class="line">	tx, err := db.Begin()</div><div class="line">	checkErr(err)</div><div class="line">	_, err = tx.Exec(sql)</div><div class="line">	<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</div><div class="line">		tx.Commit()</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">		tx.Rollback()</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	delta := time.Now().Sub(start).String()</div><div class="line">	fmt.Println(<span class="string">"Bulk Insert Into Update Total Time: "</span>, delta)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="SQL扩展-REPLACE-INTO"><a href="#SQL扩展-REPLACE-INTO" class="headerlink" title="SQL扩展(REPLACE INTO)"></a>SQL扩展(REPLACE INTO)</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// replace inot语句更新</span></div><div class="line"><span class="comment">// REPLACE INTO test_tbl (id,dr) VALUES (1,'2'),(2,'3'),...(x,'y');</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">bulkReplaceIntoUpdate</span><span class="params">()</span></span> &#123;</div><div class="line">	start := time.Now()</div><div class="line"></div><div class="line">	core := <span class="string">""</span></div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</div><div class="line">		name := <span class="string">"replaceintoupdate"</span> + strconv.Itoa(i)</div><div class="line">		<span class="keyword">if</span> i == <span class="number">0</span> &#123;</div><div class="line">			core += fmt.Sprintf(<span class="string">"('%d', '%s')"</span>, i+<span class="number">1</span>, name)</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			core += fmt.Sprintf(<span class="string">",('%d', '%s')"</span>, i+<span class="number">1</span>, name)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	sql := fmt.Sprintf(<span class="string">"REPLACE INTO `user` (`user_id`, `user_name`) VALUES %s;"</span>, core)</div><div class="line"></div><div class="line">	tx, err := db.Begin()</div><div class="line">	checkErr(err)</div><div class="line">	_, err = tx.Exec(sql)</div><div class="line">	<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</div><div class="line">		tx.Commit()</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">		tx.Rollback()</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	delta := time.Now().Sub(start).String()</div><div class="line">	fmt.Println(<span class="string">"Bulk Replace Into Update Total Time: "</span>, delta)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>最对4种状况的插入时间排名:</p>
<table>
<thead>
<tr>
<th>Ranking</th>
<th style="text-align:center">Function Name</th>
<th style="text-align:center">Time</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td style="text-align:center">bulkInsertIntoUpdate</td>
<td style="text-align:center">462.575115ms</td>
</tr>
<tr>
<td>2</td>
<td style="text-align:center">bulkReplaceIntoUpdate</td>
<td style="text-align:center">564.974107ms</td>
</tr>
<tr>
<td>3</td>
<td style="text-align:center">bulkStandardUpdate</td>
<td style="text-align:center">3.160858907s</td>
</tr>
<tr>
<td>4</td>
<td style="text-align:center">withTxUpdate</td>
<td style="text-align:center">3.998437161s</td>
</tr>
</tbody>
</table>
<p>结论很明显: <strong>InsertInto更新效率高很多</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直使用gorm来操作数据库, 但当遇到一些批量操作时,感觉性能很差, 原因很简单, gorm是一条一条的执行的,效率很低, 所以对于批量操作, 特别是对于大量record需要创建或者修改时, 直接使用SQL, 才是正确的选择。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="MySQL" scheme="https://blog.yumaojun.net/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>编码知识与常见乱码问题的解决办法</title>
    <link href="https://blog.yumaojun.net/2017/05/14/unicode-war/"/>
    <id>https://blog.yumaojun.net/2017/05/14/unicode-war/</id>
    <published>2017-05-14T05:36:42.000Z</published>
    <updated>2017-05-14T06:14:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>有一个即使在经验丰富的程序员中也非常常见的误解就是，纯文本使用ASCII码并且每个字符都是8bits。事实上并不存在这样的纯文本 ，如果在内存或者是硬盘上面有一个你不知道编码的字符串，那么你将无法翻译或者显示它 ，这绝对没有第二条路可选。<br><a id="more"></a> </p>
<h2 id="数据的本质-二进制"><a href="#数据的本质-二进制" class="headerlink" title="数据的本质: 二进制"></a>数据的本质: 二进制</h2><p>CPU能识别的数据: CPU是利用数字电路设计出来的,所以仅能识别二进制的数据。<br>磁盘能识别的数据： 磁盘上有很多磁性的点，而这些点 有2种状态，所以任何数据 仅能转换成2进程 ，及01 代码  才能利用磁盘的点的这种特性 来进行存储 ，所以任何存储在磁盘上的数据 都是二进制<br>网络传输的数据：通过网络输出过来的数据，为高低电频，也对应二进制</p>
<p>但是为啥我们看到的数据都不是01代码喃, 比如数据： 一串二进制的bits：<code>0100100001000101010011000100110001001111</code></p>
<p>为啥最后我们用文本工具打开后, 看到的是<code>HELLO</code>而不是01代码本身喃？那文本编辑器是怎么将二进制翻译成字符的喃？这里有2个关键的问题:</p>
<ul>
<li>字节是怎样分组的？（例如1个字节表示一个字符还是2个字节表示一个字符）</li>
<li>一个或多个字节是怎么映射到字符上的?</li>
</ul>
<p>这就是我们要说的编码需要解决的问题。</p>
<h2 id="编码概念"><a href="#编码概念" class="headerlink" title="编码概念"></a>编码概念</h2><p>编码的核心是定义了如下2件事情:</p>
<ul>
<li>字节是怎么分组的，如8 bits或16 bits一组，这也被称作编码单元。</li>
<li>编码单元和字符之间的映射关系。例如，在ASCII码中，十进制65映射到字母A上</li>
</ul>
<h2 id="编码之战"><a href="#编码之战" class="headerlink" title="编码之战"></a>编码之战</h2><p><code>混战年代</code><br>很久以前，计算机制造商有自己的表示字符的方式。他们并不需要担心如何和其它计算机交流，并提出了各自的方式来将字形渲染到屏幕上。随着计算机越来越流行，厂商之间的竞争更加激烈，在不同的计算机体系间转换数据变得十分蛋疼，人们厌烦了这种自定义造成的混乱。</p>
<p><code>ASCII码的到来</code><br>最终，计算机制造商一起制定了一个标准的方法来描述字符。他们定义使用一个字节的低7位来表示字符，并且制作了如上图所示的对照表来映射七个比特的值到一个字符上。例如，字母A是65，c是99，~是126等等， ASCII码就这样诞生了。原始的ASCII标准定义了从0到127 的字符，这样正好能用七个比特表示。不过好景不长。。。</p>
<p><code>ASCII码第八位 引起的战争</code><br>为什么选择了7个比特而不是8个来表示一个字符呢？我并不关心。但是一个字节是8个比特，这意味着1个比特并没有被使用，也就是从128到255的编码并没有被制定ASCII标准的人所规定，这些美国人对世界的其它地方一无所知甚至完全不关心。<br>其它国家的人趁这个机会开始使用128到255范围内的编码来表达自己语言中的字符。例如，144在阿拉伯人的ASCII码中是گ，而在俄罗斯的ASCII码中是ђ。即使在美国，对于未使用区域也有各种各样的利用。IBM PC就出现了“OEM 字体”或”扩展ASCII码”，为用户提供漂亮的图形文字来绘制文本框并支持一些欧洲字符，例如英镑（£）符号。<br>再强调一遍，ASCII码的问题在于尽管所有人都在0-127号字符的使用上达成了一致，但对于128-255号字符却有很多很多不同的解释。你必须告诉计算机使用哪种风格的ASCII码才能正确显示128-255号的字符。<br>这对于北美人和不列颠群岛的人来说不算什么问题，因为无论使用哪种风格的ASCII码，拉丁字母的显示都是一样的。英国人还需要面对的问题是原始的ASCII码中不包含英镑符号，但是这个已经无关紧要了。<br>与此同时，在亚洲有更让人头疼的问题。亚洲语言有更多的字符和字形需要被存储，一个字节已经不够用了。所以他们开始使用两个字节来存储字符，这被称作DBCS（双字节编码方案）。在DBCS中，字符串操作变得很蛋疼，你应该怎么做str++或str–？<br>这些问题成为了系统开发者的噩梦。例如，MS DOS必须支持所有风格的ASCII码，因为他们想把软件卖到其他国家去。他们提出了「内码表」这一概念。例如，你需要告诉DOS（通过使用”chcp”命令）你想使用保加利亚语的内码表，它才能显示保加利亚字母。内码表的更换会应用到整个系统。这对使用多种语言工作的人来说是一个问题，因为他们必须频繁的在几个内码表之间来回切换。<br>尽管内码表是一个好主意，但是它不是一个简洁的解决方案，它只是一个hack技术或者说是简单的修正来让编码系统可以工作。</p>
<p><code>Unicode的世界</code><br>最终，美国人意识到他们应该提出一种标准方案来展示世界上所有语言中的所有字符，以便缓解程序员的痛苦和避免字符编码引发的第三次世界大战。出于这个目的，Unicode诞生了。<br>Unicode背后的想法非常简单，然而却被普遍的误解了。Unicode就像一个电话本，标记着字符和数字之间的映射关系。Joel称之为「神奇数字」，因为它们可能是随机指定的，而且不会给出任何解释。官方术语是码位(Code Point)，总是用U+开头。理论上每种语言中的每种字符都被Unicode协会指定了一个神奇数字。例如希伯来文中的第一个字母א，是U+2135，字母A是U+0061。<br>Unicode并不涉及字符是怎么在字节中表示的，它仅仅指定了字符对应的数字，仅此而已。<br>关于Unicode的其它误解包括：Unicode支持的字符上限是65536个，Unicode字符必须占两个字节。告诉你这些的人应该去换换脑子了。<br>记住，Unicode只是一个用来映射字符和数字的标准。它对支持字符的数量没有限制，也不要求字符必须占两个、三个或者其它任意数量的字节。<br>Unicode字符是怎样被编码成内存中的字节这是另外的话题，它是被UTF(Unicode Transformation Formats)定义的。</p>
<p><code>Unicode的实现</code><br>两个最流行的Unicode编码方案是UTF-8和UTF-16。让我们看看它们的细节<br>UTF-8是一个非常惊艳的概念，它漂亮的实现了对ASCII码的向后兼容，以保证Unicode可以被大众接受。发明它的人至少应该得个诺贝尔和平奖。<br>在UTF-8中，0-127号的字符用1个字节来表示，使用和US-ASCII相同的编码。这意味着1980年代写的文档用UTF-8打开一点问题都没有。只有128号及以上的字符才用2个，3个或者4个字节来表示。因此，UTF-8被称作可变长度编码。<br>0100100001000101010011000100110001001111<br>这个字节流在ASCII和UTF-8中表示相同的字符：HELLO<br>另一个流行的可变长度编码方案是UTF-16，它使用2个或者4个字节来存储字符。然而，人们逐渐意识到UTF-16可能会浪费存储空间，但那是另一个话题了。</p>
<h2 id="编码排序"><a href="#编码排序" class="headerlink" title="编码排序"></a>编码排序</h2><p>低字节序(Little Endian)和高字节序(Big Endian)<br>Endian读作End-ian或者Indian。这个术语的起源可以追溯到格列佛游记。（小说中，小人国为水煮蛋应该从大的一端（Big-End）剥开还是小的一端（Little-End）剥开而争论，争论的双方分别被称为“大端派”和“小端派”。）<br>低字节序和高字节序只是一个关于在内存中存储和读取一段字节（被称作words）的约定。这意味着当你让计算机用UTF-16把字母A（占两个字节）存在内存中时，使用哪种字节序方案决定了你把第一个字节放在第二个字节的前面还是后面。这么说有点不太容易懂，让我们来看一个例子：当你使用UTF-16存下来自你朋友的附件时，在不同的系统中它的后半部分可能是这样的：<br>00 68 00 65 00 6C 00 6C 00 6F（高字节序，高位字节被存在前面）<br>68 00 65 00 6C 00 6C 00 6F 00（低字节序，低位字节被存在前面）<br>字节序方案只是一个微处理器架构设计者的偏好问题，例如，Intel使用低字节序，Motorola使用高字节序。</p>
<p>字节顺序标记<br>如果你经常要在高低字节序的系统间转换文档，并且希望区分字节序，还有一种奇怪的约定，被称作BOM。BOM是一个设计得很巧妙的字符，用来放在文档的开头告诉阅读器该文档的字节序。在UTF-16中，它是通过在第一个字节放置FE FF来实现的。在不同字节序的文档中，它会被显示成FF FE或者FE FF，清楚的把这篇文档的字节序告诉了解释器。</p>
<p>BOM尽管很有用，但并不是很简洁，因为还有一个类似的概念，称作「魔术字」(Magic Byte)，很多年来一直被用来表明文件的格式。BOM和魔术字间的关系一直没有被清楚的定义过，因此有的解释器会搞混它们。</p>
<h2 id="常见的编码引起的问题"><a href="#常见的编码引起的问题" class="headerlink" title="常见的编码引起的问题"></a>常见的编码引起的问题</h2><p>我们看到的任何输出，都是程序展示我们的，程序根据编码来进行这个映射关系的转换，如果程序把这编码搞错了，就会出现乱码问题<br>当软件不能确定编码的时候，它会猜测。大部分时候，它会猜测是否是涵盖了ASCII码的UTF-8，还是ISO-8859-1，也有可能猜其他能想到的任意字符集。因为英文中使用的拉丁字母表在几乎所有的字符集中都能显示，包括UTF-8，所以即使编码猜错了，英文字母看起来也是正确的。</p>
<h3 id="浏览器乱码问题"><a href="#浏览器乱码问题" class="headerlink" title="浏览器乱码问题"></a>浏览器乱码问题</h3><p>如果你在浏览网页时看到�符号，这意味着这个网页的编码不是你的浏览器猜测的那个。这时你可以点开浏览器的查看-&gt;字符编码菜单来尝试不同的编码。</p>
<p>对于程序开发者来说，因避免让浏览器 猜测文档的编码，因此：</p>
<p>永远记得通过Content-Type或者meta charset标签来显式指定你的文档的编码。这样浏览器就不需要猜测你使用的编码了，他们会准确的使用你指定的编码来渲染文档。</p>
<h3 id="编辑器乱码问题"><a href="#编辑器乱码问题" class="headerlink" title="编辑器乱码问题"></a>编辑器乱码问题</h3><p>例如 我用 vim 打开一个 utf8 编码的文件：<br>通过输入 set encoding  ，会发现此时编辑器 使用的编码是 latin1<br><img src="http://oiw1gzfww.bkt.clouddn.com/vim1.jpg" alt=""><br>通过 set encoding=utf8 ，把编码转换过来<br><img src="http://oiw1gzfww.bkt.clouddn.com/vim2.jpg" alt=""><br>如果想这个配置永久生效 ，请写入vim 的配置文件吧</p>
<h3 id="Xshell-虚拟终端乱码问题"><a href="#Xshell-虚拟终端乱码问题" class="headerlink" title="Xshell 虚拟终端乱码问题"></a>Xshell 虚拟终端乱码问题</h3><p>我在xshell终端下 tail 一个utf8 编码的文件，这个命令取得的结果会送到 Xshell 终端 ，然后有Xshell 终端进行解码，展示在我们面前<br>原本的数据  是utf8编码的，但是我们终端 却选用Arabic 来进行解码，所以乱码<br><img src="http://oiw1gzfww.bkt.clouddn.com/xshell1.jpg" alt=""><br>现在我们将Xshell 的编码换成 utf8<br><img src="http://oiw1gzfww.bkt.clouddn.com/xshell2.jpg" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>编码表 就是一张映射表，不同的编码有自己的映射规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">数据   ——–&gt;   二进制     （软件来编码）</div><div class="line">二进制 ——–&gt;   数据       （软件来解码）</div></pre></td></tr></table></figure></p>
<p>如果编码和解码不是同一种编码，那么就会出现乱码，这个加密解码一个道理<br><img src="http://oiw1gzfww.bkt.clouddn.com/summary.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一个即使在经验丰富的程序员中也非常常见的误解就是，纯文本使用ASCII码并且每个字符都是8bits。事实上并不存在这样的纯文本 ，如果在内存或者是硬盘上面有一个你不知道编码的字符串，那么你将无法翻译或者显示它 ，这绝对没有第二条路可选。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="unicode" scheme="https://blog.yumaojun.net/tags/unicode/"/>
    
  </entry>
  
  <entry>
    <title>golang获取字符的宽度(East_Asian_Width)</title>
    <link href="https://blog.yumaojun.net/2017/05/10/golang-char-width/"/>
    <id>https://blog.yumaojun.net/2017/05/10/golang-char-width/</id>
    <published>2017-05-10T05:08:48.000Z</published>
    <updated>2017-05-14T05:32:06.000Z</updated>
    
    <content type="html"><![CDATA[<p> 最近在用golang写CLI, 数据在终端以Table方式展示和MySLQ输出的表格一样, 使用的是一个GitHub上不怎么出名的项目, 因为该项目逻辑清晰, 功能也完善, 自己也能很好的看懂, 容易维护, 但是前些天出了一个问题: 录入中文字符和一些特殊字符过会让Table无法对齐, 我已经fork过来修复了, 但是其中涉及到的知识点, 想通过这篇博客来讲清楚。<br><a id="more"></a> </p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>我使用一个叫simpletalbe的库: <a href="https://github.com/alexeyco/simpletable" target="_blank" rel="external">GitHub地址</a>, 我使用他的例子, 添加了一行中文输入，结果是这样的:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Default style</div><div class="line">+----+------------------+--------------+-----------------------------+------+</div><div class="line">| <span class="comment">#  |       NAME       |    PHONE     |            EMAIL            | QTTY |</span></div><div class="line">+----+------------------+--------------+-----------------------------+------+</div><div class="line">|  1 | Newton G. Goetz  | 252-585-5166 | NewtonGGoetz@dayrep.com     |   10 |</div><div class="line">|  2 | Rebecca R. Edney | 865-475-4171 | RebeccaREdney@armyspy.com   |   12 |</div><div class="line">|  3 | John R. Jackson  | 810-325-1417 | JohnRJackson@armyspy.com    |   15 |</div><div class="line">|  4 | Ron J. Gomes     | 217-450-8568 | RonJGomes@rhyta.com         |   25 |</div><div class="line">|  5 | Penny R. Lewis   | 870-794-1666 | PennyRLewis@rhyta.com       |    5 |</div><div class="line">|  6 | Sofia J. Smith   | 770-333-7379 | SofiaJSmith@armyspy.com     |    3 |</div><div class="line">|  7 | Karlene D. Owen  | 231-242-4157 | KarleneDOwen@jourrapide.com |   12 |</div><div class="line">|  8 | Daniel L. Love   | 978-210-4178 | DanielLLove@rhyta.com       |   44 |</div><div class="line">|  9 | Julie T. Dial    | 719-966-5354 | JulieTDial@jourrapide.com   |    8 |</div><div class="line">| 10 | Juan J. Kennedy  | 908-910-8893 | JuanJKennedy@dayrep.com     |   16 |</div><div class="line">| 11 | 中文夹渣 abc         | 特殊字符夹渣 ℃     | JuanJKennedy@dayrep.com     |   16 |</div><div class="line">+----+------------------+--------------+-----------------------------+------+</div><div class="line">|                                                           Subtotal |  166 |</div><div class="line">+----+------------------+--------------+-----------------------------+------+</div></pre></td></tr></table></figure></p>
<p>仔细观察可以发现问题, 一个中文的宽度是2个英文字符的宽度,但是他却依然使用1个宽度来计算, 致使实际字符的宽度少算了4位, 所以第一个Name表格字符多出去了4个字符宽度。</p>
<p>这个问题的本质是一个编码问题, 由于Golang内部字符统一使用Unicode编码, 所以问题定位为 unicode 编码的字符宽度问题, 该问题和语言无关, 只要你使用unicode 就会有这个问题, 顺着这个问题 我们来说明Golang的中的字符类型Rune</p>
<h2 id="Golang中的Rune类型"><a href="#Golang中的Rune类型" class="headerlink" title="Golang中的Rune类型"></a>Golang中的Rune类型</h2><p>在python中一个字符以char类型表示, 而在Golang中字符类型以Rune表示, 注意字符通过码表(code point)来进行翻译, 所以字符串是码表翻译过来拼接而成的, 所以不要傻傻搞不清楚rune和string的区别。</p>
<p>golang里面用 “” 表示字符串, 用户``表示多行字符串, ‘’表示字符, 比如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a := <span class="string">"字符串"</span></div><div class="line">b := `多行</div><div class="line">字符串`</div><div class="line">c := <span class="string">'中'</span></div></pre></td></tr></table></figure></p>
<p>该网站有unicode的码位表: <a href="http://www.utf8-chartable.de/unicode-utf8-table.pl" target="_blank" rel="external">unicode-utf8-table</a>, 我们从中找出一部分来做测试:<br><img src="http://oiw1gzfww.bkt.clouddn.com/unicode-code-point.png" alt=""></p>
<p>我们以打印下4e07为例来 验证下code point:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	fmt.Printf(<span class="string">"%c\n"</span>, <span class="number">0x4e07</span>)</div><div class="line">	fmt.Printf(<span class="string">"%x\n"</span>, <span class="string">'万'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="关于字符宽度"><a href="#关于字符宽度" class="headerlink" title="关于字符宽度"></a>关于字符宽度</h2><p>编码之战始于Ascii码空余的第8位, 最终以unicode统一 这是一场惊心动魄的历史, 我在之前篇运维的博客中有过介绍, 当时花了1个星期撸编码问题, 后面会将其转过来(买的VPS快到期了)。</p>
<p>关于编码介绍: <a href="">编码之战</a></p>
<p>有了上面的基础, 我们继续字符宽度的问题, 文章标题含有:East_Asian_Width, 这个东西很重要, 它在unicode标准中负责定义字符的宽度。让我们由浅入深的开始介绍。</p>
<p>截止我写这篇博客之时, unicode规范的稳定版是第9版，开发版是第10版, 我主要参考unicode9规范的文档。</p>
<p>在unicode9中的技术报告中有关于 unicode标准的所有的规范: <a href="http://www.unicode.org/reports/#annexes" target="_blank" rel="external">Unicode Technical Reports
</a>, 其中 Unicode Standard Annexes 描述了unicode所有相关规范，其中这2个规范需要我们关注:</p>
<ul>
<li><a href="http://www.unicode.org/reports/tr44/" target="_blank" rel="external">UNICODE CHARACTER DATABASE</a>: 用于描述码表(code point), 既Unicode字符数据库(UCD),它描述了Unicode字符数据库的布局和组织，以及它如何指定Unicode字符属性的形式化定义.</li>
<li><a href="http://www.unicode.org/reports/tr11/" target="_blank" rel="external">EAST ASIAN WIDTH</a>: 用于描述东亚传统字符集的信息属性的规范, 其中就包括字符宽度.<br>在UCD规范中, unicode字符有一个<code>East_Asian_Width</code>属性(5.11.1描述了二进制属性),定义了一个unicode字符可能出现的字符宽度。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># East_Asian_Width (ea)</span></div><div class="line"></div><div class="line">ea ; A         ; Ambiguous</div><div class="line">ea ; F         ; Fullwidth</div><div class="line">ea ; H         ; Halfwidth</div><div class="line">ea ; N         ; Neutral</div><div class="line">ea ; Na        ; Narrow</div><div class="line">ea ; W         ; Wide</div></pre></td></tr></table></figure>
</li>
</ul>
<p>其中除A不确定外，F/H/N/Na/W都能很明确的知道宽度。因此每一个unicode字符我们只需要知道其East_Asian_Width属性的值 就可知道其字符的宽度, 但是查看了下Golang unicode标准库, 并没有发现East_Asian_Width相关属性的实现和方法, 因此估计需要自己实现了。</p>
<p>如何实现East_Asian_Width喃?, 这就需要刚才提到的unicode规范中的另外一个规范<a href="http://www.unicode.org/reports/tr11/" target="_blank" rel="external">EAST ASIAN WIDTH</a>, 该文档整理出了所有的unicode字符的宽度的范围表, 该规范的 6.3节中 给出了这个范围表<a href="http://www.unicode.org/Public/UCD/latest/ucd/EastAsianWidth.txt" target="_blank" rel="external">unicode字符宽度范围表</a>,只要有这张表我们就可以知道字符宽度。</p>
<p>因此我们根据这张范围表可以实现一个获取unicode字符宽度的功能模块, 默认F/W为Fullwidth, 其他为Halfwidth, 该模块具体代码见: <a href="https://github.com/yumaojun03/simpletable/blob/master/east_asian_width.go" target="_blank" rel="external">east_asian_width</a>, 有了这个模块我们就可以来解决 字符宽度问题了</p>
<h2 id="解决字符宽度问题"><a href="#解决字符宽度问题" class="headerlink" title="解决字符宽度问题"></a>解决字符宽度问题</h2><p>我们找到simpletalbe里面关于字符长度的代码:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// width returns content width</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *content)</span> <span class="title">width</span><span class="params">()</span> <span class="title">int</span></span> &#123;</div><div class="line">	m := c.maxLinewidth()</div><div class="line">	<span class="keyword">if</span> m &gt; c.w &#123;</div><div class="line">		<span class="keyword">return</span> m</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> c.w</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// line formats content line</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *content)</span> <span class="title">line</span><span class="params">(l <span class="keyword">string</span>, a <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</div><div class="line">	<span class="built_in">len</span> := c.width() - utf8.RuneCountInString(l)</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们定义好获取字符长度的函数，提供掉他的判断方法<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// get the string width</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getStringWidth</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">	w := <span class="number">0</span></div><div class="line"></div><div class="line">	<span class="keyword">for</span> _, c := <span class="keyword">range</span> []<span class="keyword">rune</span>(str) &#123;</div><div class="line">		<span class="keyword">if</span> IsHalfwidth(c) &#123;</div><div class="line">			w = w + <span class="number">1</span></div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			w = w + <span class="number">2</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> w</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// width returns maximum content lines width</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *content)</span> <span class="title">maxLinewidth</span><span class="params">()</span> <span class="title">int</span></span> &#123;</div><div class="line">	w := <span class="number">0</span></div><div class="line"></div><div class="line">	<span class="keyword">for</span> _, r := <span class="keyword">range</span> c.c &#123;</div><div class="line">		l := getStringWidth(r)</div><div class="line">		<span class="keyword">if</span> l &gt; w &#123;</div><div class="line">			w = l</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> w</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// line formats content line</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *content)</span> <span class="title">line</span><span class="params">(l <span class="keyword">string</span>, a <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</div><div class="line">	<span class="built_in">len</span> := c.width() - getStringWidth(l)</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后测试效果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Default style</div><div class="line">+----+------------------+----------------+-----------------------------+------+</div><div class="line">| <span class="comment">#  |       NAME       |     PHONE      |            EMAIL            | QTTY |</span></div><div class="line">+----+------------------+----------------+-----------------------------+------+</div><div class="line">|  1 | Newton G. Goetz  | 252-585-5166   | NewtonGGoetz@dayrep.com     |   10 |</div><div class="line">|  2 | Rebecca R. Edney | 865-475-4171   | RebeccaREdney@armyspy.com   |   12 |</div><div class="line">|  3 | John R. Jackson  | 810-325-1417   | JohnRJackson@armyspy.com    |   15 |</div><div class="line">|  4 | Ron J. Gomes     | 217-450-8568   | RonJGomes@rhyta.com         |   25 |</div><div class="line">|  5 | Penny R. Lewis   | 870-794-1666   | PennyRLewis@rhyta.com       |    5 |</div><div class="line">|  6 | Sofia J. Smith   | 770-333-7379   | SofiaJSmith@armyspy.com     |    3 |</div><div class="line">|  7 | Karlene D. Owen  | 231-242-4157   | KarleneDOwen@jourrapide.com |   12 |</div><div class="line">|  8 | Daniel L. Love   | 978-210-4178   | DanielLLove@rhyta.com       |   44 |</div><div class="line">|  9 | Julie T. Dial    | 719-966-5354   | JulieTDial@jourrapide.com   |    8 |</div><div class="line">| 10 | Juan J. Kennedy  | 908-910-8893   | JuanJKennedy@dayrep.com     |   16 |</div><div class="line">| 11 | adfsb“           | 特殊字符夹渣 ℃ | JuanJKennedy@dayrep.com     |   16 |</div><div class="line">+----+------------------+----------------+-----------------------------+------+</div><div class="line">|                                                             Subtotal |  166 |</div><div class="line">+----+------------------+----------------+-----------------------------+------+</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 最近在用golang写CLI, 数据在终端以Table方式展示和MySLQ输出的表格一样, 使用的是一个GitHub上不怎么出名的项目, 因为该项目逻辑清晰, 功能也完善, 自己也能很好的看懂, 容易维护, 但是前些天出了一个问题: 录入中文字符和一些特殊字符过会让Table无法对齐, 我已经fork过来修复了, 但是其中涉及到的知识点, 想通过这篇博客来讲清楚。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="unicode" scheme="https://blog.yumaojun.net/tags/unicode/"/>
    
  </entry>
  
  <entry>
    <title>如何使用容器build多平台golang程序</title>
    <link href="https://blog.yumaojun.net/2017/05/08/build-goapp-with-docker/"/>
    <id>https://blog.yumaojun.net/2017/05/08/build-goapp-with-docker/</id>
    <published>2017-05-08T08:06:25.000Z</published>
    <updated>2017-05-09T04:58:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>在CI和CD环境中,  goalng源码程序往往需要build不同平台的二进制程序, 这时候使用容器是一个不错的选择, 因为build完成后,我们可以立即释放容器, 而且也保证了build环境的干净。<br><a id="more"></a> </p>
<h2 id="基于容器的build"><a href="#基于容器的build" class="headerlink" title="基于容器的build"></a>基于容器的build</h2><p>使用容器来进行build, 所遇到的一些小坑。</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>我们采用vendor来做golang项目的依赖管理, build的docker镜像拉取的官方的<a href="https://store.docker.com/images/golang?tab=description" target="_blank" rel="external">golang官方镜像</a>, 按照镜像的使用说明:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run --rm -v <span class="string">"<span class="variable">$PWD</span>"</span>:/usr/src/myapp -w /usr/src/myapp golang:1.6 go build -v</div></pre></td></tr></table></figure></p>
<p>但是却没有成功, 我项目下面的vendor的依赖并没有被go找到。</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>在各种google之后也没找到原因。仔细观察官方的示例才发现，使用vendor功能时包都在$GOPATH/src下，测试了一下，果然是这样。只有在$GOPATH/src下的包，才能使用vendor目录存放依赖包。</p>
<p>现在go对不在$GOPATH/src下开发的项目限制越来越多，所以解决办法就很明显了, 将项目挂到GOPATH的src下面, 查下镜像的后发现GOPATH就是/go，所以解决办法是这样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run --rm -v <span class="string">"<span class="variable">$PWD</span>"</span>:/go/src/myapp -w /go/src/myapp golang:1.6 go build -v</div></pre></td></tr></table></figure></p>
<p>注意 将myapp替换成你项目真正的名称。</p>
<h2 id="多平台打包"><a href="#多平台打包" class="headerlink" title="多平台打包"></a>多平台打包</h2><p>通过在docker中进行交叉编译，产出各种平台的二进制文件。</p>
<h3 id="本地编译"><a href="#本地编译" class="headerlink" title="本地编译"></a>本地编译</h3><p>简单来讲，本地编译就是以 本地环境作为软件运行的目标环境来进行 程序的编译, 因此如果你本地环境是Mac，那么就只能编译darwin平台的，如果你本地是Linux就只能编译出Linux平台的。如果你需要发布多种平台的软件，那么你就需要准备多种环境, 来进行分别build, 这是极其不便的。</p>
<p>而且对于一些嵌入式设备而言，其性能有限, 比如低配的ARM平台, 很多情况下无法胜任本地编译。</p>
<p>但是本地编译也有他的优点: 本地环境的原生性，有助于保障程序编译后的稳定性和可靠性, 因此本地编译是最可靠的一种手段。</p>
<h3 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h3><p>简单地说，就是在一个平台上生成另一个平台上的可执行程序, 所以带来了很大的方便性, 不用准备那么多平台的环境了。</p>
<p>要进行交叉编译, 那么必须准备好交叉编译的环境, 交叉编译环境一般由 交叉编译器和工具包组成, 如果你使用c/c++那么你需要 下载集成好的交叉编译环境，也可以自己制作 （比较复杂，建议读者下载集成好的交叉编译环境）, 但是这些Golang早已经看穿了, 在Golang的工具链上已经集成好了, 因此直接使用即可。</p>
<p>接下来介绍Golang中的交叉编译。</p>
<h3 id="Golang中的交叉编译"><a href="#Golang中的交叉编译" class="headerlink" title="Golang中的交叉编译"></a>Golang中的交叉编译</h3><p>Golang的交叉编译依赖2个环境变量的控制:</p>
<ul>
<li>$GOARCH 目标平台（编译后的目标平台）的处理器架构（386、amd64、arm）</li>
<li>$GOOS 目标平台（编译后的目标平台）的操作系统（darwin、freebsd、linux、windows）</li>
</ul>
<p>交叉编译的系统要求:</p>
<table>
<thead>
<tr>
<th>OS</th>
<th style="text-align:center">ARCH</th>
<th style="text-align:right">OS version    </th>
</tr>
</thead>
<tbody>
<tr>
<td>linux</td>
<td style="text-align:center">386/amd64/arm</td>
<td style="text-align:right">&gt;= Linux 2.6</td>
</tr>
<tr>
<td>darwin</td>
<td style="text-align:center">386/amd64</td>
<td style="text-align:right">OS X (Snow Leapard + Lion)</td>
</tr>
<tr>
<td>freebsd</td>
<td style="text-align:center">386/amd64</td>
<td style="text-align:right">&gt;= FreeBSD 7</td>
</tr>
<tr>
<td>windows</td>
<td style="text-align:center">386/amd64</td>
<td style="text-align:right">&gt;= Windows 2000</td>
</tr>
</tbody>
</table>
<p>进行交叉编译(尽量减少依赖,方便直接放入docker运行, 所以编译时禁用的CGO):<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 如果你想在Windows 32位系统下运行</span></div><div class="line">$ CGO_ENABLED=0 GOOS=windows GOARCH=386 go build</div><div class="line"><span class="comment"># 如果你想在Windows 64位系统下运行</span></div><div class="line">$ CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build</div><div class="line"></div><div class="line"><span class="comment"># 如果你想在Linux 32位系统下运行</span></div><div class="line">$ CGO_ENABLED=0 GOOS=linux GOARCH=386 go build</div><div class="line"><span class="comment"># 如果你想在Linux 64位系统下运行</span></div><div class="line">$ CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在CI和CD环境中,  goalng源码程序往往需要build不同平台的二进制程序, 这时候使用容器是一个不错的选择, 因为build完成后,我们可以立即释放容器, 而且也保证了build环境的干净。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="docker" scheme="https://blog.yumaojun.net/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Golang IO系列(一) - 基本的IO接口</title>
    <link href="https://blog.yumaojun.net/2017/05/06/golang-io/"/>
    <id>https://blog.yumaojun.net/2017/05/06/golang-io/</id>
    <published>2017-05-06T00:39:00.000Z</published>
    <updated>2017-06-05T02:42:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Golang开发过程中零零散散会遇到各种IO操作, 每次百度Google也能解决, 大概用法也还是清楚, 但是缺少系统性的全面了解, 也搞不清楚, 使用哪个方式才是最优的, 因此打算全面读一遍标准库中与io相关的源码, 总结成一系列的博客。<br><a id="more"></a></p>
<h2 id="这一系列"><a href="#这一系列" class="headerlink" title="这一系列"></a>这一系列</h2><p>这是这一系列的一个开篇, 主要讲标准库中的一些io相关, 整个系列打算写7篇:</p>
<p>基础篇</p>
<ul>
<li>基本的IO接口(io)</li>
<li>高级的IO接口(ioutil)</li>
<li>IO的格式化(fmt)</li>
<li>IO的缓冲(bufio)</li>
</ul>
<p>运用篇</p>
<ul>
<li>字符串操作(strings.Reader)</li>
<li>字节操作(bytes.buffer)</li>
<li>文件操作(os.File)</li>
</ul>
<h2 id="IO的概念"><a href="#IO的概念" class="headerlink" title="IO的概念"></a>IO的概念</h2><p>IO在计算机中指Input/Output，也就是输入和输出。由于程序和运行时数据是在内存中驻留，由CPU这个超快的计算核心来执行，涉及到数据交换的地方，通常是磁盘、网络等，就需要IO接口。各种语言一般都会提供IO库供开发者使用。Go语言也不例外。<br>Input指往内存中读取数据, 比如读取文件, 读取服务器响应的网络数据, 在Golang的IO接口中主要以Reader来完成。<br>Outout指从内存中往外发送数据, 比如将数据保存回磁盘的文件, 作为服务端时，返回客户需要的数据, 在Golang的IO接口中主要以Writer来完成。<br>在IO编程中，还有一个很重要的概念:<code>Stream(流)</code>, 可以把流想象成一个水管，数据就是水管里的水，但是只能单向流动。Input Stream就是数据从外面（磁盘、网络）流进内存，Output Stream就是数据从内存流到外面去。而像水管这样的东西，在不同语言里基本都有一个一样的名称:<code>pipe</code>, Golang中关于pipe的一些功能函数都定义在这个文件里面。</p>
<h2 id="IO包的文件"><a href="#IO包的文件" class="headerlink" title="IO包的文件"></a>IO包的文件</h2><p>不要有恐惧心理, IO标准库的代码量其实并不多, 除去test和example, 剩下的模块其实就5个(io.go, multi.go, pipe.go, ioutil.go, tempfile.go), 总共也才千余行代码，而且还有将近一半是注释。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">➜  io tree .</div><div class="line">.</div><div class="line">├── example_test.go</div><div class="line">├── io.go</div><div class="line">├── io_test.go</div><div class="line">├── ioutil</div><div class="line">│   ├── example_test.goF</div><div class="line">│   ├── ioutil.go</div><div class="line">│   ├── ioutil_test.go</div><div class="line">│   ├── tempfile.go</div><div class="line">│   └── tempfile_test.go</div><div class="line">├── multi.go</div><div class="line">├── multi_test.go</div><div class="line">├── pipe.go</div><div class="line">└── pipe_test.go</div><div class="line"></div><div class="line">1 directory, 12 files</div></pre></td></tr></table></figure></p>
<p>这篇博客主要关注io.go，multi.go, pipe.go 3个文件。</p>
<h2 id="从IO包的注解开始讲起"><a href="#从IO包的注解开始讲起" class="headerlink" title="从IO包的注解开始讲起"></a>从IO包的注解开始讲起</h2><p>io包为I/O原语提供了基本的接口。它主要功能是包装了这些原语的已有实现, 这个描述得有点绕, 直白来说: IO表示的是一个过程(输入与输出), IO包就是将输入与输出的规范定义清楚(一些通用的接口和函数), 而具体的输入什么,输出什么, 是由具体的对象来实现,比如后面应用时需要讲到的strings, bytes, file等。<br>由于这些接口和原语以不同的实现包装了低级操作，因此除非另行通知，否则客户端不应假定它们对于并行执行是安全的。</p>
<h3 id="io-go源码分析"><a href="#io-go源码分析" class="headerlink" title="io.go源码分析"></a>io.go源码分析</h3><p>我们先从IO包的核心文件io.go开始读起, 该文件主要定义了单路读写的相关规范</p>
<h4 id="基础IO接口的定义"><a href="#基础IO接口的定义" class="headerlink" title="基础IO接口的定义"></a>基础IO接口的定义</h4><p>基础接口涉及到读，写，关闭，以及指针位置这4个方面。</p>
<ul>
<li>Reader: 数据读取的方法: Read, 如果对象是一个Reader对象,那么我们就能调用Read读取其中的数据。</li>
<li>ReadAt: 从偏移量off处开始读取数据的方法: ReadAt</li>
<li>ReaderFrom: 从一个Reader对象中读入数据: ReaderFrom, 方便对象之间的数据读取。</li>
<li>Writer: 定义了数据写入的方法: Write, 如果对象是一个Writer对象, 那么我们就能调用Write往该对象写入数据。</li>
<li>WriterAt: 从偏移量off处开始写入数据的方法: WriterAt</li>
<li>WriterTo: 往一个Writer对象中写入数据: WriterTo, 方便对象之间的数据写入。</li>
<li>Closer: 定义了关闭数据流的方法。</li>
<li>Seeker: 定义设置读写时 偏移量(偏移指针)的值。</li>
</ul>
<h5 id="读接口和函数"><a href="#读接口和函数" class="headerlink" title="读接口和函数"></a>读接口和函数</h5><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</div><div class="line">	Read(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> ReaderAt <span class="keyword">interface</span> &#123;</div><div class="line">	ReadAt(p []<span class="keyword">byte</span>, off <span class="keyword">int64</span>) (n <span class="keyword">int</span>, err error)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> WriterTo <span class="keyword">interface</span> &#123;</div><div class="line">	WriteTo(w Writer) (n <span class="keyword">int64</span>, err error)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Read: 将len(p)个字节读取到p中。它返回读取的字节数n（0 &lt;= n &lt;= len(p)）以及任何遇到的错误, 也就是说，当Read方法返回错误时，不代表没有读取到任何数据。调用者应该处理返回的任何数据，之后才处理可能的错误。</li>
<li>ReadAt: 从基本输入源的偏移量off处开始，将len(p)个字节读取到p中。它返回读取的字节数n（0 &lt;= n &lt;= len(p)）以及任何遇到的错误。</li>
<li>WriterTo: 将数据写入w中，直到没有数据可写或发生错误。其返回值n为写入的字节数。 在写入过程中遇到的任何错误也将被返回, 这个和ReadFrom对比着看, ReadFrom从Reader对象中直接读取数据，而WriterTo可以直接往一个Writer中写入数据.<br>strings的reader实现了这3个接口，以他为例,具体可以参考strings reader的源码.<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	content := <span class="string">"example for io.Read, io.ReadAt, io.WriteTo"</span></div><div class="line">	reader := strings.NewReader(content)</div><div class="line">	read := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">50</span>)</div><div class="line">	readAt := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">50</span>)</div><div class="line"></div><div class="line">	<span class="comment">// 通过Read读取所有数据,如果读取完成，读指针已经移到最后</span></div><div class="line">	<span class="comment">// 通过Len可以知道还剩多少没读，因为指针位置Reader没有实现暴露</span></div><div class="line">	reader.Read(read)</div><div class="line">	fmt.Println(<span class="string">"read:"</span>, <span class="keyword">string</span>(read))</div><div class="line">	fmt.Println(<span class="string">"unread:"</span>, reader.Len())</div><div class="line"></div><div class="line">	<span class="comment">// 通过ReadAt从第9个字符开始读取,但是没有移到读指针的位置(io.ReadAt的规范)</span></div><div class="line">	reader.ReadAt(readAt, <span class="number">8</span>)</div><div class="line">	fmt.Println(<span class="string">"readAt:"</span>, <span class="keyword">string</span>(readAt))</div><div class="line"></div><div class="line">	<span class="comment">// 由于读指针已经移到最后, 所以需要恢复</span></div><div class="line">	<span class="comment">// 将reader的数据直接输出给writer, </span></div><div class="line">	reader.Seek(<span class="number">0</span>, <span class="number">0</span>)</div><div class="line">	reader.WriteTo(os.Stdout)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>跟Reader有关的函数:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// LimitReader</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">LimitReader</span><span class="params">(r Reader, n <span class="keyword">int64</span>)</span> <span class="title">Reader</span></span> &#123; <span class="keyword">return</span> &amp;LimitedReader&#123;r, n&#125; &#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> LimitedReader <span class="keyword">struct</span> &#123;</div><div class="line">	R Reader <span class="comment">// underlying reader</span></div><div class="line">	N <span class="keyword">int64</span>  <span class="comment">// max bytes remaining</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LimitedReader)</span> <span class="title">Read</span><span class="params">(p []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> l.N &lt;= <span class="number">0</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>, EOF</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> <span class="keyword">int64</span>(<span class="built_in">len</span>(p)) &gt; l.N &#123;</div><div class="line">		p = p[<span class="number">0</span>:l.N]</div><div class="line">	&#125;</div><div class="line">	n, err = l.R.Read(p)</div><div class="line">	l.N -= <span class="keyword">int64</span>(n)</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// TeeReader</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">TeeReader</span><span class="params">(r Reader, w Writer)</span> <span class="title">Reader</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> &amp;teeReader&#123;r, w&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> teeReader <span class="keyword">struct</span> &#123;</div><div class="line">	r Reader</div><div class="line">	w Writer</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *teeReader)</span> <span class="title">Read</span><span class="params">(p []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</div><div class="line">	n, err = t.r.Read(p)</div><div class="line">	<span class="keyword">if</span> n &gt; <span class="number">0</span> &#123;</div><div class="line">		<span class="keyword">if</span> n, err := t.w.Write(p[:n]); err != <span class="literal">nil</span> &#123;</div><div class="line">			<span class="keyword">return</span> n, err</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ReadAtLeast</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadAtLeast</span><span class="params">(r Reader, buf []<span class="keyword">byte</span>, min <span class="keyword">int</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(buf) &lt; min &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>, ErrShortBuffer</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> n &lt; min &amp;&amp; err == <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">var</span> nn <span class="keyword">int</span></div><div class="line">		nn, err = r.Read(buf[n:])</div><div class="line">		n += nn</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> n &gt;= min &#123;</div><div class="line">		err = <span class="literal">nil</span></div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> n &gt; <span class="number">0</span> &amp;&amp; err == EOF &#123;</div><div class="line">		err = ErrUnexpectedEOF</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ReadFull</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadFull</span><span class="params">(r Reader, buf []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> ReadAtLeast(r, buf, <span class="built_in">len</span>(buf))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><p>LimitReader: 返回一个LimitReader结构体, 从R读取但将返回的数据量限制为N字节。每调用一次Read都将更新N来反应新的剩余数量。如果你的读buf大于限制的长度, 将一次读取完, 如果你的buf小于限制长度, 则只有多次循环读取, 从而起到限制读取的作用。</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io"</span></div><div class="line">	<span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	content := <span class="string">"This is limitReader example"</span></div><div class="line">	reader := strings.NewReader(content)</div><div class="line"></div><div class="line">	i := <span class="number">1</span></div><div class="line">	<span class="comment">// 不做限制，读取所有的内容</span></div><div class="line">	limitReader := &amp;io.LimitedReader&#123;R: reader, N: <span class="keyword">int64</span>(<span class="built_in">len</span>(content))&#125;</div><div class="line">	<span class="keyword">for</span> limitReader.N &gt; <span class="number">0</span> &#123;</div><div class="line">		<span class="comment">// 限制性读取, 一次读取4字节</span></div><div class="line">		tmp := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4</span>)</div><div class="line">		limitReader.Read(tmp)</div><div class="line">		fmt.Printf(<span class="string">"第%d次: %s\n"</span>, i, tmp)</div><div class="line">		i++</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>TeeReader: 返回一个 Reader，它将从r中读到的数据写入w中。所有经由它处理的从r的读取都匹配于对应的对w的写入。它没有内部缓存，即写入必须在读取完成前完成。任何在写入时遇到的错误都将作为读取错误返回,也就是说，我们通过Reader读取内容后，会自动写入到Writer中去</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> (</div><div class="line">		err error</div><div class="line">		nn  <span class="keyword">int</span></div><div class="line">		n   <span class="keyword">int</span></div><div class="line">	)</div><div class="line">	content := <span class="string">"This is teeReader example\n"</span></div><div class="line"></div><div class="line">	<span class="comment">// 复制一份流到标准输出</span></div><div class="line">	reader := io.TeeReader(strings.NewReader(content), os.Stdout)</div><div class="line">	p := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(content))</div><div class="line">	n, err = reader.Read(p)</div><div class="line"></div><div class="line">	<span class="comment">// 读完数据</span></div><div class="line">	<span class="keyword">for</span> err != io.EOF &#123;</div><div class="line">		nn, err = reader.Read(p[n:])</div><div class="line">		n += nn</div><div class="line">	</div><div class="line"></div><div class="line">	fmt.Printf(<span class="string">"my read: %s"</span>, <span class="keyword">string</span>(p))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>ReadAtLeast:将r读取到buf中，直到读了最少min个字节为止,因此buf必须大于最小字节数,不然就会报错(buf小了), 这个和LimitReader功能类似, 但是</p>
</li>
<li>ReadFull: 精确地从r中将len(buf)个字节读取到buf中,将buf读满, 实际上ReadFull就是调用的ReadAtLeast来将buf填满的,<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">	content := <span class="string">"This is readFull example\n"</span></div><div class="line"></div><div class="line">	p := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(content))</div><div class="line"></div><div class="line">	_, err := io.ReadFull(strings.NewReader(content), p)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fmt.Printf(<span class="string">"my read: %s"</span>, <span class="keyword">string</span>(p))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="写接口和函数"><a href="#写接口和函数" class="headerlink" title="写接口和函数"></a>写接口和函数</h5><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</div><div class="line">	Write(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> ReaderFrom <span class="keyword">interface</span> &#123;</div><div class="line">	ReadFrom(r Reader) (n <span class="keyword">int64</span>, err error)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> WriterAt <span class="keyword">interface</span> &#123;</div><div class="line">	WriteAt(p []<span class="keyword">byte</span>, off <span class="keyword">int64</span>) (n <span class="keyword">int</span>, err error)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Writer: 将p中len(p)个字节的数据写入到基本数据流中, 它返回从p中被写入的字节数n（0 &lt;= n &lt;= len(p)）以及任何遇到的引起写入提前停止的错误.</li>
<li>WriterAt:  和ReadAt相对，从p中将len(p)个字节写入到偏移量off处的基本数据流中,即从偏移量off处开始写入</li>
<li>ReadFrom: 函数将io.Reader作为参数，也就是说，ReadFrom可以从任意Reader对象中读取数据，只要来源实现了io.Reader接口。比如，我们可以从标准输入、文件、字符串等读取数据。<br>bufio实现了Writer和ReadFrom, 没实现WriterAt, 我这里没扩展，因为Writer都在工厂模式的保护下，所有属性都没暴露，扩展起来不方便:<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"bufio"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	content := <span class="string">"example for io.Writer, io.ReadFrom"</span></div><div class="line">	writer := bufio.NewWriter(os.Stdout)</div><div class="line"></div><div class="line">	<span class="comment">// 直接byte往标准输出写入</span></div><div class="line">	writer.Write([]<span class="keyword">byte</span>(content))</div><div class="line">	writer.Flush()</div><div class="line"></div><div class="line">	fmt.Println()</div><div class="line"></div><div class="line">	<span class="comment">// 为了方便其实也直接直接写入string</span></div><div class="line">	writer.WriteString(content)</div><div class="line">	writer.Flush()</div><div class="line"></div><div class="line">	fmt.Println()</div><div class="line"></div><div class="line">	<span class="comment">// 从Reader中读出数据,然后再往标准输出写入</span></div><div class="line">	reader := strings.NewReader(content)</div><div class="line">	writer.ReadFrom(reader)</div><div class="line">	writer.Flush()</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>跟Writer有关的函数:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">WriteString</span><span class="params">(w Writer, s <span class="keyword">string</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> sw, ok := w.(stringWriter); ok &#123;</div><div class="line">		<span class="keyword">return</span> sw.WriteString(s)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> w.Write([]<span class="keyword">byte</span>(s))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>WriteString: 将字符串内容写入到writer中, 如果writer实现了WriteString则直接调用它的方法写入,如果没有则直接调用Write处理成bytes写入, 具体上面已经有栗子了.</li>
</ul>
<h5 id="关闭与偏移量"><a href="#关闭与偏移量" class="headerlink" title="关闭与偏移量"></a>关闭与偏移量</h5><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Closer <span class="keyword">interface</span> &#123;</div><div class="line">	Close() error</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Seek whence values.</span></div><div class="line"><span class="keyword">const</span> (</div><div class="line">	SeekStart   = <span class="number">0</span> <span class="comment">// seek relative to the origin of the file</span></div><div class="line">	SeekCurrent = <span class="number">1</span> <span class="comment">// seek relative to the current offset</span></div><div class="line">	SeekEnd     = <span class="number">2</span> <span class="comment">// seek relative to the end</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Seeker <span class="keyword">interface</span> &#123;</div><div class="line">	Seek(offset <span class="keyword">int64</span>, whence <span class="keyword">int</span>) (<span class="keyword">int64</span>, error)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Closer: 该接口比较简单，只有一个Close()方法，用于关闭数据流, 比如数据库连接, 文件等。</li>
<li>Seeker: 设置下一次Read或Write的偏移量(offset)，它的解释取决于 whence: 0表示相对于文件的起始处，1表示相对于当前的偏移，而2表示相对于其结尾处。 Seek返回新的偏移量和一个错误，如果有的话。也就是说，Seek方法用于设置偏移量的，这样可以从某个特定位置开始操作数据流。听起来和ReaderAt/WriteAt接口有些类似，不过Seeker接口更灵活，可以更好的控制读写数据流的位置。<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	content := <span class="string">"字Seek测试读取指定位置的字符"</span></div><div class="line">	reader := strings.NewReader(content)</div><div class="line"></div><div class="line">	<span class="comment">// 读取倒数第5个字符, 由于string reader设计的原因</span></div><div class="line">	<span class="comment">// 无论是ReadAt, WriteAt还是Seek这里面的offset</span></div><div class="line">	<span class="comment">// 都指的是byte个数, 并且index累加的也是byte,所以</span></div><div class="line">	<span class="comment">// 就坑爹了，要取第5个字符实际上的byte位置是5*3</span></div><div class="line">	<span class="comment">// 注意utf8 是变长编码的, 所以并不是所有的中文都是3字节哦!</span></div><div class="line">	<span class="comment">// 所有这种方式是有问题的, 还是以字符个数进行计算合适</span></div><div class="line">	reader.Seek(<span class="number">-15</span>, <span class="number">2</span>)</div><div class="line">	r, s, err := reader.ReadRune()</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line">	fmt.Println(s)</div><div class="line">	fmt.Printf(<span class="string">"%c\n"</span>, r)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="组合衍生的IO接口"><a href="#组合衍生的IO接口" class="headerlink" title="组合衍生的IO接口"></a>组合衍生的IO接口</h4><ul>
<li>ReadWriter</li>
<li>ReadCloser</li>
<li>WriteCloser</li>
<li>ReadWriteCloser</li>
<li>ReadSeeker</li>
<li>WriteSeeker</li>
<li>ReadWriteSeeker </li>
</ul>
<p>这些都是基于上面单个接口组合而成, 理解上面的基础过会，这个就不多说了。</p>
<h4 id="IO-Copy相关"><a href="#IO-Copy相关" class="headerlink" title="IO Copy相关"></a>IO Copy相关</h4><p>这里主要介绍和Copy相关的函数:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">CopyN</span><span class="params">(dst Writer, src Reader, n <span class="keyword">int64</span>)</span> <span class="params">(written <span class="keyword">int64</span>, err error)</span></span></div><div class="line"></div><div class="line"><span class="title">func</span> <span class="title">Copy</span><span class="params">(dst Writer, src Reader)</span> <span class="params">(written <span class="keyword">int64</span>, err error)</span></div><div class="line"></div><div class="line"><span class="title">func</span> <span class="title">CopyBuffer</span><span class="params">(dst Writer, src Reader, buf []<span class="keyword">byte</span>)</span> <span class="params">(written <span class="keyword">int64</span>, err error)</span></div></pre></td></tr></table></figure></p>
<ul>
<li>CopyN: 将n个字节从src复制到dst. 它返回复制的字节数以及在复制时遇到的最早的错误.</li>
<li>Copy: 将src复制到dst，直到在src上到达EOF或发生错误。它返回复制的字节数，如果有的话，还会返回在复制时遇到的第一个错误。</li>
<li>CopyBuffer: 相当于 Copy，只不 Copy 在执行的过程中会创建一个临时的缓冲区来中转数据，而 CopyBuffer 则可以单独提供一个缓冲区让多个复制操作共用同一个缓冲区，避免每次复制操作都创建新的缓冲区。如果 buf == nil，则 CopyBuffer 会自动创建缓冲区。</li>
</ul>
<p>举一组栗子:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	content := <span class="string">"Copy相关操作的测试\n"</span></div><div class="line"></div><div class="line">	reader := strings.NewReader(content)</div><div class="line">	writer := os.Stdout</div><div class="line"></div><div class="line">	<span class="comment">// copy 10 个字节4的Ascii和2个中文</span></div><div class="line">	io.CopyN(writer, reader, <span class="number">10</span>)</div><div class="line">	fmt.Println()</div><div class="line"></div><div class="line">	<span class="comment">// 重置读指针,从新完成1次完整的copy</span></div><div class="line">	reader.Seek(<span class="number">0</span>, <span class="number">0</span>)</div><div class="line">	io.Copy(writer, reader)</div><div class="line"></div><div class="line">	<span class="comment">// 创建一个32字节的缓存用于所有copy使用,不用再开辟临时缓存</span></div><div class="line">	buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">32</span>)</div><div class="line">	r1 := strings.NewReader(<span class="string">"CopyBuffer测试第一次\n"</span>)</div><div class="line">	io.CopyBuffer(writer, r1, buf)</div><div class="line"></div><div class="line">	r2 := strings.NewReader(<span class="string">"CopyBuffer测试第二次\n"</span>)</div><div class="line">	io.CopyBuffer(writer, r2, buf)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Byte和Rune类型IO相关"><a href="#Byte和Rune类型IO相关" class="headerlink" title="Byte和Rune类型IO相关"></a>Byte和Rune类型IO相关</h4><p>针对基础数据结构的IO读写,大概有如下几类:Byte, Rune, Section, 主要定义了如何读取一个字节和一个Unicode字符的规范, 一般地，我们不会使用bytes.Buffer来一次读取或写入一个字节, 但是在处理二进制数据和数据压缩时 这些接口用得比较多。</p>
<ul>
<li>RuneReader: 读取单个UTF-8字符, 返回其rune和该字符占用的字节</li>
<li>RuneScanner: 相较于RuneReader而言, 仅增加了一个UnreadByt接口, UnreadByte方法的意思是：将上一次ReadByte的字节还原，使得再次调用ReadByte返回的结果和上一次调用相同，也就是说，UnreadByte是重置上一次的ReadByte。注意，UnreadByte调用之前必须调用了ReadByte，且不能连续调用UnreadByte。</li>
<li>ByteReader: 读一个字节.</li>
<li>ByteWriter: 写一个字节.</li>
<li>ByteScanner: 和RuneScanner类似, 只是针对的式Byte而已.</li>
</ul>
<p>结构体</p>
<ul>
<li>SectionReader: 这是用于读取磁盘扇区的接口, 由于基本不会使用到, 因此不做解读了.</li>
</ul>
<h3 id="multi-go源码分析"><a href="#multi-go源码分析" class="headerlink" title="multi.go源码分析"></a>multi.go源码分析</h3><p>该文件主要定义了多路读写的相关规范,这里的多路指的是对多个reader或者多个writer同时的动作,它们接收多个Reader或Writer，返回一个Reader或Writer。我们可以猜想到这两个函数就是操作多个Reader或Writer就像操作一个。事实上，在io包中定义了两个非导出类型：mutilReader和multiWriter，它们分别实现了io.Reader和io.Writer接口<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> multiReader <span class="keyword">struct</span> &#123;</div><div class="line">	readers []Reader</div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> multiWriter <span class="keyword">struct</span> &#123;</div><div class="line">	writers []Writer</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">MultiReader</span><span class="params">(readers ...Reader)</span> <span class="title">Reader</span> </span></div><div class="line"><span class="title">func</span> <span class="title">MultiWriter</span><span class="params">(writers ...Writer)</span> <span class="title">Writer</span></div></pre></td></tr></table></figure></p>
<ul>
<li>MultiReader: 逻辑上将多个Reader组合起来，返回一个新的Reader, 但是这个新Reader并不能通过调用一次Read方法获取所有Reader的内容。因为它这个逻辑真的特别简单, 循环读取所有的Reader, 读完一个返回一个, 只是正常读完过后的EOF被重置为nil, 这样的结果就是 我们还得在外面再次循环读取一次, 直到EOF<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"bytes"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io"</span></div><div class="line">	<span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">	readers := []io.Reader&#123;</div><div class="line">		strings.NewReader(<span class="string">"from strings reader\n"</span>),</div><div class="line">		bytes.NewBufferString(<span class="string">"from bytes buffer\n"</span>),</div><div class="line">	&#125;</div><div class="line">	reader := io.MultiReader(readers...)</div><div class="line"></div><div class="line">	data := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">0</span>, <span class="number">1024</span>)</div><div class="line"></div><div class="line">	<span class="comment">// 循环读取每个reader返回的内容来拼接,</span></div><div class="line">	<span class="comment">// 直到所有reader读取后返回EOF停止</span></div><div class="line">	<span class="keyword">for</span> n, err := <span class="number">0</span>, error(<span class="literal">nil</span>); err != io.EOF; &#123;</div><div class="line">		tmp := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">512</span>)</div><div class="line">		n, err = reader.Read(tmp)</div><div class="line">		data = <span class="built_in">append</span>(data, tmp[:n]...)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fmt.Printf(<span class="string">"%s"</span>, data)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>像上面这样使用显然有点麻烦, 比较方便的使用方式还是聚合过后直接使用io.Copy来搞定<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"bytes"</span></div><div class="line">	<span class="string">"io"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">	readers := []io.Reader&#123;</div><div class="line">		strings.NewReader(<span class="string">"from strings reader\n"</span>),</div><div class="line">		bytes.NewBufferString(<span class="string">"from bytes buffer\n"</span>),</div><div class="line">	&#125;</div><div class="line">	reader := io.MultiReader(readers...)</div><div class="line"></div><div class="line">	io.Copy(os.Stdout, reader)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>MultiWriter: 和MultiReader类似, 将多个writer聚合都一个slice里面, 然后用for循环写, 实际上就是将向自身写入的数据同步写入到所有writers中<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"io"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">	<span class="comment">// 直接来2个writer</span></div><div class="line">	writers := []io.Writer&#123;</div><div class="line">		os.Stdout,</div><div class="line">		os.Stderr,</div><div class="line">	&#125;</div><div class="line">	writer := io.MultiWriter(writers...)</div><div class="line">	writer.Write([]<span class="keyword">byte</span>(<span class="string">"hello,world\n"</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="pipe-go源码分析"><a href="#pipe-go源码分析" class="headerlink" title="pipe.go源码分析"></a>pipe.go源码分析</h3><p>该文件主要定义了流式IO的相关规范,主要就是Pipe, Pipe在内存中创建一个同步管道，用于不同区域的代码之间相互传递数据, 因此和无缓冲channel很像，因此不能在一个goroutine中进行读和写。同样 由于管道没有缓存区, 所以和channel一样 对于读写和关闭都是 并行安全的。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// A pipe is the shared pipe structure underlying PipeReader and PipeWriter.</span></div><div class="line"><span class="keyword">type</span> pipe <span class="keyword">struct</span> &#123;</div><div class="line">	rl    sync.Mutex <span class="comment">// gates readers one at a time</span></div><div class="line">	wl    sync.Mutex <span class="comment">// gates writers one at a time</span></div><div class="line">	l     sync.Mutex <span class="comment">// protects remaining fields</span></div><div class="line">	data  []<span class="keyword">byte</span>     <span class="comment">// data remaining in pending write</span></div><div class="line">	rwait sync.Cond  <span class="comment">// waiting reader</span></div><div class="line">	wwait sync.Cond  <span class="comment">// waiting writer</span></div><div class="line">	rerr  error      <span class="comment">// if reader closed, error to give writes</span></div><div class="line">	werr  error      <span class="comment">// if writer closed, error to give reads</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// A PipeReader is the read half of a pipe.</span></div><div class="line"><span class="keyword">type</span> PipeReader <span class="keyword">struct</span> &#123;</div><div class="line">	p *pipe</div><div class="line">&#125;</div><div class="line"><span class="comment">// A PipeWriter is the write half of a pipe.</span></div><div class="line"><span class="keyword">type</span> PipeWriter <span class="keyword">struct</span> &#123;</div><div class="line">	p *pipe</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Pipe</span><span class="params">()</span> <span class="params">(*PipeReader, *PipeWriter)</span></span> &#123;</div><div class="line">	p := <span class="built_in">new</span>(pipe)</div><div class="line">	p.rwait.L = &amp;p.l</div><div class="line">	p.wwait.L = &amp;p.l</div><div class="line">	r := &amp;PipeReader&#123;p&#125;</div><div class="line">	w := &amp;PipeWriter&#123;p&#125;</div><div class="line">	<span class="keyword">return</span> r, w</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>PipeReader: 是管道的读取端。它实现了io.Reader和io.Closer接口，如果管道被关闭，则会返会一个错误信息：<ol>
<li>如果写入端通过 CloseWithError 方法关闭了管道，则返回关闭时传入的错误信息。</li>
<li>如果写入端通过 Close 方法关闭了管道，则返回 io.EOF。</li>
<li>如果是读取端关闭了管道，则返回 io.ErrClosedPipe。</li>
</ol>
</li>
<li>PipeWriter: 是管道的写入端。它实现了io.Writer和io.Closer接口, 如果管道被关闭，则会返会一个错误信息：<ol>
<li>如果读取端通过 CloseWithError 方法关闭了管道，则返回关闭时传入的错误信息。</li>
<li>如果读取端通过 Close 方法关闭了管道，则返回 io.ErrClosedPipe。</li>
<li>如果是写入端关闭了管道，则返回 io.ErrClosedPipe。</li>
</ol>
</li>
<li>Pipe: 它将io.Reader连接到io.Writer。一端的读取匹配另一端的写入，直接在这两端之间复制数据</li>
</ul>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	Pipe()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Pipe</span><span class="params">()</span></span> &#123;</div><div class="line">	rPipe, wPipe := io.Pipe()</div><div class="line">	<span class="keyword">go</span> Read(rPipe)</div><div class="line">	Write(wPipe)</div><div class="line">	time.Sleep(<span class="number">2</span> * time.Second)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Write</span><span class="params">(pipeWriter *io.PipeWriter)</span></span> &#123;</div><div class="line">	_, err := pipeWriter.Write([]<span class="keyword">byte</span>(<span class="string">"Pipe 管道测试"</span>))</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(err)</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 记得写入端关闭Pipe</span></div><div class="line">	pipeWriter.CloseWithError(io.EOF)</div><div class="line"></div><div class="line">	fmt.Println(<span class="string">"写入完成"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Read</span><span class="params">(pipeReader *io.PipeReader)</span></span> &#123;</div><div class="line">	data := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> n, err := <span class="number">0</span>, error(<span class="literal">nil</span>); err != io.EOF; &#123;</div><div class="line">		tmp := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">512</span>)</div><div class="line">		n, err = pipeReader.Read(tmp)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != io.EOF &#123;</div><div class="line">			log.Fatal(err)</div><div class="line">		&#125;</div><div class="line">		data = <span class="built_in">append</span>(data, tmp[:n]...)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fmt.Println(<span class="string">"Data: "</span>, <span class="keyword">string</span>(data))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Golang开发过程中零零散散会遇到各种IO操作, 每次百度Google也能解决, 大概用法也还是清楚, 但是缺少系统性的全面了解, 也搞不清楚, 使用哪个方式才是最优的, 因此打算全面读一遍标准库中与io相关的源码, 总结成一系列的博客。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="io" scheme="https://blog.yumaojun.net/tags/io/"/>
    
  </entry>
  
  <entry>
    <title>使用Golang开发OpenStack服务的CLI</title>
    <link href="https://blog.yumaojun.net/2017/04/23/openstack-golang-cli/"/>
    <id>https://blog.yumaojun.net/2017/04/23/openstack-golang-cli/</id>
    <published>2017-04-23T00:52:09.000Z</published>
    <updated>2017-04-26T06:48:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于我们需要编写自己服务的客户端，之前参考过magnum的python客户端，编写过一个，整体感受就是: 一件简单的事儿，被他封装的很复杂，而且还有一个关键痛点，部署问题: 1.依赖python环境 2. 蹩脚的二进制打包方式。 因此，作为一个产品的CLI，以二进制方式交付会带来诸多方便，比如cloud foundry也用golang重写了他的客户端部分。<br><a id="more"></a></p>
<h2 id="Cobra简介"><a href="#Cobra简介" class="headerlink" title="Cobra简介"></a>Cobra简介</h2><p>在博客的开篇写过一篇cobra的博客: <a href="/2016/12/30/go-cobra/" title="如何使用golang编写漂亮的命令行工具">如何使用golang编写漂亮的命令行工具</a>, 很多流行的CLI都基于这个库开发，比如kubectl, etcdctl, docker等, 基本的概念和用法请参考之前的博客。不喜欢我啰嗦的，<strong>直接看源码</strong>:<a href="https://github.com/yumaojun03/golang/tree/master/app-cli" target="_blank" rel="external">完整代码示例</a></p>
<h2 id="基于RESTful的CLI"><a href="#基于RESTful的CLI" class="headerlink" title="基于RESTful的CLI"></a>基于RESTful的CLI</h2><p>打造的这个CLI是RESTful的客户端, 在RESTful里面以资源(Resource)为核心，因此客户端也需要以资源的形式表现, 比如Docker的 Management Commands:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Management Commands:</div><div class="line">  checkpoint  Manage checkpoints</div><div class="line">  container   Manage containers</div><div class="line">  image       Manage images</div><div class="line">  network     Manage networks</div><div class="line">  node        Manage Swarm nodes</div><div class="line">  plugin      Manage plugins</div><div class="line">  secret      Manage Docker secrets</div><div class="line">  service     Manage services</div><div class="line">  stack       Manage Docker stacks</div><div class="line">  swarm       Manage Swarm</div><div class="line">  system      Manage Docker</div><div class="line">  volume      Manage volumes</div></pre></td></tr></table></figure></p>
<p>该资源允许的操作:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">➜  uniresctl git:(dev_maojun) docker image -h</div><div class="line">Flag shorthand -h has been deprecated, please use --help</div><div class="line"></div><div class="line">Usage:  docker image COMMAND</div><div class="line"></div><div class="line">Manage images</div><div class="line"></div><div class="line">Options:</div><div class="line">      --help   Print usage</div><div class="line"></div><div class="line">Commands:</div><div class="line">  build       Build an image from a Dockerfile</div><div class="line">  <span class="built_in">history</span>     Show the <span class="built_in">history</span> of an image</div><div class="line">  import      Import the contents from a tarball to create a filesystem image</div><div class="line">  inspect     Display detailed information on one or more images</div><div class="line">  load        Load an image from a tar archive or STDIN</div><div class="line">  ls          List images</div><div class="line">  prune       Remove unused images</div><div class="line">  pull        Pull an image or a repository from a registry</div><div class="line">  push        Push an image or a repository to a registry</div><div class="line">  rm          Remove one or more images</div><div class="line">  save        Save one or more images to a tar archive (streamed to STDOUT by default)</div><div class="line">  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</div></pre></td></tr></table></figure></p>
<p>因此, 轮廓上我们需要打造这样一种风格的RESTful CLI</p>
<h2 id="OpenStack服务-CLI"><a href="#OpenStack服务-CLI" class="headerlink" title="OpenStack服务 CLI"></a>OpenStack服务 CLI</h2><p>我们的OpenStack服务是自己开发的, 开发出来的CLI风格想要和Openstack社区风格一致(长相相近), 这东西社区是没有Golang版本的(有的话给我留言, 我真没找到), 因此整个架子需要自己构建, 由于cobra架子比较成熟, 如果只用官方的Flag库来做的话，会有很多重复工作, 因此使用cobra为基础来进行构建。</p>
<p>要做成和Openstack风格类似的CLI, 在cobra的基础上我们需要加入2个组件:</p>
<ul>
<li>keystone认证: 对每一个资源的访问必须通过keystone认证才能访问, 因此认证部分是全局的。</li>
<li>表格输出: OpenstackCLI把资源以Table的方式输出, 这个也需要单独实现。</li>
</ul>
<h2 id="搭建CLI架子"><a href="#搭建CLI架子" class="headerlink" title="搭建CLI架子"></a>搭建CLI架子</h2><p> <code>完整代码的栗子请看Github</code>: <a href="https://github.com/yumaojun03/golang/tree/master/app-cli" target="_blank" rel="external">完整代码示例</a></p>
<p>初始化app, 添加resourceA和resourceB<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cobra init app-cli</div><div class="line">cobra add resourceA</div><div class="line">cobra add resourceB</div></pre></td></tr></table></figure></p>
<p>访问每一个resource都需要经过keystone的认证,因此认证属于一个全局都要执行的逻辑, 必须放在最前面，这里Cobra提供的一组Hook可以解决这个问题</p>
<blockquote>
<p>带错误处理的Hook<br>当处理过程中如果产生了error可以直接return出来, 从而中断命令的继续执行, 因此认证部分我们需要这种带错误处理的Hook, 因为认证失败需要中断请求,<br>其次，cobra 在命令函数的执行前后分别设置了2组Hook, 执行的顺序如下:</p>
<ul>
<li>PersistentPreRunE: 无论函数 执不执行 该函数都会运行</li>
<li>PreRunE: 在函数执行前执行</li>
<li>RunE: 执行函数</li>
<li>PostRunE: 函数执行后执行</li>
<li>PersistentPostRunE: 无论函数 执不执行 该函数都会执行</li>
</ul>
</blockquote>
<p>利用cobra提供的PersistentPreRunE来实现验证功能<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// RootCmd represents the base command when called without any subcommands</span></div><div class="line"><span class="keyword">var</span> RootCmd = &amp;cobra.Command&#123;</div><div class="line">        Use:   <span class="string">"app-cli"</span>,</div><div class="line">        Short: <span class="string">"A brief description of your application"</span>,</div><div class="line">        Long: <span class="string">`A longer description that spans multiple lines and likely contains</span></div><div class="line">examples and usage of using your application. For example:</div><div class="line"></div><div class="line">Cobra is a CLI library for Go that empowers applications.</div><div class="line">This application is a tool to generate the needed files</div><div class="line">to quickly create a Cobra application.`,</div><div class="line">       PersistentPreRunE: auth,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>auth函数实现认证并不难, 关键是auth过后的token 如何传递给后面的子命令使用, 参考etcdctl和docker部分都使用上下文来实现这个需求, cobra里面也没有地方给我存上下文, 因此需要专门用一个模块来保持 全局的上下文, 因此需要手动实现一个common包。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> common</div><div class="line"></div><div class="line"><span class="comment">// GlobalFlag use to contain the all context</span></div><div class="line"><span class="keyword">var</span> GlobalFlag *globalFlag</div><div class="line"></div><div class="line"><span class="keyword">type</span> globalFlag <span class="keyword">struct</span> &#123;</div><div class="line">	endpoint <span class="keyword">string</span></div><div class="line">	token    <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *globalFlag)</span> <span class="title">SetToken</span><span class="params">(token <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">	g.token = token</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *globalFlag)</span> <span class="title">GetToken</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> g.token</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *globalFlag)</span> <span class="title">SetEndPoint</span><span class="params">(url <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">	g.endpoint = url</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *globalFlag)</span> <span class="title">GetEndPoint</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> g.endpoint</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *globalFlag)</span> <span class="title">GetClient</span><span class="params">()</span> *<span class="title">Client</span></span> &#123;</div><div class="line">	client, _ := NewClient(g.endpoint, g.token)</div><div class="line">	<span class="keyword">return</span> client</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> GlobalFlag == <span class="literal">nil</span> &#123;</div><div class="line">		GlobalFlag = &amp;globalFlag&#123;&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后在common包里面添加2个子包: keystone, printTable, keystone 用于实现与keystone认证的过程, printTable用于打印最后结果的表格,具体详情请看源码。</p>
<h2 id="添加资源"><a href="#添加资源" class="headerlink" title="添加资源"></a>添加资源</h2><p>为每一个资源添加5个基础的操作:get, list, create, delete, update。另起一个resourceA的包，实现这些方法，添加到子命令即可， 比如:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line">	RootCmd.AddCommand(resourceACmd)</div><div class="line">	resourceACmd.AddCommand(resourceA.CreateCmd,</div><div class="line">		resourceA.ListCmd,</div><div class="line">		resourceA.GetCmd,</div><div class="line">		resourceA.UpdateCmd,</div><div class="line">		resourceA.DeleteCmd)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>大概效果如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">➜  app-cli git:(master) ✗ go run main.go resourceA -h</div><div class="line">A longer description that spans multiple lines and likely contains examples</div><div class="line">and usage of using your command. For example:</div><div class="line"></div><div class="line">Cobra is a CLI library <span class="keyword">for</span> Go that empowers applications.</div><div class="line">This application is a tool to generate the needed files</div><div class="line">to quickly create a Cobra application.</div><div class="line"></div><div class="line">Usage:</div><div class="line">  app-cli resourceA [flags]</div><div class="line">  app-cli resourceA [<span class="built_in">command</span>]</div><div class="line"></div><div class="line">Available Commands:</div><div class="line">  create      create an resource</div><div class="line">  delete      delete an resource</div><div class="line">  get         get an resource</div><div class="line">  list        list resources</div><div class="line">  update      update an resource</div><div class="line"></div><div class="line">Global Flags:</div><div class="line">      --api-endpoint string            unires service endpoint</div><div class="line">      --auth_url string                keyston auth url</div><div class="line">      --idenntity-api-version string   keystone auth version</div><div class="line">      --password string                keystone auth user password</div><div class="line">      --project-domain-name string     keystone auth user project domain</div><div class="line">      --project-name string            keystone auth user project name</div><div class="line">      --user-domain-name string        keystone auth user domain name</div><div class="line">      --username string                keystone auth user</div><div class="line"></div><div class="line">Use <span class="string">"app-cli resourceA [command] --help"</span> <span class="keyword">for</span> more information about a command.</div></pre></td></tr></table></figure></p>
<h2 id="使用效果"><a href="#使用效果" class="headerlink" title="使用效果"></a>使用效果</h2><p>和使用openstack一样，你需要有一个admin_openrc 用于导入环境变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> OS_USERNAME=admin</div><div class="line"><span class="built_in">export</span> OS_PASSWORD=admin</div><div class="line"><span class="built_in">export</span> OS_PROJECT_NAME=admin.cloud</div><div class="line"><span class="built_in">export</span> OS_USER_DOMAIN_NAME=admin</div><div class="line"><span class="built_in">export</span> OS_PROJECT_DOMAIN_NAME=admin</div><div class="line"><span class="built_in">export</span> OS_AUTH_URL=http://127.0.0.1:35357/v3</div><div class="line"><span class="built_in">export</span> OS_IDENTITY_API_VERSION=3</div><div class="line"><span class="built_in">export</span> UNIRES_ENDPOINT=http://127.0.0.1:8080</div></pre></td></tr></table></figure></p>
<p>比如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> admin_openrc</div><div class="line">./app-cli resourceA get</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于我们需要编写自己服务的客户端，之前参考过magnum的python客户端，编写过一个，整体感受就是: 一件简单的事儿，被他封装的很复杂，而且还有一个关键痛点，部署问题: 1.依赖python环境 2. 蹩脚的二进制打包方式。 因此，作为一个产品的CLI，以二进制方式交付会带来诸多方便，比如cloud foundry也用golang重写了他的客户端部分。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="openstack" scheme="https://blog.yumaojun.net/tags/openstack/"/>
    
      <category term="cobra" scheme="https://blog.yumaojun.net/tags/cobra/"/>
    
  </entry>
  
  <entry>
    <title>golang中mysql连接池使用</title>
    <link href="https://blog.yumaojun.net/2017/04/05/golang-mysql-connection-pool/"/>
    <id>https://blog.yumaojun.net/2017/04/05/golang-mysql-connection-pool/</id>
    <published>2017-04-05T05:08:21.000Z</published>
    <updated>2017-04-06T06:31:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用golang来处理数据库的时候，为了提升性能，往往都会使用连接池，有些人往往会自己实现一个连接池，用来互用mysql连接，但是如果你稍微细心一点， 就会发现内建的sql包已经实现了连接池。sql.Open函数实际上式返回一个连接池对象，而不是单个连接。<br><a id="more"></a></p>
<p>golang本身没有提供链接mysql的驱动，但是却定义了数据库的标准接口(内建的sql包), 第三方开发实现这些接口就完成了相应驱动的开发。第三方提供mysql的驱动比较多，遵循官方sql接口规范的也有好几个, 但是使用最广的,github上星最多应该是<code>https://github.com/go-sql-driver/mysql</code>, 以下的所有操作都以该驱动进行演示。</p>
<h2 id="数据库的基本操作"><a href="#数据库的基本操作" class="headerlink" title="数据库的基本操作"></a>数据库的基本操作</h2><p>这里主要介绍数据库操作中一些常见操作，比如建表，以及数据的增删改查。</p>
<p>首先，我们需要创建一张表，用于存储数据, 我们可以通过db的Exec来执行SQL语句，比如下面是一个创建表的函数:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">createTable</span><span class="params">()</span></span> &#123;</div><div class="line">	db, err := sql.Open(<span class="string">"mysql"</span>, <span class="string">"root:passwd@tcp(127.0.0.1:3306)/test?charset=utf8"</span>)</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	table := <span class="string">`CREATE TABLE IF NOT EXISTS test.user (</span></div><div class="line"> user_id INT(11) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '用户编号',</div><div class="line"> user_name VARCHAR(45) NOT NULL COMMENT '用户名称',</div><div class="line"> user_age TINYINT(3) UNSIGNED NOT NULL DEFAULT 0 COMMENT '用户年龄',</div><div class="line"> user_sex TINYINT(3) UNSIGNED NOT NULL DEFAULT 0 COMMENT '用户性别',</div><div class="line"> PRIMARY KEY (user_id))</div><div class="line"> ENGINE = InnoDB</div><div class="line"> AUTO_INCREMENT = 1</div><div class="line"> DEFAULT CHARACTER SET = utf8</div><div class="line"> COLLATE = utf8_general_ci</div><div class="line"> COMMENT = '用户表'`</div><div class="line"></div><div class="line">	<span class="keyword">if</span> _, err := db.Exec(table); err != <span class="literal">nil</span> &#123;</div><div class="line">		checkErr(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有了表过后，我们需要插入数据, 理论上可以将插入的SQL语句准备好, 填入Exec即可，但是sql已经对这种常用的场景抽象出了一个Prepare方法，<br>Prepare方法将SQL的逻辑和数据剥离开来，通过占位符来生成一个SQL表达式(statement),然后表达式执行时，传入具体的需要插入的数据:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">()</span></span> &#123;</div><div class="line">	db, err := sql.Open(<span class="string">"mysql"</span>, <span class="string">"root:passwd@tcp(127.0.0.1:3306)/test?charset=utf8"</span>)</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	stmt, err := db.Prepare(<span class="string">`INSERT user (user_name,user_age,user_sex) values (?,?,?)`</span>)</div><div class="line">	checkErr(err)</div><div class="line">	res, err := stmt.Exec(<span class="string">"tony"</span>, <span class="number">20</span>, <span class="number">1</span>)</div><div class="line">	checkErr(err)</div><div class="line">	id, err := res.LastInsertId()</div><div class="line">	checkErr(err)</div><div class="line">	fmt.Println(id)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>插入数据过会我们就可以，从中查询数据记录了，查询出来的数据以行为单位进行组织（Rows)， Row包含字段和值，通过rows.Columns()获取字段，通过rows.Next()获取值，<br>这里需要注意Next()这个方法，它和python里面的生成器概要很像，Next返回一个bool值，表示是否有新的row数据准备好了，如果准备好了，使用rows.Scan()来获取准备好的数据<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">query</span><span class="params">()</span></span> &#123;</div><div class="line">	db, err := sql.Open(<span class="string">"mysql"</span>, <span class="string">"root:passwd@tcp(127.0.0.1:3306)/test?charset=utf8"</span>)</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	rows, err := db.Query(<span class="string">"SELECT * FROM user"</span>)</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> rows.Next() &#123;</div><div class="line">	   <span class="keyword">var</span> userId <span class="keyword">int</span></div><div class="line">	   <span class="keyword">var</span> userName <span class="keyword">string</span></div><div class="line">	   <span class="keyword">var</span> userAge <span class="keyword">int</span></div><div class="line">	   <span class="keyword">var</span> userSex <span class="keyword">int</span></div><div class="line"></div><div class="line">	   rows.Columns()</div><div class="line">	   err = rows.Scan(&amp;userId, &amp;userName, &amp;userAge, &amp;userSex)</div><div class="line">	   checkErr(err)</div><div class="line"></div><div class="line">	   fmt.Println(userId)</div><div class="line">	   fmt.Println(userName)</div><div class="line">	   fmt.Println(userAge)</div><div class="line">	   fmt.Println(userSex)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样扫描我们的确能获取到数据，但是数据并没有被友好的组织起来，在python的mysql驱动中提供一个简单方法可以将这些行数据组织成一个dict返回，因此在golang中，我们可以将rows的数据组织成一个map返回，方便使用。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryToMap</span><span class="params">()</span></span> &#123;</div><div class="line">	db, err := sql.Open(<span class="string">"mysql"</span>, <span class="string">"root:passwd@tcp(127.0.0.1:3306)/test?charset=utf8"</span>)</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	rows, err := db.Query(<span class="string">"SELECT * FROM user"</span>)</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	<span class="comment">//字典类型</span></div><div class="line">	<span class="comment">//构造scanArgs、values两个数组，scanArgs的每个值指向values相应值的地址</span></div><div class="line">	columns, _ := rows.Columns()</div><div class="line">	scanArgs := <span class="built_in">make</span>([]<span class="keyword">interface</span>&#123;&#125;, <span class="built_in">len</span>(columns))</div><div class="line">	values := <span class="built_in">make</span>([]<span class="keyword">interface</span>&#123;&#125;, <span class="built_in">len</span>(columns))</div><div class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> values &#123;</div><div class="line">		scanArgs[i] = &amp;values[i]</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> rows.Next() &#123;</div><div class="line">		<span class="comment">//将行数据保存到record字典</span></div><div class="line">		err = rows.Scan(scanArgs...)</div><div class="line">		record := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</div><div class="line">		<span class="keyword">for</span> i, col := <span class="keyword">range</span> values &#123;</div><div class="line">			<span class="keyword">if</span> col != <span class="literal">nil</span> &#123;</div><div class="line">				record[columns[i]] = <span class="keyword">string</span>(col.([]<span class="keyword">byte</span>))</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		fmt.Println(record)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来是数据的更新, 更新和数据的插入原理一致，只是在准备的SQL里面通过WHERE指定条件，以更新指定的数据记录。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">()</span></span> &#123;</div><div class="line">	db, err := sql.Open(<span class="string">"mysql"</span>, <span class="string">"root:passwd@tcp(127.0.0.1:3306)/test?charset=utf8"</span>)</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	stmt, err := db.Prepare(<span class="string">`UPDATE user SET user_age=?,user_sex=? WHERE user_id=?`</span>)</div><div class="line">	checkErr(err)</div><div class="line">	res, err := stmt.Exec(<span class="number">21</span>, <span class="number">2</span>, <span class="number">1</span>)</div><div class="line">	checkErr(err)</div><div class="line">	num, err := res.RowsAffected()</div><div class="line">	checkErr(err)</div><div class="line">	fmt.Println(num)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后是数据的删除，同理<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">()</span></span> &#123;</div><div class="line">	db, err := sql.Open(<span class="string">"mysql"</span>, <span class="string">"root:passwd@tcp(127.0.0.1:3306)/test?charset=utf8"</span>)</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	stmt, err := db.Prepare(<span class="string">`DELETE FROM user WHERE user_id=?`</span>)</div><div class="line">	checkErr(err)</div><div class="line">	res, err := stmt.Exec(<span class="number">1</span>)</div><div class="line">	checkErr(err)</div><div class="line">	num, err := res.RowsAffected()</div><div class="line">	checkErr(err)</div><div class="line">	fmt.Println(num)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="如何设置连接池"><a href="#如何设置连接池" class="headerlink" title="如何设置连接池"></a>如何设置连接池</h2><p>数据库标准接口里面有3个方法用于设置连接池的属性: <code>SetConnMaxLifetime</code>, <code>SetMaxIdleConns</code>, <code>SetMaxOpenConns</code></p>
<ul>
<li>SetConnMaxLifetime: 设置一个连接的最长生命周期，因为数据库本身对连接有一个超时时间的设置，如果超时时间到了数据库会单方面断掉连接，此时再用连接池内的连接进行访问就会出错, 因此这个值往往要小于数据库本身的连接超时时间</li>
<li>SetMaxIdleConns: 连接池里面允许Idel的最大连接数, 这些Idel的连接 就是并发时可以同时获取的连接,也是用完后放回池里面的互用的连接, 从而提升性能。</li>
<li>SetMaxOpenConns: 设置最大打开的连接数，默认值为0表示不限制。控制应用于数据库建立连接的数量，避免过多连接压垮数据库。</li>
</ul>
<p>代码上使用就很简单了, 初始化db时，根据需求设置好连接池。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> db *sql.DB</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line">    db, _ = sql.Open(<span class="string">"mysql"</span>, <span class="string">"root:passwd@tcp(127.0.0.1:3306)/test?charset=utf8"</span>)</div><div class="line">    db.SetMaxOpenConns(<span class="number">2000</span>)</div><div class="line">    db.SetMaxIdleConns(<span class="number">1000</span>)</div><div class="line">	db.SetConnMaxLifetime(time.Minute * <span class="number">60</span>)</div><div class="line">    db.Ping()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h2><p>连接池对性能的提升还是很明显的, 下面我们就测试对比一下 使用连接池和不使用连接池时的性能差别。<br>测试代码如下(不使用连接池时 注释掉连接池相关设置):<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"database/sql"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line"></div><div class="line">	_ <span class="string">"github.com/go-sql-driver/mysql"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> db *sql.DB</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line">	db, _ = sql.Open(<span class="string">"mysql"</span>, <span class="string">"root:passwd@tcp(127.0.0.1:3306)/test?charset=utf8"</span>)</div><div class="line">	db.SetMaxOpenConns(<span class="number">2000</span>)</div><div class="line">	db.SetMaxIdleConns(<span class="number">1000</span>)</div><div class="line">	db.SetConnMaxLifetime(time.Minute * <span class="number">60</span>)</div><div class="line">	db.Ping()</div><div class="line"></div><div class="line">	createTable()</div><div class="line">	insert()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	startHttpServer()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">createTable</span><span class="params">()</span></span> &#123;</div><div class="line">	db, err := sql.Open(<span class="string">"mysql"</span>, <span class="string">"root:passwd@tcp(127.0.0.1:3306)/test?charset=utf8"</span>)</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	table := <span class="string">`CREATE TABLE IF NOT EXISTS test.user (</span></div><div class="line"> user_id INT(11) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '用户编号',</div><div class="line"> user_name VARCHAR(45) NOT NULL COMMENT '用户名称',</div><div class="line"> user_age TINYINT(3) UNSIGNED NOT NULL DEFAULT 0 COMMENT '用户年龄',</div><div class="line"> user_sex TINYINT(3) UNSIGNED NOT NULL DEFAULT 0 COMMENT '用户性别',</div><div class="line"> PRIMARY KEY (user_id))</div><div class="line"> ENGINE = InnoDB</div><div class="line"> AUTO_INCREMENT = 1</div><div class="line"> DEFAULT CHARACTER SET = utf8</div><div class="line"> COLLATE = utf8_general_ci</div><div class="line"> COMMENT = '用户表'`</div><div class="line"></div><div class="line">	<span class="keyword">if</span> _, err := db.Exec(table); err != <span class="literal">nil</span> &#123;</div><div class="line">		checkErr(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">	stmt, err := db.Prepare(<span class="string">`INSERT user (user_name,user_age,user_sex) values (?,?,?)`</span>)</div><div class="line">	checkErr(err)</div><div class="line">	res, err := stmt.Exec(<span class="string">"tony"</span>, <span class="number">20</span>, <span class="number">1</span>)</div><div class="line">	checkErr(err)</div><div class="line">	id, err := res.LastInsertId()</div><div class="line">	checkErr(err)</div><div class="line">	fmt.Println(id)</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryToMap</span><span class="params">()</span> []<span class="title">map</span>[<span class="title">string</span>]<span class="title">string</span></span> &#123;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> records []<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></div><div class="line"></div><div class="line">	rows, err := db.Query(<span class="string">"SELECT * FROM user"</span>)</div><div class="line">	<span class="keyword">defer</span> rows.Close()</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	<span class="comment">//字典类型</span></div><div class="line">	<span class="comment">//构造scanArgs、values两个数组，scanArgs的每个值指向values相应值的地址</span></div><div class="line">	columns, _ := rows.Columns()</div><div class="line">	scanArgs := <span class="built_in">make</span>([]<span class="keyword">interface</span>&#123;&#125;, <span class="built_in">len</span>(columns))</div><div class="line">	values := <span class="built_in">make</span>([]<span class="keyword">interface</span>&#123;&#125;, <span class="built_in">len</span>(columns))</div><div class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> values &#123;</div><div class="line">		scanArgs[i] = &amp;values[i]</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> rows.Next() &#123;</div><div class="line">		<span class="comment">//将行数据保存到record字典</span></div><div class="line">		err = rows.Scan(scanArgs...)</div><div class="line">		record := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</div><div class="line">		<span class="keyword">for</span> i, col := <span class="keyword">range</span> values &#123;</div><div class="line">			<span class="keyword">if</span> col != <span class="literal">nil</span> &#123;</div><div class="line">				record[columns[i]] = <span class="keyword">string</span>(col.([]<span class="keyword">byte</span>))</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		records = <span class="built_in">append</span>(records, record)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> records</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">startHttpServer</span><span class="params">()</span></span> &#123;</div><div class="line">	http.HandleFunc(<span class="string">"/pool"</span>, pool)</div><div class="line">	err := http.ListenAndServe(<span class="string">":9090"</span>, <span class="literal">nil</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(<span class="string">"ListenAndServe: "</span>, err)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">pool</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line"></div><div class="line">	records := queryToMap()</div><div class="line">	fmt.Println(records)</div><div class="line">	fmt.Fprintln(w, <span class="string">"finish"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkErr</span><span class="params">(err error)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>带连接池的测试结果:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">➜  ~ ab -c <span class="number">100</span> -n <span class="number">1000</span> <span class="string">'http://localhost:9090/pool'</span></div><div class="line">This is ApacheBench, Version <span class="number">2.3</span> &lt;$Revision: <span class="number">1706008</span> $&gt;</div><div class="line">Copyright <span class="number">1996</span> Adam Twiss, Zeus Technology Ltd, http:<span class="comment">//www.zeustech.net/</span></div><div class="line">Licensed to The Apache Software Foundation, http:<span class="comment">//www.apache.org/</span></div><div class="line"></div><div class="line">Benchmarking localhost (be patient)</div><div class="line">Completed <span class="number">100</span> requests</div><div class="line">Completed <span class="number">200</span> requests</div><div class="line">Completed <span class="number">300</span> requests</div><div class="line">Completed <span class="number">400</span> requests</div><div class="line">Completed <span class="number">500</span> requests</div><div class="line">Completed <span class="number">600</span> requests</div><div class="line">Completed <span class="number">700</span> requests</div><div class="line">Completed <span class="number">800</span> requests</div><div class="line">Completed <span class="number">900</span> requests</div><div class="line">Completed <span class="number">1000</span> requests</div><div class="line">Finished <span class="number">1000</span> requests</div><div class="line"></div><div class="line"></div><div class="line">Server Software:</div><div class="line">Server Hostname:        localhost</div><div class="line">Server Port:            <span class="number">9090</span></div><div class="line"></div><div class="line">Document Path:          /pool</div><div class="line">Document Length:        <span class="number">0</span> bytes</div><div class="line"></div><div class="line">Concurrency Level:      <span class="number">100</span></div><div class="line">Time taken <span class="keyword">for</span> tests:   <span class="number">0.832</span> seconds</div><div class="line">Complete requests:      <span class="number">1000</span></div><div class="line">Failed requests:        <span class="number">928</span></div><div class="line">   (Connect: <span class="number">0</span>, Receive: <span class="number">0</span>, Length: <span class="number">928</span>, Exceptions: <span class="number">0</span>)</div><div class="line">Total transferred:      <span class="number">114144</span> bytes</div><div class="line">HTML transferred:       <span class="number">6496</span> bytes</div><div class="line">Requests per second:    <span class="number">1201.65</span> [#/sec] (mean)</div><div class="line">Time per request:       <span class="number">83.219</span> [ms] (mean)</div><div class="line">Time per request:       <span class="number">0.832</span> [ms] (mean, across all concurrent requests)</div><div class="line">Transfer rate:          <span class="number">133.95</span> [Kbytes/sec] received</div><div class="line"></div><div class="line">Connection Times (ms)</div><div class="line">              min  mean[+/-sd] median   max</div><div class="line">Connect:        <span class="number">0</span>    <span class="number">4</span>   <span class="number">4.6</span>      <span class="number">2</span>      <span class="number">18</span></div><div class="line">Processing:     <span class="number">8</span>   <span class="number">79</span> <span class="number">107.2</span>     <span class="number">47</span>     <span class="number">489</span></div><div class="line">Waiting:        <span class="number">0</span>   <span class="number">71</span> <span class="number">107.9</span>     <span class="number">40</span>     <span class="number">488</span></div><div class="line">Total:         <span class="number">12</span>   <span class="number">82</span> <span class="number">106.4</span>     <span class="number">49</span>     <span class="number">491</span></div><div class="line"></div><div class="line">Percentage of the requests served within a certain time (ms)</div><div class="line">  <span class="number">50</span>%     <span class="number">49</span></div><div class="line">  <span class="number">66</span>%     <span class="number">59</span></div><div class="line">  <span class="number">75</span>%     <span class="number">67</span></div><div class="line">  <span class="number">80</span>%     <span class="number">80</span></div><div class="line">  <span class="number">90</span>%    <span class="number">159</span></div><div class="line">  <span class="number">95</span>%    <span class="number">394</span></div><div class="line">  <span class="number">98</span>%    <span class="number">450</span></div><div class="line">  <span class="number">99</span>%    <span class="number">479</span></div><div class="line"> <span class="number">100</span>%    <span class="number">491</span> (longest request)</div></pre></td></tr></table></figure></p>
<p>去除连接池的设置后的测试结果:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">➜  ~ ab -c <span class="number">100</span> -n <span class="number">1000</span> <span class="string">'http://localhost:9090/pool'</span></div><div class="line">This is ApacheBench, Version <span class="number">2.3</span> &lt;$Revision: <span class="number">1706008</span> $&gt;</div><div class="line">Copyright <span class="number">1996</span> Adam Twiss, Zeus Technology Ltd, http:<span class="comment">//www.zeustech.net/</span></div><div class="line">Licensed to The Apache Software Foundation, http:<span class="comment">//www.apache.org/</span></div><div class="line"></div><div class="line">Benchmarking localhost (be patient)</div><div class="line">Completed <span class="number">100</span> requests</div><div class="line">Completed <span class="number">200</span> requests</div><div class="line">Completed <span class="number">300</span> requests</div><div class="line">Completed <span class="number">400</span> requests</div><div class="line">Completed <span class="number">500</span> requests</div><div class="line">Completed <span class="number">600</span> requests</div><div class="line">Completed <span class="number">700</span> requests</div><div class="line">Completed <span class="number">800</span> requests</div><div class="line">Completed <span class="number">900</span> requests</div><div class="line">Completed <span class="number">1000</span> requests</div><div class="line">Finished <span class="number">1000</span> requests</div><div class="line"></div><div class="line"></div><div class="line">Server Software:</div><div class="line">Server Hostname:        localhost</div><div class="line">Server Port:            <span class="number">9090</span></div><div class="line"></div><div class="line">Document Path:          /pool</div><div class="line">Document Length:        <span class="number">0</span> bytes</div><div class="line"></div><div class="line">Concurrency Level:      <span class="number">100</span></div><div class="line">Time taken <span class="keyword">for</span> tests:   <span class="number">1.467</span> seconds</div><div class="line">Complete requests:      <span class="number">1000</span></div><div class="line">Failed requests:        <span class="number">938</span></div><div class="line">   (Connect: <span class="number">0</span>, Receive: <span class="number">0</span>, Length: <span class="number">938</span>, Exceptions: <span class="number">0</span>)</div><div class="line">Total transferred:      <span class="number">115374</span> bytes</div><div class="line">HTML transferred:       <span class="number">6566</span> bytes</div><div class="line">Requests per second:    <span class="number">681.83</span> [#/sec] (mean)</div><div class="line">Time per request:       <span class="number">146.664</span> [ms] (mean)</div><div class="line">Time per request:       <span class="number">1.467</span> [ms] (mean, across all concurrent requests)</div><div class="line">Transfer rate:          <span class="number">76.82</span> [Kbytes/sec] received</div><div class="line"></div><div class="line">Connection Times (ms)</div><div class="line">              min  mean[+/-sd] median   max</div><div class="line">Connect:        <span class="number">0</span>    <span class="number">1</span>   <span class="number">1.7</span>      <span class="number">1</span>      <span class="number">19</span></div><div class="line">Processing:     <span class="number">8</span>  <span class="number">139</span> <span class="number">106.8</span>    <span class="number">109</span>     <span class="number">415</span></div><div class="line">Waiting:        <span class="number">0</span>  <span class="number">133</span> <span class="number">110.7</span>     <span class="number">81</span>     <span class="number">415</span></div><div class="line">Total:         <span class="number">10</span>  <span class="number">141</span> <span class="number">107.4</span>    <span class="number">110</span>     <span class="number">418</span></div><div class="line"></div><div class="line">Percentage of the requests served within a certain time (ms)</div><div class="line">  <span class="number">50</span>%    <span class="number">110</span></div><div class="line">  <span class="number">66</span>%    <span class="number">210</span></div><div class="line">  <span class="number">75</span>%    <span class="number">237</span></div><div class="line">  <span class="number">80</span>%    <span class="number">250</span></div><div class="line">  <span class="number">90</span>%    <span class="number">285</span></div><div class="line">  <span class="number">95</span>%    <span class="number">321</span></div><div class="line">  <span class="number">98</span>%    <span class="number">378</span></div><div class="line">  <span class="number">99</span>%    <span class="number">393</span></div><div class="line"> <span class="number">100</span>%    <span class="number">418</span> (longest request)</div></pre></td></tr></table></figure></p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p> 同样的并发情况下, 使用连接池比没使用快一倍, 在高并发的情况下，应该更明显。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用golang来处理数据库的时候，为了提升性能，往往都会使用连接池，有些人往往会自己实现一个连接池，用来互用mysql连接，但是如果你稍微细心一点， 就会发现内建的sql包已经实现了连接池。sql.Open函数实际上式返回一个连接池对象，而不是单个连接。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="go-sql-drive" scheme="https://blog.yumaojun.net/tags/go-sql-drive/"/>
    
  </entry>
  
  <entry>
    <title>golang包管理之vendor</title>
    <link href="https://blog.yumaojun.net/2017/03/13/golang-pkg-management-tool/"/>
    <id>https://blog.yumaojun.net/2017/03/13/golang-pkg-management-tool/</id>
    <published>2017-03-13T06:33:33.000Z</published>
    <updated>2017-04-04T02:00:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Golang过程中，有一个非常令人头大的问题: 缺少依赖库版本功能管理, 比如某些依赖在某个commit之后发生了API变更之后，如果不修改代码很难兼容，然而开发者之间很有可能因为参与的时间不同，导致执行go get命令获取的版本不同，而导致各种问题, 甚至是编译不通过。因此需要有一个包依赖的版本控制工具。<br><a id="more"></a></p>
<h2 id="vendor之前"><a href="#vendor之前" class="headerlink" title="vendor之前"></a>vendor之前</h2><p>在vendor出来之前, 以godep为主比较流行, godep的原理非常简单:<br>godep把第三包的版本依赖信息记录在Godeps.json下，并且把第三包完整拷贝一份到vendor下面。通过对Godeps.json文件进行版本管理即可以管理整个项目的第三方包依赖信息。</p>
<p>可以看到godep只是把第三方包进行单独到依赖管理，而新增到第三包还是会被get到GOPATH中, 如果多个项目用同一个第三包的不同版本时, 那就完蛋了</p>
<h2 id="vendor的历史"><a href="#vendor的历史" class="headerlink" title="vendor的历史"></a>vendor的历史</h2><p>vendor机制就是用来解决第三方包依赖问题: </p>
<ul>
<li>golang 1.5引入, 默认是关闭的, 通过手动设置环境变量:GO15VENDOREXPERIMENT=1开启</li>
<li>golang 1.6默认开启</li>
<li>goalng 1.7 vendor作为功能支持,取消GO15VENDOREXPERIMENT环境变量</li>
</ul>
<p>vendor的原理很简单: 将第三方依赖放入当前项目vendor目录中， 编译的时候从vendor目录中查找依赖而不从GOPATH/src中对应目录中查找。<br>新增的第三方包直接被get到根目录的vendor文件夹下,不会与其它的项目混用第三方包，完美避免多个项目同用同一个第三方包的不同版本问题。<br>因此只需要对vendor/vendor.json进行版本控制，即可对第三包依赖关系进行控制。</p>
<h2 id="vendor的使用"><a href="#vendor的使用" class="headerlink" title="vendor的使用"></a>vendor的使用</h2><p>想要详细了解govendor请参考<a href="https://github.com/kardianos/govendor" target="_blank" rel="external">govendor</a></p>
<blockquote>
<p>安装govendor</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go get -u -v github.com/kardianos/govendor</div></pre></td></tr></table></figure>
<blockquote>
<p>创建一个golang的项目</p>
</blockquote>
<p>比如我创建一个简单的依赖ssh服务的包<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"bytes"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line"></div><div class="line">	<span class="string">"golang.org/x/crypto/ssh"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	ce := <span class="function"><span class="keyword">func</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			log.Fatalf(<span class="string">"%s error: %v"</span>, msg, err)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	client, err := ssh.Dial(<span class="string">"tcp"</span>, <span class="string">"localhost:1234"</span>, &amp;ssh.ClientConfig&#123;</div><div class="line">		User: <span class="string">"root"</span>,</div><div class="line">		Auth: []ssh.AuthMethod&#123;ssh.Password(<span class="string">"xxx"</span>)&#125;,</div><div class="line">	&#125;)</div><div class="line">	ce(err, <span class="string">"dial"</span>)</div><div class="line">	session, err := client.NewSession()</div><div class="line">	ce(err, <span class="string">"new session"</span>)</div><div class="line">	<span class="keyword">defer</span> session.Close()</div><div class="line">	modes := ssh.TerminalModes&#123;</div><div class="line">		ssh.ECHO:          <span class="number">1</span>,</div><div class="line">		ssh.ECHOCTL:       <span class="number">0</span>,</div><div class="line">		ssh.TTY_OP_ISPEED: <span class="number">14400</span>,</div><div class="line">		ssh.TTY_OP_OSPEED: <span class="number">14400</span>,</div><div class="line">	&#125;</div><div class="line">	err = session.RequestPty(<span class="string">"xterm-256color"</span>, <span class="number">80</span>, <span class="number">40</span>, modes)</div><div class="line">	ce(err, <span class="string">"request pty"</span>)</div><div class="line">	<span class="keyword">if</span> err := session.Setenv(<span class="string">"LC_USR_DIR"</span>, <span class="string">"/usr"</span>); err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(<span class="string">"Failed to run: "</span> + err.Error())</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> b bytes.Buffer</div><div class="line">	session.Stdout, session.Stderr = &amp;b, &amp;b</div><div class="line">	<span class="keyword">if</span> err := session.Run(<span class="string">"ls -l $LC_USR_DIR"</span>); err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(<span class="string">"Failed to run: "</span> + err.Error())</div><div class="line">	&#125;</div><div class="line">	fmt.Println(b.String())</div></pre></td></tr></table></figure></p>
<blockquote>
<p>初始化vendor文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">➜  govendor_test govendor init</div><div class="line">➜  govendor_test cat vendor/vendor.json</div><div class="line">&#123;</div><div class="line">	&quot;comment&quot;: &quot;&quot;,</div><div class="line">	&quot;ignore&quot;: &quot;test&quot;,</div><div class="line">	&quot;package&quot;: [],</div><div class="line">	&quot;rootPath&quot;: &quot;govendor_test&quot;</div><div class="line">&#125;</div><div class="line">➜  govendor_test tree .</div><div class="line">.</div><div class="line">├── main.go</div><div class="line">└── vendor</div><div class="line">    └── vendor.json</div></pre></td></tr></table></figure>
<p>初始化完成后会生成一个vendor的文件夹, 因为我还没添加依赖, 所以vendor.json里面并没有相关依赖包的描述</p>
<blockquote>
<p>添加依赖的第三方包</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">➜  govendor_test govendor add +external</div><div class="line">➜  govendor_test cat vendor/vendor.json</div><div class="line">&#123;</div><div class="line">	&quot;comment&quot;: &quot;&quot;,</div><div class="line">	&quot;ignore&quot;: &quot;test&quot;,</div><div class="line">	&quot;package&quot;: [</div><div class="line">		&#123;</div><div class="line">			&quot;checksumSHA1&quot;: &quot;C1KKOxFoW7/W/NFNpiXK+boguNo=&quot;,</div><div class="line">			&quot;path&quot;: &quot;golang.org/x/crypto/curve25519&quot;,</div><div class="line">			&quot;revision&quot;: &quot;453249f01cfeb54c3d549ddb75ff152ca243f9d8&quot;,</div><div class="line">			&quot;revisionTime&quot;: &quot;2017-02-08T20:51:15Z&quot;</div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			&quot;checksumSHA1&quot;: &quot;wGb//LjBPNxYHqk+dcLo7BjPXK8=&quot;,</div><div class="line">			&quot;path&quot;: &quot;golang.org/x/crypto/ed25519&quot;,</div><div class="line">			&quot;revision&quot;: &quot;453249f01cfeb54c3d549ddb75ff152ca243f9d8&quot;,</div><div class="line">			&quot;revisionTime&quot;: &quot;2017-02-08T20:51:15Z&quot;</div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			&quot;checksumSHA1&quot;: &quot;LXFcVx8I587SnWmKycSDEq9yvK8=&quot;,</div><div class="line">			&quot;path&quot;: &quot;golang.org/x/crypto/ed25519/internal/edwards25519&quot;,</div><div class="line">			&quot;revision&quot;: &quot;453249f01cfeb54c3d549ddb75ff152ca243f9d8&quot;,</div><div class="line">			&quot;revisionTime&quot;: &quot;2017-02-08T20:51:15Z&quot;</div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			&quot;checksumSHA1&quot;: &quot;fsrFs762jlaILyqqQImS1GfvIvw=&quot;,</div><div class="line">			&quot;path&quot;: &quot;golang.org/x/crypto/ssh&quot;,</div><div class="line">			&quot;revision&quot;: &quot;453249f01cfeb54c3d549ddb75ff152ca243f9d8&quot;,</div><div class="line">			&quot;revisionTime&quot;: &quot;2017-02-08T20:51:15Z&quot;</div><div class="line">		&#125;</div><div class="line">	],</div><div class="line">	&quot;rootPath&quot;: &quot;govendor_test&quot;</div><div class="line">&#125;</div><div class="line">➜  govendor_test tree .</div><div class="line">.</div><div class="line">├── main.go</div><div class="line">└── vendor</div><div class="line">    ├── golang.org</div><div class="line">    │   └── x</div><div class="line">    │       └── crypto</div><div class="line">    │           ├── LICENSE</div><div class="line">    │           ├── PATENTS</div><div class="line">    │           ├── curve25519</div><div class="line">    │           │   ├── const_amd64.h</div><div class="line">    │           │   ├── const_amd64.s</div><div class="line">    │           │   ├── cswap_amd64.s</div><div class="line">    │           │   ├── curve25519.go</div><div class="line">    │           │   ├── doc.go</div><div class="line">    │           │   ├── freeze_amd64.s</div><div class="line">    │           │   ├── ladderstep_amd64.s</div><div class="line">    │           │   ├── mont25519_amd64.go</div><div class="line">    │           │   ├── mul_amd64.s</div><div class="line">    │           │   └── square_amd64.s</div><div class="line">    │           ├── ed25519</div><div class="line">    │           │   ├── ed25519.go</div><div class="line">    │           │   └── internal</div><div class="line">    │           │       └── edwards25519</div><div class="line">    │           │           ├── const.go</div><div class="line">    │           │           └── edwards25519.go</div><div class="line">    │           └── ssh</div><div class="line">    │               ├── buffer.go</div><div class="line">    │               ├── certs.go</div><div class="line">    │               ├── channel.go</div><div class="line">    │               ├── cipher.go</div><div class="line">    │               ├── client.go</div><div class="line">    │               ├── client_auth.go</div><div class="line">    │               ├── common.go</div><div class="line">    │               ├── connection.go</div><div class="line">    │               ├── doc.go</div><div class="line">    │               ├── handshake.go</div><div class="line">    │               ├── kex.go</div><div class="line">    │               ├── keys.go</div><div class="line">    │               ├── mac.go</div><div class="line">    │               ├── messages.go</div><div class="line">    │               ├── mux.go</div><div class="line">    │               ├── server.go</div><div class="line">    │               ├── session.go</div><div class="line">    │               ├── tcpip.go</div><div class="line">    │               └── transport.go</div><div class="line">    └── vendor.json</div><div class="line"></div><div class="line">9 directories, 36 files</div></pre></td></tr></table></figure>
<p>我们发现vendor.json的package已经记录了第三方包的版本,并且把这些依赖的包都放到vendor目录下了</p>
<blockquote>
<p>根据自己的需求,选择是否将vendor目录做版本控制</p>
</blockquote>
<p>一般只需要将vendor.json做版本控制即可,但是对于那些需要翻墙才能下载的包也可以直接将vendor都纳入版本控制<br>添加.ignore.git仅对vendor.json做版本控制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">echo &quot;vendor/golang.or&quot; .gitignore</div><div class="line">git add .</div><div class="line">git commit -m &quot;test commit&quot;</div><div class="line">git push -u origin master</div><div class="line">...</div></pre></td></tr></table></figure></p>
<blockquote>
<p>其他小伙伴安装依赖</p>
</blockquote>
<p>其他小伙伴如果需要使用这个项目, 拉下该项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone ssh://git@xxx/govendor_test.git</div><div class="line">https_proxy=http://localhost:8123 govendor sync  (我需要安装golang.org的包,因此需要FQ)</div></pre></td></tr></table></figure></p>
<p>这样就安装了该项目的指定版本的第三个依赖。<br>接下来愉快的玩耍吧!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用Golang过程中，有一个非常令人头大的问题: 缺少依赖库版本功能管理, 比如某些依赖在某个commit之后发生了API变更之后，如果不修改代码很难兼容，然而开发者之间很有可能因为参与的时间不同，导致执行go get命令获取的版本不同，而导致各种问题, 甚至是编译不通过。因此需要有一个包依赖的版本控制工具。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="vendor" scheme="https://blog.yumaojun.net/tags/vendor/"/>
    
  </entry>
  
  <entry>
    <title>时序数据库之InfluxDB</title>
    <link href="https://blog.yumaojun.net/2017/03/10/opentsdb-vs-influxdb/"/>
    <id>https://blog.yumaojun.net/2017/03/10/opentsdb-vs-influxdb/</id>
    <published>2017-03-10T11:33:53.000Z</published>
    <updated>2017-03-13T08:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司业务重度依赖时序数据库, 公司上个版本选择了OpenTSDB, 在1-2年前，他的确很流行。 但是在做软件重构时, 业务层反馈的一些问题, OpenTSDB暂时无法解决,成为了一个痛点, 让我需要考虑其他方案, 由于之前使用过InfluxDB, 也一直在关注, 它给了我惊艳的感觉,所以记忆犹新.<br><a id="more"></a></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前做运维时,重度使用过zabbix, 关系型数据库的优化,根本无法解决高IO, 后面又使用过Graphite, 这个安装像迷一样的工具, 它后端在RRD上面设计出了一个简单的时序数据库, 但是配置繁杂,容量完全靠规划。直到使用了InfluxDB, 部署简单,使用方便,高压缩, 对它印象很不错, 但是0.12过后不支持集群。</p>
<p>之前InfluxDB切换了2次存储引擎(它的存储是插件式的), 也没去了解过它切换的原因, 直到看到InfoQ上七牛的演讲<a href="http://www.infoq.com/cn/presentations/see-the-timing-of-data-processing-from-influxdb" target="_blank" rel="external">从InfluxDB看时序数据的处</a>, 他道出了了原因: </p>
<ol>
<li>LevelDB不支持热备份, influxDB设计的shard会消耗大量文件描述符，将系统资源耗尽。</li>
<li>BoltDB解决了热备, 解决了消耗大量文件描述符的问题, 但是引入了一个更致命的问题:容量达到数GB级别时,会产生大量随机写, 造成高IOPS。</li>
<li>放弃了他们, 在他们的经验上开始自己实现一个存储引擎: TSM(Time-Structured Merge Tree), 它截取了OpenTSDB的一些设计经验,根据<code>LSM Tree</code>针对时间序列数据进行优化</li>
</ol>
<p>我认为像这样的针对特殊场景进行优化的数据库会是今后数据库领域发展的主流, 另一个证明就是EleasticSearch一个针对文本解索而设计的数据库, 虽然OpenTSDB也针对时序数据做了优化,但是由于存储系统依然依赖HBase, 所以力度上面感觉没InfluxDB给力。</p>
<p>社区一路走来之艰辛,但是却激情洋溢,他们是先行者. 我对它集群的闭源并不反感, 这群激情洋溢的人需要有商业支持。</p>
<h2 id="时序数据库热度排名"><a href="#时序数据库热度排名" class="headerlink" title="时序数据库热度排名"></a>时序数据库热度排名</h2><p>这是DB Engine的时序数据库2017的排行榜, 截图是2017-3月的，最新的可以点<a href="http://db-engines.com/en/ranking/time+series+dbms" target="_blank" rel="external">DB-Engines Ranking of Time Series DBMS</a><br><img src="http://oiw1gzfww.bkt.clouddn.com/ts-top.png" alt=""><br>上图可以看出InfluxDB最近很热, 领先优势明显<br>下面是对比InfluxDB, OpenTSDB, Graphite的变化趋势。<br><img src="http://oiw1gzfww.bkt.clouddn.com/tsdb-top.png" alt=""><br>对于一个设计精良，部署简单，使用方便，而且还高性能的时序数据库而言, 想不热都难。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>基于Go语言开发，社区非常活跃，项目更新速度很快，日新月异，关注度高, 1.0发布过后, 稳定性也非常高。官方是这样介绍InfluxDB的：</p>
<blockquote>
<p>influxdb是一个从底层一步一步成长为能处理高写入,高查询的时序数据库, 它专门针对时序数据做了优化,让其更高性能, 他可以用来存储任何时序数据,  包括DevOps的监控、应用指标、物联网传感器的数据, 并实时分析</p>
</blockquote>
<p>这是它github上给出的<a href="https://github.com/influxdata/influxdb" target="_blank" rel="external">特性说明</a>:</p>
<ul>
<li>内建HTTP API, 无需自己实现</li>
<li>数据高压缩, 支持非常灵活的查询访问</li>
<li>支持类SQL查询, 学习成本低, 方便使用</li>
<li>安装和管理都十分简单, 数据写入和读取的速度快</li>
<li>为实时查询而生, 对每一个点位都建立索引, 及时查询响应速度小于100ms</li>
</ul>
<h2 id="业务问题"><a href="#业务问题" class="headerlink" title="业务问题"></a>业务问题</h2><p>我们需要一个时序数据库, 他需要能解决我们以下这些问题:</p>
<ol>
<li><p>一个测试指标多值<br>一个指标往往有多个维度来描述其变化状态,并不仅仅是值, 比如对于CPU的而言, 应该有中断，负载, 使用率等。</p>
</li>
<li><p>多Tag支持<br>tag是对一个指标的描述,是一个标签, 在业务上Tag对于分组过滤非常有意义, 用于标示一个指标在业务上的意义, 比如对于IOT来说, 传感器的指标往往是一个无意义的id, 因此需求给它打上name标签, 标示他的特殊意义, 打上设备ID, 标示它属于哪个设备, 打上位置标签, 标示该指标来源于哪个地方。</p>
</li>
<li><p>在指标的值上能做一些基本的比较运算<br>作为一个数据库,在功能层面需要解决一些基本的运算, 比如求和，求最小，求最大, 但这还不够, 需要支持条件过滤, 支持Tag的条件过滤, 支持值的条件过滤, 支持值的条件过滤是关键, 不然会产生巨大的数据复制, 比如我们需要过滤出 CPU &gt; 90的机器, 如果数据库不支持, 那么我需要将这些数据从数据库中查出来,复制给我的程序处理。 这带来了巨大的问题: 1. 数据库要吐出如此大量的数据, 负载升高, 出口流量暴增 2.程序拿到如此大量的数据, 给处理方带来了巨大的计算压力, 如果前段采用Angular或者React来写, 一个运行在pc上的小小的浏览器,根本处理不了。3. 处理效率低，数据的处理本该在数据存储的地方进行, 比如Hadoop, 完全没必要复制。</p>
</li>
<li><p>指标计算的中间结果需要存会指标<br>这是一个比较常见的场景, 使用RDD时更是常用,比如数据是按照30秒存储的，但是我需要 这样一个聚合维度 5m, 15m, 1h, 3h, 12h, 然后我平时只使用这些维度的数据, 不用每次临时计算。</p>
</li>
</ol>
<h2 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h2><p>influxDB的核心概念包含: Line Protocol, Retention Policy, Series, Point, Continuous Query.</p>
<h3 id="Line-Protocol"><a href="#Line-Protocol" class="headerlink" title="Line Protocol"></a>Line Protocol</h3><p>Line Protocol用于描述存入数据库的数据格式, 也可以说是数据协议, 相比于JSON格式，Line Protocol无需序列化，更加高效, 官方对它做了全面的介绍<a href="https://docs.influxdata.com/influxdb/v1.2/write_protocols/line_protocol_tutorial/" target="_blank" rel="external">Line Protocol</a>, 下面摘取语法部分做简要说明：<br>Line Protocol里面的一行就是InfluxDB里面的一个点位, 他将一个点分割成measurement, tag_set, field_set, timestamp4个部分, 例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">语法格式: measurement[,tag_key1=tag_value1...] field_key=field_value[,field_key2=field_value2] [timestamp]</div><div class="line"></div><div class="line">栗子:</div><div class="line">weather,location=us-midwest temperature=82 1465839830100400200</div><div class="line">  |    -------------------- --------------  |</div><div class="line">  |             |             |             |</div><div class="line">  |             |             |             |</div><div class="line">+-----------+--------+-+---------+-+---------+</div><div class="line">|measurement|,tag_set| |field_set| |timestamp|</div><div class="line">+-----------+--------+-+---------+-+---------+</div></pre></td></tr></table></figure></p>
<ul>
<li>measurement: metric name, 需要监控的指标的名称, 比如上面的weather</li>
<li>tag_set: 使用”,”与measurement隔开, 表示一组Tag的集合, 用于保存点位的元数据, 为可选项, 会进行索引，方便查询时用于过滤条件， 格式: <tag_key>=<tag_value>,<tag_key>=<tag_value>, 比如上面的location=us-midwest</tag_value></tag_key></tag_value></tag_key></li>
<li>field_set: 使用空格与tag_set隔开, 标示一组Field的集合, 用于保存该点位多维度的值, 支持各种类型，数据存储时不会进行索引,格式: <field_key>=<field_value>,<field_key>=<field_value>, 比如上面的temperature=82</field_value></field_key></field_value></field_key></li>
<li>timestamp: 采集该点位的时间戳, 时间的默认精度是纳秒.</li>
</ul>
<p>存储策略:measurements,tag keys,field keys,tag values全局存一份。field values和timestamps每条数据存一份。</p>
<h3 id="Retention-Policy"><a href="#Retention-Policy" class="headerlink" title="Retention Policy"></a>Retention Policy</h3><p>指数据的保存策略, 包含数据的保存时间和副本数(集群中的概念),默认保存时间是永久，副本是1个, 但是我们可以修改, 也可以创建新的保存策略</p>
<h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><p>InfluxDB中元数据的数据结构体, series相当于是InfluxDB中元数据的集合，在同一个database中，retention policy、measurement、tag sets完全相同的数据同属于一个series，同一个series的数据在物理上会按照时间顺序排列存储在一起。<br>series 的key为 measurement+所有tags的序列化字符串, 他保存着该series的Retention policy, Measurement,Tag set, 比如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">|--------------------------------------------------------------------------------------------------|</div><div class="line">|Arbitrary series number | Retention policy | Measurement    | Tag set                             |</div><div class="line">|series 1                | autogen          | census         | location = 1,scientist = langstroth |</div><div class="line">|series 2                | autogen          | census         | location = 2,scientist = langstroth |</div><div class="line">|series 3                | autogen          | census         | location = 1,scientist = perpetua   |</div><div class="line">|--------------------------------------------------------------------------------------------------|</div></pre></td></tr></table></figure></p>
<h3 id="Point"><a href="#Point" class="headerlink" title="Point"></a>Point</h3><p>InfluxDB中单条插入语句的数据结构体, 用于保存点位的值的集合, 每一个Point通过series和timestamp进行唯一标示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">name: census</div><div class="line">-----------------</div><div class="line">time                      butterflies     honeybees   location    scientist</div><div class="line">2015-08-18T00:00:00Z      1               30          1           perpetua</div></pre></td></tr></table></figure></p>
<h3 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h3><p>用于描述数据在InfluxDB的组织形式, InfluxDB的Schema十分简单由 这些概念组成: </p>
<ul>
<li>databases</li>
<li>retention policies</li>
<li>series</li>
<li>measurements </li>
<li>tag keys</li>
<li>tag values</li>
<li>field keys<br>在操作数据库的时候，需要知道这些概念。</li>
</ul>
<h3 id="Continuous-Query"><a href="#Continuous-Query" class="headerlink" title="Continuous Query"></a>Continuous Query</h3><p>简称CQ, 是预先配置好的一些查询命令，SELECT语句必须包含GROUP BY time()，influxdb会定期自动执行这些命令并将查询结果写入指定的另外的measurement中。<br>利用这个特性并结合RP我们可以方便地保存不同粒度的数据，根据数据粒度的不同设置不同的保存时间，这样不仅节约了存储空间，而且加速了时间间隔较长的数据查询效率，避免查询时再进行聚合计算。</p>
<h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p>从LevelDB(LSM Tree)，到BoltD(mmap B+树)，现在是自己实现的TSM Tree的算法，类似LSM Tree，针对InfluxDB的使用做了特殊优化。</p>
<h4 id="Shard"><a href="#Shard" class="headerlink" title="Shard"></a>Shard</h4><p>Shard这个概念并不对普通用户开放，Shard也不是存储引擎, 它在存储引擎之上的一个概念, 存储引擎负责存储shard, 因此在讲存储引擎之前先讲明shard。</p>
<p>在InfluxDB中按照数据的时间戳所在的范围，会去创建不同的shard，每一个shard都有自己的存储引擎相关文件，这样做的目的就是为了可以通过时间来快速定位到要查询数据的相关资源，加速查询的过程，并且也让之后的批量删除数据的操作变得非常简单且高效。</p>
<p>它和retention policy相关联。每一个存储策略下会存在许多shard，每一个shard存储一个指定时间段内的数据，并且不重复，例如7点-8点的数据落入shard0 中，8点-9点的数据则落入shard1中。每一个shard都对应一个底层的存储引擎。</p>
<p>当检测到一个shard中的数据过期后，只需要将这个shard的资源释放，相关文件删除即可，这样的做法使得删除过期数据变得非常高效。</p>
<h4 id="LevelDB"><a href="#LevelDB" class="headerlink" title="LevelDB"></a>LevelDB</h4><h4 id="BoltDB"><a href="#BoltDB" class="headerlink" title="BoltDB"></a>BoltDB</h4><h4 id="TSM-Tree"><a href="#TSM-Tree" class="headerlink" title="TSM Tree"></a>TSM Tree</h4><h2 id="功能使用"><a href="#功能使用" class="headerlink" title="功能使用"></a>功能使用</h2><h3 id="安装与部署"><a href="#安装与部署" class="headerlink" title="安装与部署"></a>安装与部署</h3><p>我这里主要做功能测试, 后面会有机会专门做性能测试, 因此这里使用官方提供的docker镜像部署,官方镜像最新也是1.2版本<br>配置Daocloud的镜像加速源或者阿里的加速源,然后直接拉取镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull influxdb</div></pre></td></tr></table></figure></p>
<p>由于influxDB开发时就设计好了, 官方也给出了环境配置变量,启动时可以通过这些环境变量对influxdb进行配置<a href="https://docs.influxdata.com/influxdb/v1.2/administration/config" target="_blank" rel="external">InfluxDB配置</a></p>
<h3 id="函数与SQL"><a href="#函数与SQL" class="headerlink" title="函数与SQL"></a>函数与SQL</h3><p>内部提供很多函数,方便一些基本操作<a href="https://docs.influxdata.com/influxdb/v1.2/query_language/functions/" target="_blank" rel="external">InfluxQL Functions</a><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&gt; SELECT MEAN("water_level") FROM "h2o_feet" WHERE "location"='coyote_creek' AND time &gt;= '2015-08-18T00:06:00Z' AND time &lt;= '2015-08-18T00:54:00Z' GROUP BY time(18m)</div><div class="line"></div><div class="line">name: h2o_feet</div><div class="line">time                   mean</div><div class="line">----                   ----</div><div class="line">2015-08-18T00:00:00Z   7.946</div><div class="line">2015-08-18T00:18:00Z   7.6323333333333325</div><div class="line">2015-08-18T00:36:00Z   7.238666666666667</div><div class="line">2015-08-18T00:54:00Z   6.982</div><div class="line"></div><div class="line">&gt; SELECT MAX("water_level") FROM "h2o_feet" WHERE time &gt;= '2015-08-18T00:00:00Z' AND time &lt; '2015-08-18T00:54:00Z' GROUP BY time(12m), "location"</div><div class="line">name: h2o_feet</div><div class="line">tags: location = coyote_creek</div><div class="line">time			                max</div><div class="line">----		  	              ---</div><div class="line">2015-08-18T00:00:00Z	  8.12</div><div class="line">2015-08-18T00:12:00Z	  7.887</div><div class="line">2015-08-18T00:24:00Z	  7.635</div><div class="line">2015-08-18T00:36:00Z	  7.372</div><div class="line">2015-08-18T00:48:00Z	  7.11</div><div class="line"></div><div class="line">name: h2o_feet</div><div class="line">tags: location = santa_monica</div><div class="line">time			                max</div><div class="line">----		  	              ---</div><div class="line">2015-08-18T00:00:00Z	  2.116</div><div class="line">2015-08-18T00:12:00Z	  2.126</div><div class="line">2015-08-18T00:24:00Z	  2.051</div><div class="line">2015-08-18T00:36:00Z	  2.067</div><div class="line">2015-08-18T00:48:00Z	  1.991</div></pre></td></tr></table></figure></p>
<h3 id="用户认证和权限"><a href="#用户认证和权限" class="headerlink" title="用户认证和权限"></a>用户认证和权限</h3><h3 id="Retention-Policy-1"><a href="#Retention-Policy-1" class="headerlink" title="Retention Policy"></a>Retention Policy</h3><h3 id="Cotinuous-Query"><a href="#Cotinuous-Query" class="headerlink" title="Cotinuous Query"></a>Cotinuous Query</h3><h3 id="常见操作-SQL"><a href="#常见操作-SQL" class="headerlink" title="常见操作(SQL)"></a>常见操作(SQL)</h3><h2 id="性能建议"><a href="#性能建议" class="headerlink" title="性能建议"></a>性能建议</h2><p>官方有很详解的说明,我这里仅截取出单节点部分:<a href="chttps://docs.influxdata.com/influxdb/v1.2/guides/hardware_sizing/#general-hardware-guidelines-for-a-single-node" target="_blank" rel="external">官方推荐硬件配置</a></p>
<table>
<thead>
<tr>
<th>Load</th>
<th style="text-align:center">Field writes per second</th>
<th style="text-align:center">MOderate queries per second</th>
<th style="text-align:right">Unique series</th>
</tr>
</thead>
<tbody>
<tr>
<td>Low</td>
<td style="text-align:center">&lt; 5 thousand</td>
<td style="text-align:center">&lt; 5</td>
<td style="text-align:right">&lt; 100 thousand</td>
</tr>
<tr>
<td>Moderate</td>
<td style="text-align:center">&lt; 250 thousand</td>
<td style="text-align:center">&lt; 25</td>
<td style="text-align:right">&lt; 1 million</td>
</tr>
<tr>
<td>High</td>
<td style="text-align:center">&gt; 250</td>
<td style="text-align:center">&gt; 25</td>
<td style="text-align:right">&gt; 1 million</td>
</tr>
<tr>
<td>Probobly infeasible</td>
<td style="text-align:center">&gt; 750 thousand</td>
<td style="text-align:center">&gt; 100</td>
<td style="text-align:right">&gt; 10 million</td>
</tr>
</tbody>
</table>
<p>根据负载情况官方推荐的硬件需求:</p>
<table>
<thead>
<tr>
<th>Load</th>
<th style="text-align:center">CPU</th>
<th style="text-align:center">RAM</th>
<th style="text-align:right">IOPS</th>
</tr>
</thead>
<tbody>
<tr>
<td>Low</td>
<td style="text-align:center">2-4 cores</td>
<td style="text-align:center">2-4 G</td>
<td style="text-align:right">500</td>
</tr>
<tr>
<td>Moderate</td>
<td style="text-align:center">4-6 cores</td>
<td style="text-align:center">8-32 G</td>
<td style="text-align:right">500-1000</td>
</tr>
<tr>
<td>High</td>
<td style="text-align:center">8 cores</td>
<td style="text-align:center">32+ G</td>
<td style="text-align:right">1000+</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近公司业务重度依赖时序数据库, 公司上个版本选择了OpenTSDB, 在1-2年前，他的确很流行。 但是在做软件重构时, 业务层反馈的一些问题, OpenTSDB暂时无法解决,成为了一个痛点, 让我需要考虑其他方案, 由于之前使用过InfluxDB, 也一直在关注, 它给了我惊艳的感觉,所以记忆犹新.&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://blog.yumaojun.net/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="时序数据库" scheme="https://blog.yumaojun.net/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%97%B6%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="influxdb" scheme="https://blog.yumaojun.net/tags/influxdb/"/>
    
  </entry>
  
  <entry>
    <title>跳板机系列(四)-Golang中SSH服务端的实现</title>
    <link href="https://blog.yumaojun.net/2017/02/23/go-ssh-server/"/>
    <id>https://blog.yumaojun.net/2017/02/23/go-ssh-server/</id>
    <published>2017-02-23T15:21:45.000Z</published>
    <updated>2017-02-25T06:34:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>上篇博客介绍了如何亲手实现一个SSH的客户端, 这篇博客将介绍如何使用golang的SSH包构建一个自己的SSH Server, 这样我们基本就能比较全面的了解的SSH的实现。为我们编写一个SSH Proxy奠定基石。<br><a id="more"></a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><hr>
<p><img src="http://oiw1gzfww.bkt.clouddn.com/ssh_potocol_arch.png" alt=""><br>以上是SSH协议一个基本架构图, 关于SSH协议的简介可以参考<a href="/2017/02/16/ssh-protocol/" title="跳板机系列(二)-ssh协议原理简介">跳板机系列(二)-ssh协议原理简介</a>, 只有在了解了SSH协议相关的基础上,才能理解SSH包里面的参数。<br>对照着SSH协议, 将上面的架构图做简要解读:</p>
<ul>
<li>TCP: 建立传输层链接, 然后进行SSH协议处理</li>
<li>Handshake: 建立SSH协议里面的传输层[SSH-TRANS,该层主要提供加密传输</li>
<li>Authentication: SSH协议里面的用户认证层[SSH-USERAUTH], 提供用户认证</li>
<li>Channel和Request: 这些都是SSH协议里面的链接层[SSH-CONNECT], 该层主要是将多个加密隧道分成逻辑通道, 可以复用通道,通道有比较多的类型：session、x11、forwarded-tcpip、direct-tcpip, 通道里面的Requests是用于接收创建ssh channle的请求的, 而ssh channle就是里面的connection, 数据的交互基于connection交互。</li>
</ul>
<h2 id="Server配置"><a href="#Server配置" class="headerlink" title="Server配置"></a>Server配置</h2><hr>
<p>首先, 我们需要创建一个SSH Server的配置, 这里主要是配置认证, 作为一个SSH Server默认是应该支持2认证: 密钥认证和密码认证, 为了方便我仅实现密码认证。<br>实现密码认证的核心是实现Server Config对象里面的PasswordCallback的函数, 该函数的核心是返回一个ssh.Permissions对象, 该对象保持了User认证通过的信息。<br>这里为了方便, 并没有将认证系统和PAM对接, 而是直接简单的实现了一个用户名密码比较。这也是很核心的一个点, 基于此 我们在设计跳板机的时候, 可以实现Server端的统一认证, 在这里插入统一认证的代码。</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">config := &amp;ssh.ServerConfig&#123;</div><div class="line">	PasswordCallback: <span class="function"><span class="keyword">func</span><span class="params">(c ssh.ConnMetadata, pass []<span class="keyword">byte</span>)</span> <span class="params">(*ssh.Permissions, error)</span></span> &#123;</div><div class="line">		<span class="keyword">if</span> c.User() == <span class="string">"root"</span> &amp;&amp; <span class="keyword">string</span>(pass) == <span class="string">"admin"</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"password rejected for %q"</span>, c.User())</div><div class="line">	&#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其次, 我们需要配置SSH Server的私钥, 需要保证私钥的安全, 因为他用于进行秘钥交换算法的关键(DH)<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">privateBytes, err := ioutil.ReadFile(<span class="string">"id_rsa"</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">	log.Fatal(<span class="string">"Failed to load private key (./id_rsa)"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">private, err := ssh.ParsePrivateKey(privateBytes)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">	log.Fatal(<span class="string">"Failed to parse private key"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">config.AddHostKey(private)</div></pre></td></tr></table></figure></p>
<h2 id="建立SSH通道-SSH链接层"><a href="#建立SSH通道-SSH链接层" class="headerlink" title="建立SSH通道(SSH链接层)"></a>建立SSH通道(SSH链接层)</h2><hr>
<p>SSH Server配置完成后, 首先得建立TCP链接<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">listener, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">"0.0.0.0:2200"</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">	log.Fatalf(<span class="string">"Failed to listen on 2200 (%s)"</span>, err)</div><div class="line">&#125;</div><div class="line"></div><div class="line">log.Print(<span class="string">"Listening on 2200..."</span>)</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">	conn, err := listener.Accept()</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Printf(<span class="string">"Failed to accept incoming connection (%s)"</span>, err)</div><div class="line">		<span class="keyword">continue</span></div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>然后我们通过ssh.NewServerConn来升级TCP链接为SSH链接, ssh提供的这个函数根据之前的配置完成: 1. 传输层[SSH-TRANS] 2. 认证层[SSH-USERAUTH] 3. 返回链接层的通道: incomingChannels, 接下来我们需要在Goroutine里面处理这些用户的通道。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">	sshConn, chans, reqs, err := ssh.NewServerConn(conn, config)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Printf(<span class="string">"Failed to handshake (%s)"</span>, err)</div><div class="line">		<span class="keyword">continue</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Discard all global out-of-band Requests</span></div><div class="line">	<span class="keyword">go</span> ssh.DiscardRequests(reqs)</div><div class="line">	<span class="comment">// Accept all channels</span></div><div class="line">	<span class="keyword">go</span> handleChannels(chans)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样我们就已经完成了SSH Server的连接的监听</p>
<p>为了不阻塞通道的处理, 我们将每一个通道的处理都放到Goroutine里面进行<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleChannels</span><span class="params">(chans &lt;-<span class="keyword">chan</span> ssh.NewChannel)</span></span> &#123;</div><div class="line">	<span class="keyword">for</span> newChannel := <span class="keyword">range</span> chans &#123;</div><div class="line">		<span class="keyword">go</span> handleChannel(newChannel)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在处理ssh channel里面的数据之前,  我们需要知道channel的类型, 因为不同类型的channel里面是不同类型的数据, 处理逻辑也不一样<br>具体见<a href="https://tools.ietf.org/html/rfc4250" target="_blank" rel="external">rfc4250</a>的4.9.1, 里面有比较详解的解释, 我们先不实现其他的,仅实现处理session类型channel。<br>上面提到了通道有4种类型, 每种类型都有不同的用途,这里我们仅实现session类型通道的处理。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleChannel</span><span class="params">(newChannel ssh.NewChannel)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> t := newChannel.ChannelType(); t != <span class="string">"session"</span> &#123;</div><div class="line">		newChannel.Reject(ssh.UnknownChannelType, <span class="string">"unknown channel type"</span>)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="建立SSH-Channel-回话交互"><a href="#建立SSH-Channel-回话交互" class="headerlink" title="建立SSH Channel(回话交互)"></a>建立SSH Channel(回话交互)</h2><hr>
<p>通道提供一个Accept方法, 该方法返回2个queue, 1个用于数据交换(架构图里面的connection), 1个用于控制指令的交互,比如创建connection queue(架构图里面的requests)<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">connection, requests, err := newChannel.Accept()</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">	log.Printf(<span class="string">"Could not accept channel (%s)"</span>, err)</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="数据交互"><a href="#数据交互" class="headerlink" title="数据交互"></a>数据交互</h3><p>我们将运行bash程序,然后bash与 ssh channel对接, 从而实现和bash的远程交互, 从这里可以看出, 其实这里可以扩展性很高, 我们如果运行其他服务比如git,那么git也可通过ssh链接来交互。 git也正是通过这种方式支持ssh的。<br>这里准备了一个colse函数用于关闭ssh channel和退出bash程序<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">bash := exec.Command(<span class="string">"bash"</span>)</div><div class="line"></div><div class="line"><span class="comment">// Prepare teardown function</span></div><div class="line"><span class="built_in">close</span> := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">	_, err := bash.Process.Wait()</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Printf(<span class="string">"Failed to exit bash (%s)"</span>, err)</div><div class="line">	&#125;</div><div class="line">       connection.Close()</div><div class="line">	log.Printf(<span class="string">"Session closed"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果我们直接将bash的输入和输出流行terminal这将失败, 因为bash没有运行在tty中, 因此这里需要一个模拟tty(pty)来运行bash。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">bashf, err := pty.Start(bash)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">	log.Printf(<span class="string">"Could not start pty (%s)"</span>, err)</div><div class="line">	<span class="built_in">close</span>()</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来我们需要将 bash的管道和connection的管道对接起来, 这里为了保证colse函数(connection资源释放)只被调用一次使用的sync.Once。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> once sync.Once</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">	io.Copy(connection, bashf)</div><div class="line">	once.Do(<span class="built_in">close</span>)</div><div class="line">&#125;()</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">	io.Copy(bashf, connection)</div><div class="line">	once.Do(<span class="built_in">close</span>)</div><div class="line">&#125;()</div></pre></td></tr></table></figure></p>
<h3 id="指令交互"><a href="#指令交互" class="headerlink" title="指令交互"></a>指令交互</h3><p>这里主要有以下几类请求:</p>
<ul>
<li>shell/exec/subsystem: <a href="https://tools.ietf.org/html/rfc4254#section-6.5" target="_blank" rel="external">channel request type for shell</a>, 这几类主要是用于区分connection链接的程序, shell值后面启动的一个程序或者shell, exec指后面启动的是用户的默认shell, 而subsystem是在后面启动一个子程序来执行connection里面的命令 </li>
<li>pty-req: 准备一个pty等待输入</li>
<li>window-change: 监听tty窗口改变事件。及时更新tty size。<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		<span class="keyword">for</span> req := <span class="keyword">range</span> requests &#123;</div><div class="line">			<span class="keyword">switch</span> req.Type &#123;</div><div class="line">			<span class="keyword">case</span> <span class="string">"shell"</span>:</div><div class="line">				<span class="comment">// We only accept the default shell</span></div><div class="line">				<span class="comment">// (i.e. no command in the Payload)</span></div><div class="line">				<span class="keyword">if</span> <span class="built_in">len</span>(req.Payload) == <span class="number">0</span> &#123;</div><div class="line">					req.Reply(<span class="literal">true</span>, <span class="literal">nil</span>)</div><div class="line">				&#125;</div><div class="line">			<span class="keyword">case</span> <span class="string">"pty-req"</span>:</div><div class="line">				termLen := req.Payload[<span class="number">3</span>]</div><div class="line">				w, h := parseDims(req.Payload[termLen+<span class="number">4</span>:])</div><div class="line">				SetWinsize(bashf.Fd(), w, h)</div><div class="line">				req.Reply(<span class="literal">true</span>, <span class="literal">nil</span>)</div><div class="line">			<span class="keyword">case</span> <span class="string">"window-change"</span>:</div><div class="line">				w, h := parseDims(req.Payload)</div><div class="line">				SetWinsize(bashf.Fd(), w, h)</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>以下是完整代码<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"encoding/binary"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"net"</span></div><div class="line">	<span class="string">"os/exec"</span></div><div class="line">	<span class="string">"sync"</span></div><div class="line">	<span class="string">"syscall"</span></div><div class="line">	<span class="string">"unsafe"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/kr/pty"</span></div><div class="line">	<span class="string">"golang.org/x/crypto/ssh"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">	<span class="comment">// In the latest version of crypto/ssh (after Go 1.3), the SSH server type has been removed</span></div><div class="line">	<span class="comment">// in favour of an SSH connection type. A ssh.ServerConn is created by passing an existing</span></div><div class="line">	<span class="comment">// net.Conn and a ssh.ServerConfig to ssh.NewServerConn, in effect, upgrading the net.Conn</span></div><div class="line">	<span class="comment">// into an ssh.ServerConn</span></div><div class="line"></div><div class="line">	config := &amp;ssh.ServerConfig&#123;</div><div class="line">		<span class="comment">//Define a function to run when a client attempts a password login</span></div><div class="line">		PasswordCallback: <span class="function"><span class="keyword">func</span><span class="params">(c ssh.ConnMetadata, pass []<span class="keyword">byte</span>)</span> <span class="params">(*ssh.Permissions, error)</span></span> &#123;</div><div class="line">			<span class="comment">// Should use constant-time compare (or better, salt+hash) in a production setting.</span></div><div class="line">			<span class="keyword">if</span> c.User() == <span class="string">"foo"</span> &amp;&amp; <span class="keyword">string</span>(pass) == <span class="string">"bar"</span> &#123;</div><div class="line">				<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"password rejected for %q"</span>, c.User())</div><div class="line">		&#125;,</div><div class="line">		<span class="comment">// You may also explicitly allow anonymous client authentication, though anon bash</span></div><div class="line">		<span class="comment">// sessions may not be a wise idea</span></div><div class="line">		<span class="comment">// NoClientAuth: true,</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// You can generate a keypair with 'ssh-keygen -t rsa'</span></div><div class="line">	privateBytes, err := ioutil.ReadFile(<span class="string">"id_rsa"</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(<span class="string">"Failed to load private key (./id_rsa)"</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	private, err := ssh.ParsePrivateKey(privateBytes)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatal(<span class="string">"Failed to parse private key"</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	config.AddHostKey(private)</div><div class="line"></div><div class="line">	<span class="comment">// Once a ServerConfig has been configured, connections can be accepted.</span></div><div class="line">	listener, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">"0.0.0.0:2200"</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Fatalf(<span class="string">"Failed to listen on 2200 (%s)"</span>, err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Accept all connections</span></div><div class="line">	log.Print(<span class="string">"Listening on 2200..."</span>)</div><div class="line">	<span class="keyword">for</span> &#123;</div><div class="line">		tcpConn, err := listener.Accept()</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			log.Printf(<span class="string">"Failed to accept incoming connection (%s)"</span>, err)</div><div class="line">			<span class="keyword">continue</span></div><div class="line">		&#125;</div><div class="line">		<span class="comment">// Before use, a handshake must be performed on the incoming net.Conn.</span></div><div class="line">		sshConn, chans, reqs, err := ssh.NewServerConn(tcpConn, config)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			log.Printf(<span class="string">"Failed to handshake (%s)"</span>, err)</div><div class="line">			<span class="keyword">continue</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		log.Printf(<span class="string">"New SSH connection from %s (%s)"</span>, sshConn.RemoteAddr(), sshConn.ClientVersion())</div><div class="line">		<span class="comment">// Discard all global out-of-band Requests</span></div><div class="line">		<span class="keyword">go</span> ssh.DiscardRequests(reqs)</div><div class="line">		<span class="comment">// Accept all channels</span></div><div class="line">		<span class="keyword">go</span> handleChannels(chans)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleChannels</span><span class="params">(chans &lt;-<span class="keyword">chan</span> ssh.NewChannel)</span></span> &#123;</div><div class="line">	<span class="comment">// Service the incoming Channel channel in go routine</span></div><div class="line">	<span class="keyword">for</span> newChannel := <span class="keyword">range</span> chans &#123;</div><div class="line">		<span class="keyword">go</span> handleChannel(newChannel)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleChannel</span><span class="params">(newChannel ssh.NewChannel)</span></span> &#123;</div><div class="line">	<span class="comment">// Since we're handling a shell, we expect a</span></div><div class="line">	<span class="comment">// channel type of "session". The also describes</span></div><div class="line">	<span class="comment">// "x11", "direct-tcpip" and "forwarded-tcpip"</span></div><div class="line">	<span class="comment">// channel types.</span></div><div class="line">	<span class="keyword">if</span> t := newChannel.ChannelType(); t != <span class="string">"session"</span> &#123;</div><div class="line">		newChannel.Reject(ssh.UnknownChannelType, fmt.Sprintf(<span class="string">"unknown channel type: %s"</span>, t))</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// At this point, we have the opportunity to reject the client's</span></div><div class="line">	<span class="comment">// request for another logical connection</span></div><div class="line">	connection, requests, err := newChannel.Accept()</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Printf(<span class="string">"Could not accept channel (%s)"</span>, err)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Fire up bash for this session</span></div><div class="line">	bash := exec.Command(<span class="string">"bash"</span>)</div><div class="line"></div><div class="line">	<span class="comment">// Prepare teardown function</span></div><div class="line">	<span class="built_in">close</span> := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		connection.Close()</div><div class="line">		_, err := bash.Process.Wait()</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			log.Printf(<span class="string">"Failed to exit bash (%s)"</span>, err)</div><div class="line">		&#125;</div><div class="line">		log.Printf(<span class="string">"Session closed"</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Allocate a terminal for this channel</span></div><div class="line">	log.Print(<span class="string">"Creating pty..."</span>)</div><div class="line">	bashf, err := pty.Start(bash)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		log.Printf(<span class="string">"Could not start pty (%s)"</span>, err)</div><div class="line">		<span class="built_in">close</span>()</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//pipe session to bash and visa-versa</span></div><div class="line">	<span class="keyword">var</span> once sync.Once</div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		io.Copy(connection, bashf)</div><div class="line">		once.Do(<span class="built_in">close</span>)</div><div class="line">	&#125;()</div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		io.Copy(bashf, connection)</div><div class="line">		once.Do(<span class="built_in">close</span>)</div><div class="line">	&#125;()</div><div class="line"></div><div class="line">	<span class="comment">// Sessions have out-of-band requests such as "shell", "pty-req" and "env"</span></div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		<span class="keyword">for</span> req := <span class="keyword">range</span> requests &#123;</div><div class="line">			<span class="keyword">switch</span> req.Type &#123;</div><div class="line">			<span class="keyword">case</span> <span class="string">"shell"</span>:</div><div class="line">				<span class="comment">// We only accept the default shell</span></div><div class="line">				<span class="comment">// (i.e. no command in the Payload)</span></div><div class="line">				<span class="keyword">if</span> <span class="built_in">len</span>(req.Payload) == <span class="number">0</span> &#123;</div><div class="line">					req.Reply(<span class="literal">true</span>, <span class="literal">nil</span>)</div><div class="line">				&#125;</div><div class="line">			<span class="keyword">case</span> <span class="string">"pty-req"</span>:</div><div class="line">				termLen := req.Payload[<span class="number">3</span>]</div><div class="line">				w, h := parseDims(req.Payload[termLen+<span class="number">4</span>:])</div><div class="line">				SetWinsize(bashf.Fd(), w, h)</div><div class="line">				<span class="comment">// Responding true (OK) here will let the client</span></div><div class="line">				<span class="comment">// know we have a pty ready for input</span></div><div class="line">				req.Reply(<span class="literal">true</span>, <span class="literal">nil</span>)</div><div class="line">			<span class="keyword">case</span> <span class="string">"window-change"</span>:</div><div class="line">				w, h := parseDims(req.Payload)</div><div class="line">				SetWinsize(bashf.Fd(), w, h)</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// parseDims extracts terminal dimensions (width x height) from the provided buffer.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">parseDims</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">uint32</span>, <span class="keyword">uint32</span>)</span></span> &#123;</div><div class="line">	w := binary.BigEndian.Uint32(b)</div><div class="line">	h := binary.BigEndian.Uint32(b[<span class="number">4</span>:])</div><div class="line">	<span class="keyword">return</span> w, h</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Winsize stores the Height and Width of a terminal.</span></div><div class="line"><span class="keyword">type</span> Winsize <span class="keyword">struct</span> &#123;</div><div class="line">	Height <span class="keyword">uint16</span></div><div class="line">	Width  <span class="keyword">uint16</span></div><div class="line">	x      <span class="keyword">uint16</span> <span class="comment">// unused</span></div><div class="line">	y      <span class="keyword">uint16</span> <span class="comment">// unused</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// SetWinsize sets the size of the given pty.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetWinsize</span><span class="params">(fd <span class="keyword">uintptr</span>, w, h <span class="keyword">uint32</span>)</span></span> &#123;</div><div class="line">	ws := &amp;Winsize&#123;Width: <span class="keyword">uint16</span>(w), Height: <span class="keyword">uint16</span>(h)&#125;</div><div class="line">	syscall.Syscall(syscall.SYS_IOCTL, fd, <span class="keyword">uintptr</span>(syscall.TIOCSWINSZ), <span class="keyword">uintptr</span>(unsafe.Pointer(ws)))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上篇博客介绍了如何亲手实现一个SSH的客户端, 这篇博客将介绍如何使用golang的SSH包构建一个自己的SSH Server, 这样我们基本就能比较全面的了解的SSH的实现。为我们编写一个SSH Proxy奠定基石。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="ssh-jumphost" scheme="https://blog.yumaojun.net/tags/ssh-jumphost/"/>
    
  </entry>
  
  <entry>
    <title>跳板机系列(三)-Golang中SSH客户端的实现</title>
    <link href="https://blog.yumaojun.net/2017/02/22/ssh-protocol-go/"/>
    <id>https://blog.yumaojun.net/2017/02/22/ssh-protocol-go/</id>
    <published>2017-02-22T15:40:54.000Z</published>
    <updated>2017-02-23T06:35:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>上面几篇博客已经介绍过加密算法和ssh协议的构成, 这篇博客主要将介绍golang中ssh库的一些具体使用,为后面写ssh的跳板机做铺垫。<br><a id="more"></a></p>
<h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><p>先上2个栗子, 后面会对此做详细介绍<br>Shell交互模式<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line"></div><div class="line">	<span class="string">"golang.org/x/crypto/ssh"</span></div><div class="line">	<span class="string">"golang.org/x/crypto/ssh/terminal"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	ce := <span class="function"><span class="keyword">func</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			log.Fatalf(<span class="string">"%s error: %v"</span>, msg, err)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	client, err := ssh.Dial(<span class="string">"tcp"</span>, <span class="string">"localhost:1234"</span>, &amp;ssh.ClientConfig&#123;</div><div class="line">		User: <span class="string">"root"</span>,</div><div class="line">		Auth: []ssh.AuthMethod&#123;ssh.Password(<span class="string">"xxx"</span>)&#125;,</div><div class="line">	&#125;)</div><div class="line">	ce(err, <span class="string">"dial"</span>)</div><div class="line"></div><div class="line">	session, err := client.NewSession()</div><div class="line">	ce(err, <span class="string">"new session"</span>)</div><div class="line">	<span class="keyword">defer</span> session.Close()</div><div class="line"></div><div class="line">	session.Stdout = os.Stdout</div><div class="line">	session.Stderr = os.Stderr</div><div class="line">	session.Stdin = os.Stdin</div><div class="line"></div><div class="line">	modes := ssh.TerminalModes&#123;</div><div class="line">		ssh.ECHO:          <span class="number">1</span>,</div><div class="line">		ssh.ECHOCTL:       <span class="number">0</span>,</div><div class="line">		ssh.TTY_OP_ISPEED: <span class="number">14400</span>,</div><div class="line">		ssh.TTY_OP_OSPEED: <span class="number">14400</span>,</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	termFD := <span class="keyword">int</span>(os.Stdin.Fd())</div><div class="line">	w, h, _ := terminal.GetSize(termFD)</div><div class="line">	termState, _ := terminal.MakeRaw(termFD)</div><div class="line">	<span class="keyword">defer</span> terminal.Restore(termFD, termState)</div><div class="line"></div><div class="line">	err = session.RequestPty(<span class="string">"xterm-256color"</span>, h, w, modes)</div><div class="line">	ce(err, <span class="string">"request pty"</span>)</div><div class="line"></div><div class="line">	err = session.Shell()</div><div class="line">	ce(err, <span class="string">"start shell"</span>)</div><div class="line"></div><div class="line">	err = session.Wait()</div><div class="line">	ce(err, <span class="string">"return"</span>)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>远程命令模式<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"bytes"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line"></div><div class="line">	<span class="string">"golang.org/x/crypto/ssh"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	ce := <span class="function"><span class="keyword">func</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			log.Fatalf(<span class="string">"%s error: %v"</span>, msg, err)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	client, err := ssh.Dial(<span class="string">"tcp"</span>, <span class="string">"localhost:1234"</span>, &amp;ssh.ClientConfig&#123;</div><div class="line">		User: <span class="string">"root"</span>,</div><div class="line">		Auth: []ssh.AuthMethod&#123;ssh.Password(<span class="string">"xxx"</span>)&#125;,</div><div class="line">	&#125;)</div><div class="line">	ce(err, <span class="string">"dial"</span>)</div><div class="line"></div><div class="line">	session, err := client.NewSession()</div><div class="line">	ce(err, <span class="string">"new session"</span>)</div><div class="line">	<span class="keyword">defer</span> session.Close()</div><div class="line"></div><div class="line">	modes := ssh.TerminalModes&#123;</div><div class="line">		ssh.ECHO:          <span class="number">1</span>,</div><div class="line">		ssh.ECHOCTL:       <span class="number">0</span>,</div><div class="line">		ssh.TTY_OP_ISPEED: <span class="number">14400</span>,</div><div class="line">		ssh.TTY_OP_OSPEED: <span class="number">14400</span>,</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	err = session.RequestPty(<span class="string">"xterm-256color"</span>, <span class="number">80</span>, <span class="number">40</span>, modes)</div><div class="line">	ce(err, <span class="string">"request pty"</span>)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err := session.Setenv(<span class="string">"LC_USR_DIR"</span>, <span class="string">"/usr"</span>); err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(<span class="string">"Failed to run: "</span> + err.Error())</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> b bytes.Buffer</div><div class="line">	session.Stdout, session.Stderr = &amp;b, &amp;b</div><div class="line">	<span class="keyword">if</span> err := session.Run(<span class="string">"ls -l $LC_USR_DIR"</span>); err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(<span class="string">"Failed to run: "</span> + err.Error())</div><div class="line">	&#125;</div><div class="line">	fmt.Println(b.String())</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SSH(Secure Shell)是一个提供数据通信安全、远程登录、远程指令执行等功能的安全网络协议, 具体可以查阅我的上一篇博客<a href="/2017/02/16/ssh-protocol/" title="跳板机系列(二)-ssh协议原理简介">跳板机系列(二)-ssh协议原理简介</a><br>但是golang的ssh包并不在golang的标准库中, 在: godoc.org/golang.org/x/crypto/ssh中, 所以需要翻墙才能下到。<br>golang的这个ssh包同时实现了ssh的客户端和server端, 也许你也经常看到一个ssh-agent的东西, 也在这个包括, 但我不将他归纳在client和server里面, 因为ssh-agent是一个用于保存私钥的程序, 在数字签名验证时(RSA, DSA, ECDSA, Ed25519)提供身份认证, 它就是一个帮助我们验证身份的程序。<br>接下来主要讲ssh clent, 但是还是会涉及到一点ssh-agent的部分。</p>
<h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><p>要使用ssh的客户端, 那么认证就比较关键了, ssh提供2种认证方式: 用户名密码认证和密钥认证。<br>通过ssh提供的一个config对象, 我们可以配置ssh使用的认证方式. 而配置对象里面关于认证的配置使用的是ssh.AuthMethod接口, ssh.AuthMethod是auth的总接口(存储实现了auth 和 method的对象), AuthMethod呈现的是一个实现了RFC4252认证方法的实例。</p>
<h3 id="用户名密码认证"><a href="#用户名密码认证" class="headerlink" title="用户名密码认证"></a>用户名密码认证</h3><p>认证方式如果使用Password方式的话  那么可以使用ssh.Password方法获取一个AuthMethod接口对象。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sshConfig := &amp;ssh.ClientConfig&#123;</div><div class="line">	User: <span class="string">"your_user_name"</span>,</div><div class="line">	Auth: []ssh.AuthMethod&#123;</div><div class="line">		ssh.Password(<span class="string">"your_password"</span>)</div><div class="line">	&#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="密钥认证"><a href="#密钥认证" class="headerlink" title="密钥认证"></a>密钥认证</h3><p>前提: 密钥认证的本质是使用非对称加密的数字签名功能, 所以必须将你的公共密钥填充到一个远程机器上的authorized_keys文件中 你可以手动完成, 也可以使用ssh-copy-id这个命令来帮你完成。<br>在公钥推送ok过后, 使用秘钥认证, 这里有两种方式可以获取用户的私钥, 用于签名算法时做身份认证: 从秘钥文件中读取和ssh-agent中读取。</p>
<h4 id="私钥文件"><a href="#私钥文件" class="headerlink" title="私钥文件"></a>私钥文件</h4><p>读取私钥文件, 然后使用ssh.PublicKeys方法 获取一个AuthMethod接口对象, 这里我再次封装了下, 通过PublicKeyFile可以直接获取一个公钥的AuthMethod接口。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">PublicKeyFile</span><span class="params">(file <span class="keyword">string</span>)</span> <span class="title">ssh</span>.<span class="title">AuthMethod</span></span> &#123;</div><div class="line">	buffer, err := ioutil.ReadFile(file)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	key, err := ssh.ParsePrivateKey(buffer)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ssh.PublicKeys(key)</div><div class="line">&#125;</div><div class="line"></div><div class="line">sshConfig := &amp;ssh.ClientConfig&#123;</div><div class="line">	User: <span class="string">"your_user_name"</span>,</div><div class="line">	Auth: []ssh.AuthMethod&#123;</div><div class="line">		PublicKeyFile(<span class="string">"/path/to/your/pub/certificate/key"</span>)	</div><div class="line">	&#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="SSH-Agent"><a href="#SSH-Agent" class="headerlink" title="SSH Agent"></a>SSH Agent</h4><p>SSH Agent 是一个*nix系统里面的工具, 他将用户私钥保存在一张加密的表中, 为了避免命令行的参数传入, 很多用户还是愿意将他们的秘钥交给ssh agent管理。<br>为了能获取到你存储在ssh agent中的私钥, 你首先的将你的私钥提交给ssh agent保管,执行如下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-add /path/to/your/private/certificate/file</div></pre></td></tr></table></figure></p>
<p>我们可以通过socket(net.Dial)访问到里面存储的私钥, 然后使用工厂函数ssh.PublicKeysCallback来创建一个ssh agent的AuthMethod实例。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">SSHAgent</span><span class="params">()</span> <span class="title">ssh</span>.<span class="title">AuthMethod</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> sshAgent, err := net.Dial(<span class="string">"unix"</span>, os.Getenv(<span class="string">"SSH_AUTH_SOCK"</span>)); err == <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> ssh.PublicKeysCallback(agent.NewClient(sshAgent).Signers)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">sshConfig := &amp;ssh.ClientConfig&#123;</div><div class="line">	User: <span class="string">"your_user_name"</span>,</div><div class="line">	Auth: []ssh.AuthMethod&#123;</div><div class="line">		SSHAgent()</div><div class="line">	&#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="建立链接"><a href="#建立链接" class="headerlink" title="建立链接"></a>建立链接</h2><p>当我们通过ssh.ClientConfig对象设置好ssh的配置过后, 我们就可以调用ssh.Dial方法来建立一个ssh连接了<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">connection, err := ssh.Dial(<span class="string">"tcp"</span>, <span class="string">"host:port"</span>, sshConfig)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"Failed to dial: %s"</span>, err)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="创建回话与交换"><a href="#创建回话与交换" class="headerlink" title="创建回话与交换"></a>创建回话与交换</h2><p>当ssh连接建立过后, 我们就可以通过这个连接建立一个回话, 在回话上和远程主机通信。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">session, err := connection.NewSession()</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"Failed to create session: %s"</span>, err)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是通信之前我们需要请求在远程主机上创建一个伪终端(pty全称pseudo terminal), 简单说来pty是一对字符设备, 提供一个双向沟通的渠道，大概过程是这样(pty master &lt;—session—&gt; pty slave), 关于对pty的更详尽的介绍可以参考<a href="http://ytliu.info/blog/2013/09/28/ttyde-na-xie-shi-er/" target="_blank" rel="external">TTY的那些事儿</a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">modes := ssh.TerminalModes&#123;</div><div class="line">	ssh.ECHO:          <span class="number">0</span>,     <span class="comment">// disable echoing</span></div><div class="line">	ssh.TTY_OP_ISPEED: <span class="number">14400</span>, <span class="comment">// input speed = 14.4kbaud</span></div><div class="line">	ssh.TTY_OP_OSPEED: <span class="number">14400</span>, <span class="comment">// output speed = 14.4kbaud</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> err := session.RequestPty(<span class="string">"xterm"</span>, <span class="number">80</span>, <span class="number">40</span>, modes); err != <span class="literal">nil</span> &#123;</div><div class="line">	session.Close()</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"request for pseudo terminal failed: %s"</span>, err)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>远程主机开启pty终端过后, 我们就可以直接通过Run发送命令了, 这里我们通过Setenv设置session的环境变量, session执行的结果通过Stdout, Stderr返回, 这里使用一个Buffer来保存这些结果。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> err := session.Setenv(<span class="string">"LC_USR_DIR"</span>, <span class="string">"/usr"</span>); err != <span class="literal">nil</span> &#123;</div><div class="line">	<span class="built_in">panic</span>(<span class="string">"Failed to run: "</span> + err.Error())</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> b bytes.Buffer</div><div class="line">session.Stdout, session.Stderr = &amp;b, &amp;b</div><div class="line"><span class="keyword">if</span> err := session.Run(<span class="string">"ls -l $LC_USR_DIR"</span>); err != <span class="literal">nil</span> &#123;</div><div class="line">	<span class="built_in">panic</span>(<span class="string">"Failed to run: "</span> + err.Error())</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果我们使用Shell模式的话, 我们需要在ptmx上创建一个terminal, 这样对他的操作才会反应到pts上 ,大概的原理是这样: <code>ssh&lt;---&gt;/dev/ptmx(master)&lt;---&gt;pts/*(slave)&lt;---&gt;getty</code><br>为了说清楚原理, 我引用了别人的话,希望能方便你理解:</p>
<blockquote>
<p>如果某人在网上使用telnet程序连接到你的计算机上，则telnet程序就可能会打开/dev/ptmx设备获取一个fd。此时一个getty程序就应该运行在对应的/dev/pts/<em>上。当telnet从远端获取了一个字符时，该字符就会通过ptmx、pts/</em>传递给 getty程序，而getty程序就会通过pts/*、ptmx和telnet程序往网络上返回“login:”字符串信息。这样，登录程序与telnet程序就通过伪终端进行通信。</p>
</blockquote>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">session.Stdout = os.Stdout</div><div class="line">session.Stderr = os.Stderr</div><div class="line">session.Stdin = os.Stdin</div><div class="line"></div><div class="line">modes := ssh.TerminalModes&#123;</div><div class="line">	ssh.ECHO:          <span class="number">1</span>,</div><div class="line">	ssh.ECHOCTL:       <span class="number">0</span>,</div><div class="line">	ssh.TTY_OP_ISPEED: <span class="number">14400</span>,</div><div class="line">	ssh.TTY_OP_OSPEED: <span class="number">14400</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line">termFD := <span class="keyword">int</span>(os.Stdin.Fd())</div><div class="line">w, h, _ := terminal.GetSize(termFD)</div><div class="line">termState, _ := terminal.MakeRaw(termFD)</div><div class="line"><span class="keyword">defer</span> terminal.Restore(termFD, termState)</div><div class="line"></div><div class="line">err = session.RequestPty(<span class="string">"xterm-256color"</span>, h, w, modes)</div><div class="line">ce(err, <span class="string">"request pty"</span>)</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实TTY是一个很大很经典的话题, 后面做Web Terminal时, 还得使用xterm这种类型的pty, 由于篇幅有限, 没有展开, 以后补上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上面几篇博客已经介绍过加密算法和ssh协议的构成, 这篇博客主要将介绍golang中ssh库的一些具体使用,为后面写ssh的跳板机做铺垫。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="ssh-jumphost" scheme="https://blog.yumaojun.net/tags/ssh-jumphost/"/>
    
  </entry>
  
  <entry>
    <title>密码学简介与Golang的加密库Crypto的使用</title>
    <link href="https://blog.yumaojun.net/2017/02/19/go-crypto/"/>
    <id>https://blog.yumaojun.net/2017/02/19/go-crypto/</id>
    <published>2017-02-19T15:07:51.000Z</published>
    <updated>2017-02-22T15:24:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>据记载，公元前400年，古希腊人发明了置换密码。1881年世界上的第一个电话保密专利出现。在第二次世界大战期间，德国军方启用“恩尼格玛”密码机，密码学在战争中起着非常重要的作用, 这段历史很有趣,建议看看<a href="https://www.zhihu.com/question/28397034" target="_blank" rel="external">恩格玛机破解历史</a>。<br>随着信息化和数字化社会的发展，人们对信息安全和保密的重要性认识不断提高，于是在1997年，美国国家标准局公布实施了“美国数据加密标准（DES）”，民间力量开始全面介入密码学的研究和应用中，采用的加密算法有DES、RSA、SHA等。随着对加密强度需求的不断提高，近期又出现了AES、ECC等。<br><a id="more"></a></p>
<h2 id="密码学的目的"><a href="#密码学的目的" class="headerlink" title="密码学的目的"></a>密码学的目的</h2><ul>
<li>保密性：防止用户的标识或数据被读取。</li>
<li>数据完整性：防止数据被更改。</li>
<li>身份验证：确保数据发自特定的一方。</li>
</ul>
<h2 id="密码学的应用"><a href="#密码学的应用" class="headerlink" title="密码学的应用"></a>密码学的应用</h2><p>随着密码学商业应用的普及，公钥密码学受到前所未有的重视。除传统的密码应用系统外，PKI系统以公钥密码技术为主，提供加密、签名、认证、密钥管理、分配等功能。</p>
<ul>
<li>保密通信：保密通信是密码学产生的动因。使用公私钥密码体制进行保密通信时，信息接收者只有知道对应的密钥才可以解密该信息。</li>
<li>数字签名：数字签名技术可以代替传统的手写签名，而且从安全的角度考虑，数字签名具有很好的防伪造功能。在政府机关、军事领域、商业领域有广泛的应用环境。</li>
<li>秘密共享：秘密共享技术是指将一个秘密信息利用密码技术分拆成n个称为共享因子的信息，分发给n个成员，只有k(k≤n)个合法成员的共享因子才可以恢复该秘密信息，其中任何一个或m(m≤k)个成员合作都不知道该秘密信息。利用秘密共享技术可以控制任何需要多个人共同控制的秘密信息、命令等。</li>
<li>认证功能：在公开的信道上进行敏感信息的传输，采用签名技术实现对消息的真实性、完整性进行验证，通过验证公钥证书实现对通信主体的身份验证。</li>
<li>密钥管理：密钥是保密系统中更为脆弱而重要的环节，公钥密码体制是解决密钥管理工作的有力工具；利用公钥密码体制进行密钥协商和产生，保密通信双方不需要事先共享秘密信息；利用公钥密码体制进行密钥分发、保护、密钥托管、密钥恢复等。</li>
</ul>
<h2 id="加密算法介绍"><a href="#加密算法介绍" class="headerlink" title="加密算法介绍"></a>加密算法介绍</h2><p>根据密钥类型不同将现代密码技术分为两类：</p>
<ul>
<li>对称加密算法: 加密和解密均采用同一把秘密钥匙。</li>
<li>非对称加密算法: 有2把密钥,公钥和私钥, 公钥加密, 私钥解密。</li>
</ul>
<h3 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h3><p>对称加密算法用来对敏感数据等信息进行加密，常用的算法包括：</p>
<ul>
<li>DES(Data Encryption Standard): 数据加密标准，速度较快，适用于加密大量数据的场合。</li>
<li>3DES(Triple DES): 是基于DES，对一块数据用三个不同的密钥进行三次加密，强度更高。</li>
<li>AES(Advanced Encryption Standard): 高级加密标准，是下一代的加密算法标准，速度快，安全级别高；</li>
</ul>
<h4 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h4><p>2000年10月，NIST(美国国家标准和技术协会)宣布通过从15种侯选算法中选出的一项新的密匙加密标准。Rijndael被选中成为将来的AES。 Rijndael是在1999年下半年，由研究员Joan Daemen和Vincent Rijmen创建的。AES正日益成为加密各种形式的电子数据的实际标准。<br>并于2002年5月26日制定了新的高级加密标准 (AES) 规范。<br>算法原理</p>
<blockquote>
<p>AES算法基于排列和置换运算。排列是对数据重新进行安排，置换是将一个数据单元替换为另一个。AES 使用几种不同的方法来执行排列和置换运算。<br>AES是一个迭代的、对称密钥分组的密码，它可以使用128、192 和 256 位密钥，并且用 128 位（16字节）分组加密和解密数据。与公共密钥密码使用密钥对不同，对称密钥密码使用相同的密钥加密和解密数据。通过分组密码返回的加密数据的位数与输入数据相同。迭代加密使用一个循环结构，在该循环中重复置换和替换输入数据。</p>
</blockquote>
<h4 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h4><p>DES全称为Data Encryption Standard，即数据加密标准，是一种使用密钥加密的块算法，1977年被美国联邦政府的国家标准局确定为联邦资料处理标准（FIPS），并授权在非密级政府通信中使用，随后该算法在国际上广泛流传开来。</p>
<h4 id="AES与3DES的比较"><a href="#AES与3DES的比较" class="headerlink" title="AES与3DES的比较"></a>AES与3DES的比较</h4><table>
<thead>
<tr>
<th>算法名称</th>
<th style="text-align:center">算法类型</th>
<th style="text-align:center">密钥长度</th>
<th style="text-align:center">速度</th>
<th style="text-align:center">解密时间（建设机器每秒尝试255个密钥）</th>
<th style="text-align:right">资源消耗</th>
</tr>
</thead>
<tbody>
<tr>
<td>AES</td>
<td style="text-align:center">对称block密码</td>
<td style="text-align:center">128、192、256位</td>
<td style="text-align:center">高</td>
<td style="text-align:center">1490000亿年</td>
<td style="text-align:right">低</td>
</tr>
<tr>
<td>3DES</td>
<td style="text-align:center">对称feistel密码</td>
<td style="text-align:center">112位或168位</td>
<td style="text-align:center">低</td>
<td style="text-align:center">46亿年</td>
<td style="text-align:right">中</td>
</tr>
</tbody>
</table>
<h4 id="破解历史"><a href="#破解历史" class="headerlink" title="破解历史"></a>破解历史</h4><p>历史上有三次对DES有影响的攻击实验。1997年，利用当时各国 7万台计算机，历时96天破解了DES的密钥。1998年，电子边境基金会（EFF）用25万美元制造的专用计算机，用56小时破解了DES的密钥。1999年，EFF用22小时15分完成了破解工作。因此。曾经有过卓越贡献的DES也不能满足我们日益增长的需求了。</p>
<h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><p>综上看来AES安全度最高, 基本现状就是AES已经替代DES成为新一代对称加密的标准, 下面是Golang中AES使用的栗子<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"crypto/aes"</span></div><div class="line">	<span class="string">"crypto/cipher"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> commonIV = []<span class="keyword">byte</span>&#123;<span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0a</span>, <span class="number">0x0b</span>, <span class="number">0x0c</span>, <span class="number">0x0d</span>, <span class="number">0x0e</span>, <span class="number">0x0f</span>&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">encrypt</span><span class="params">(plainText <span class="keyword">string</span>, keyText <span class="keyword">string</span>)</span> <span class="params">(cipherByte []<span class="keyword">byte</span>, err error)</span></span> &#123;</div><div class="line">	<span class="comment">// 转换成字节数据, 方便加密</span></div><div class="line">	plainByte := []<span class="keyword">byte</span>(plainText)</div><div class="line">	keyByte := []<span class="keyword">byte</span>(keyText)</div><div class="line"></div><div class="line">	<span class="comment">// 创建加密算法aes</span></div><div class="line">	c, err := aes.NewCipher(keyByte)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//加密字符串</span></div><div class="line">	cfb := cipher.NewCFBEncrypter(c, commonIV)</div><div class="line">	cipherByte = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(plainByte))</div><div class="line">	cfb.XORKeyStream(cipherByte, plainByte)</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">decrypt</span><span class="params">(cipherByte []<span class="keyword">byte</span>, keyText <span class="keyword">string</span>)</span> <span class="params">(plainText <span class="keyword">string</span>, err error)</span></span> &#123;</div><div class="line">	<span class="comment">// 转换成字节数据, 方便加密</span></div><div class="line">	keyByte := []<span class="keyword">byte</span>(keyText)</div><div class="line"></div><div class="line">	<span class="comment">// 创建加密算法aes</span></div><div class="line">	c, err := aes.NewCipher(keyByte)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">""</span>, err</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 解密字符串</span></div><div class="line">	cfbdec := cipher.NewCFBDecrypter(c, commonIV)</div><div class="line">	plainByte := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(cipherByte))</div><div class="line">	cfbdec.XORKeyStream(plainByte, cipherByte)</div><div class="line">	plainText = <span class="keyword">string</span>(plainByte)</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	plain := <span class="string">"The text need to be encrypt."</span></div><div class="line">	<span class="comment">// AES 规定有3种长度的key: 16, 24, 32分别对应AES-128, AES-192, or AES-256</span></div><div class="line">	key := <span class="string">"abcdefgehjhijkmlkjjwwoew"</span></div><div class="line">	<span class="comment">// 加密</span></div><div class="line">	cipherByte, err := encrypt(plain, key)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">	&#125;</div><div class="line">	fmt.Printf(<span class="string">"%s ==&gt; %x\n"</span>, plain, cipherByte)</div><div class="line">	<span class="comment">// 解密</span></div><div class="line">	plainText, err := decrypt(cipherByte, key)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">	&#125;</div><div class="line">	fmt.Printf(<span class="string">"%x ==&gt; %s\n"</span>, cipherByte, plainText)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="非对称算法"><a href="#非对称算法" class="headerlink" title="非对称算法"></a>非对称算法</h3><p>非对称加密算法常用于数据加密和身份认证, 常见的非对称加密算法如下：</p>
<ul>
<li>RSA: 由RSA公司发明，是一个支持变长密钥的公共密钥算法，需要加密的文件块的长度也是可变的；</li>
<li>DSA(Digital Signature Algorithm): 数字签名算法，是一种标准的DSS(数字签名标准)；</li>
<li>ECC(Elliptic Curves Cryptography): 椭圆曲线密码编码学。</li>
<li>ECDSA(Elliptic Curve Digital Signature Algorithm): 基于椭圆曲线的DSA签名算法</li>
</ul>
<h4 id="DSA"><a href="#DSA" class="headerlink" title="DSA"></a>DSA</h4><p>DSA是基于整数有限域离散对数难题的，其安全性与RSA相比差不多。DSA的一个重要特点是两个素数公开，这样，当使用别人的p和q时，即使不知道私钥，你也能确认它们是否是随机产生的，还是作了手脚。RSA算法却做不到<br>但是其缺点就是只能用于数字签名, 不能用于加密。</p>
<h4 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h4><p>在1976年，由于对称加密算法已经不能满足需要，Diffie 和Hellman发表了一篇叫《密码学新动向》的文章，介绍了公匙加密的概念，由Rivet、Shamir、Adelman提出了RSA算法。<br>RSA是目前最有影响力的公钥加密算法，它能够抵抗到目前为止已知的绝大多数密码攻击，已被ISO推荐为公钥数据加密标准。</p>
<h4 id="ECC"><a href="#ECC" class="headerlink" title="ECC"></a>ECC</h4><p>ECC加密的原理依赖椭圆曲线上的难题。<br>今天只有短的RSA钥匙才可能被强力方式解破。到2008年为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被解破的。但在分布式计算和量子计算机理论日趋成熟的今天，RSA加密安全性受到了挑战。<br>随着分解大整数方法的进步及完善、计算机速度的提高以及计算机网络的发展，为了保障数据的安全，RSA的密钥需要不断增加，但是，密钥长度的增加导致了其加解密的速度大为降低，硬件实现也变得越来越难以忍受，这对使用RSA的应用带来了很重的负担，因此需要一种新的算法来代替RSA。<br>1985年N.Koblitz和Miller提出将椭圆曲线用于密码算法，根据是有限域上的椭圆曲线上的点群中的离散对数问题ECDLP。ECDLP是比因子分解问题更难的问题，它是指数级的难度。</p>
<h4 id="ECDSA"><a href="#ECDSA" class="headerlink" title="ECDSA"></a>ECDSA</h4><p>因为在数字签名的安全性高, 基于ECC的DSA更高, 所以非常适合数字签名使用场景, 在SSH TLS有广泛使用, ECC把离散对数安全性高很少, 所以ECC在安全领域会成为下一个标准。</p>
<h4 id="ECC与RSA的比较"><a href="#ECC与RSA的比较" class="headerlink" title="ECC与RSA的比较"></a>ECC与RSA的比较</h4><p>ECC和RSA相比，在许多方面都有对绝对的优势，主要体现在以下方面：</p>
<ul>
<li>抗攻击性强。相同的密钥长度，其抗攻击性要强很多倍。</li>
<li>计算量小，处理速度快。ECC总的速度比RSA、DSA要快得多。</li>
<li>存储空间占用小。ECC的密钥尺寸和系统参数与RSA、DSA相比要小得多，意味着它所占的存贮空间要小得多。这对于加密算法在IC卡上的应用具有特别重要的意义。</li>
<li>带宽要求低。当对长消息进行加解密时，三类密码系统有相同的带宽要求，但应用于短消息时ECC带宽要求却低得多。带宽要求低使ECC在无线网络领域具有广泛的应用前景。</li>
<li>ECC的这些特点使它必将取代RSA，成为通用的公钥加密算法。比如SET协议的制定者已把它作为下一代SET协议中缺省的公钥密码算法。<br>ECC的这些特点使它必将取代RSA，成为通用的公钥加密算法。比如SET协议的制定者已把它作为下一代SET协议中缺省的公钥密码算法。</li>
</ul>
<h4 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h4><p>ECC是未来的一个趋势, 在IOT行业是一个不错的选择, 但是现在被广泛使用的依然是RSA<br>以下使用RSA进行加解密: 使用对方的公钥加密数据, 然后发给对方, 对方使用自己的私钥解密.<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"crypto/rand"</span></div><div class="line">	<span class="string">"crypto/rsa"</span></div><div class="line">	<span class="string">"crypto/sha1"</span></div><div class="line">	<span class="string">"crypto/x509"</span></div><div class="line">	<span class="string">"encoding/pem"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// 使用对方的公钥的数据, 只有对方的私钥才能解开</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">encrypt</span><span class="params">(plain <span class="keyword">string</span>, publicKey <span class="keyword">string</span>)</span> <span class="params">(cipherByte []<span class="keyword">byte</span>, err error)</span></span> &#123;</div><div class="line">	msg := []<span class="keyword">byte</span>(plain)</div><div class="line">	<span class="comment">// 解码公钥</span></div><div class="line">	pubBlock, _ := pem.Decode([]<span class="keyword">byte</span>(publicKey))</div><div class="line"></div><div class="line">	<span class="comment">// 读取公钥</span></div><div class="line">	pubKeyValue, err := x509.ParsePKIXPublicKey(pubBlock.Bytes)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line">	pub := pubKeyValue.(*rsa.PublicKey)</div><div class="line"></div><div class="line">	<span class="comment">// 加密数据方法: 不用使用EncryptPKCS1v15方法加密,源码里面推荐使用EncryptOAEP, 因此这里使用安全的方法加密</span></div><div class="line">	encryptOAEP, err := rsa.EncryptOAEP(sha1.New(), rand.Reader, pub, msg, <span class="literal">nil</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line">	cipherByte = encryptOAEP</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用私钥解密公钥加密的数据</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">decrypt</span><span class="params">(cipherByte []<span class="keyword">byte</span>, privateKey <span class="keyword">string</span>)</span> <span class="params">(plainText <span class="keyword">string</span>, err error)</span></span> &#123;</div><div class="line"></div><div class="line">	<span class="comment">// 解析出私钥</span></div><div class="line">	priBlock, _ := pem.Decode([]<span class="keyword">byte</span>(privateKey))</div><div class="line">	priKey, err := x509.ParsePKCS1PrivateKey(priBlock.Bytes)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 解密RSA-OAEP方式加密后的内容</span></div><div class="line">	decryptOAEP, err := rsa.DecryptOAEP(sha1.New(), rand.Reader, priKey, cipherByte, <span class="literal">nil</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line">	plainText = <span class="keyword">string</span>(decryptOAEP)</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</div><div class="line">	msg := <span class="string">"Content bo be encrypted!"</span></div><div class="line">	<span class="comment">// 获取公钥, 生产环境往往是文件中读取, 这里为了测试方便, 直接生成了.</span></div><div class="line">	publicKeyData := <span class="string">`-----BEGIN PUBLIC KEY-----</span></div><div class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDZsfv1qscqYdy4vY+P4e3cAtmv</div><div class="line">ppXQcRvrF1cB4drkv0haU24Y7m5qYtT52Kr539RdbKKdLAM6s20lWy7+5C0Dgacd</div><div class="line">wYWd/7PeCELyEipZJL07Vro7Ate8Bfjya+wltGK9+XNUIHiumUKULW4KDx21+1NL</div><div class="line">AUeJ6PeW+DAkmJWF6QIDAQAB</div><div class="line">-----END PUBLIC KEY-----</div><div class="line">`</div><div class="line">	<span class="comment">// 获取私钥</span></div><div class="line">	privateKeyData := <span class="string">`-----BEGIN RSA PRIVATE KEY-----</span></div><div class="line">MIICXQIBAAKBgQDZsfv1qscqYdy4vY+P4e3cAtmvppXQcRvrF1cB4drkv0haU24Y</div><div class="line">7m5qYtT52Kr539RdbKKdLAM6s20lWy7+5C0DgacdwYWd/7PeCELyEipZJL07Vro7</div><div class="line">Ate8Bfjya+wltGK9+XNUIHiumUKULW4KDx21+1NLAUeJ6PeW+DAkmJWF6QIDAQAB</div><div class="line">AoGBAJlNxenTQj6OfCl9FMR2jlMJjtMrtQT9InQEE7m3m7bLHeC+MCJOhmNVBjaM</div><div class="line">ZpthDORdxIZ6oCuOf6Z2+Dl35lntGFh5J7S34UP2BWzF1IyyQfySCNexGNHKT1G1</div><div class="line">XKQtHmtc2gWWthEg+S6ciIyw2IGrrP2Rke81vYHExPrexf0hAkEA9Izb0MiYsMCB</div><div class="line">/jemLJB0Lb3Y/B8xjGjQFFBQT7bmwBVjvZWZVpnMnXi9sWGdgUpxsCuAIROXjZ40</div><div class="line">IRZ2C9EouwJBAOPjPvV8Sgw4vaseOqlJvSq/C/pIFx6RVznDGlc8bRg7SgTPpjHG</div><div class="line">4G+M3mVgpCX1a/EU1mB+fhiJ2LAZ/pTtY6sCQGaW9NwIWu3DRIVGCSMm0mYh/3X9</div><div class="line">DAcwLSJoctiODQ1Fq9rreDE5QfpJnaJdJfsIJNtX1F+L3YceeBXtW0Ynz2MCQBI8</div><div class="line">9KP274Is5FkWkUFNKnuKUK4WKOuEXEO+LpR+vIhs7k6WQ8nGDd4/mujoJBr5mkrw</div><div class="line">DPwqA3N5TMNDQVGv8gMCQQCaKGJgWYgvo3/milFfImbp+m7/Y3vCptarldXrYQWO</div><div class="line">AQjxwc71ZGBFDITYvdgJM1MTqc8xQek1FXn1vfpy2c6O</div><div class="line">-----END RSA PRIVATE KEY-----</div><div class="line">`</div><div class="line">	cipherData, err := encrypt(msg, publicKeyData)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line">	fmt.Printf(<span class="string">"encrypt message: %x\n"</span>, cipherData)</div><div class="line"></div><div class="line">	plainData, err := decrypt(cipherData, privateKeyData)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line">	fmt.Printf(<span class="string">"decrypt message:%s\n"</span>, plainData)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	test()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ecdsa正在逐渐成为数字签名的一个标准, 在golang的ssh库中就是使用这个算法来签名的: A使用自己的私钥签名一段数据, 然后将公钥发放出去. 用户拿到公钥后, 验证数据的签名,如果通过则证明数据来源是A, 从而达到身份认证的作用.<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"crypto/ecdsa"</span></div><div class="line">	<span class="string">"crypto/elliptic"</span></div><div class="line">	<span class="string">"crypto/md5"</span></div><div class="line">	<span class="string">"crypto/rand"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"hash"</span></div><div class="line">	<span class="string">"io"</span></div><div class="line">	<span class="string">"math/big"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// SignData 用于保存签名的数据</span></div><div class="line"><span class="keyword">type</span> SignData <span class="keyword">struct</span> &#123;</div><div class="line">	r         *big.Int</div><div class="line">	s         *big.Int</div><div class="line">	signhash  *[]<span class="keyword">byte</span></div><div class="line">	signature *[]<span class="keyword">byte</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用私钥签名一段数据</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sign</span><span class="params">(message <span class="keyword">string</span>, privateKey *ecdsa.PrivateKey)</span> <span class="params">(signData *SignData, err error)</span></span> &#123;</div><div class="line"></div><div class="line">	<span class="comment">// 签名数据</span></div><div class="line">	<span class="keyword">var</span> h hash.Hash</div><div class="line">	h = md5.New()</div><div class="line">	r := big.NewInt(<span class="number">0</span>)</div><div class="line">	s := big.NewInt(<span class="number">0</span>)</div><div class="line"></div><div class="line">	io.WriteString(h, message)</div><div class="line">	signhash := h.Sum(<span class="literal">nil</span>)</div><div class="line"></div><div class="line">	r, s, serr := ecdsa.Sign(rand.Reader, privateKey, signhash)</div><div class="line">	<span class="keyword">if</span> serr != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, serr</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	signature := r.Bytes()</div><div class="line">	signature = <span class="built_in">append</span>(signature, s.Bytes()...)</div><div class="line">	signData = &amp;SignData&#123;</div><div class="line">		r:         r,</div><div class="line">		s:         s,</div><div class="line">		signhash:  &amp;signhash,</div><div class="line">		signature: &amp;signature,</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 校验数字签名</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">verifySign</span><span class="params">(signData *SignData, publicKey *ecdsa.PublicKey)</span> <span class="params">(status <span class="keyword">bool</span>)</span></span> &#123;</div><div class="line">	status = ecdsa.Verify(publicKey, *signData.signhash, signData.r, signData.s)</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="comment">//使用椭圆曲线的P256算法,现在一共也就实现了4种,我们使用折中一种,具体见http://golang.org/pkg/crypto/elliptic/#P256</span></div><div class="line">	pubkeyCurve := elliptic.P256()</div><div class="line">	privateKey := <span class="built_in">new</span>(ecdsa.PrivateKey)</div><div class="line"></div><div class="line">	<span class="comment">// 生成秘钥对</span></div><div class="line">	privateKey, err := ecdsa.GenerateKey(pubkeyCurve, rand.Reader)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> publicKey ecdsa.PublicKey</div><div class="line">	publicKey = privateKey.PublicKey</div><div class="line"></div><div class="line">	<span class="comment">// 签名</span></div><div class="line">	signData, err := sign(<span class="string">"This is a message to be signed and verified by ECDSA!"</span>, privateKey)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line">	fmt.Printf(<span class="string">"The signhash: %x\nThe signature: %x\n"</span>, *signData.signhash, *signData.signature)</div><div class="line"></div><div class="line">	<span class="comment">// 验证</span></div><div class="line">	status := verifySign(signData, &amp;publicKey)</div><div class="line">	fmt.Printf(<span class="string">"The verify result is: %v\n"</span>, status)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	test()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="散列算法"><a href="#散列算法" class="headerlink" title="散列算法"></a>散列算法</h3><p>散列是信息的提炼，通常其长度要比信息小得多，且为一个固定长度。加密性强的散列一定是不可逆的，这就意味着通过散列结果，无法推出任何部分的原始信息。任何输入信息的变化，哪怕仅一位，都将导致散列结果的明显变化，这称之为雪崩效应。散列还应该是防冲突的，即找不出具有相同散列结果的两条信息。具有这些特性的散列结果就可以用于验证信息是否被修改。常用于保证数据完整性<br>单向散列函数一般用于产生消息摘要，密钥加密等，常见的有：</p>
<ul>
<li>MD5(Message Digest Algorithm 5): 是RSA数据安全公司开发的一种单向散列算法。</li>
<li>SHA(Secure Hash Algorithm): 可以对任意长度的数据运算生成一个160位的数值；</li>
</ul>
<h4 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h4><p>MD5即Message-Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5的前身有MD2、MD3和MD4</p>
<h4 id="SHA-1"><a href="#SHA-1" class="headerlink" title="SHA-1"></a>SHA-1</h4><p>在1993年，安全散列算法（SHA）由美国国家标准和技术协会(NIST)提出，并作为联邦信息处理标准（FIPS PUB 180）公布；1995年又发布了一个修订版FIPS PUB 180-1，通常称之为SHA-1。SHA-1是基于MD4算法的，并且它的设计在很大程度上是模仿MD4的。现在已成为公认的最安全的散列算法之一，并被广泛使用。<br>SHA-1是一种数据加密算法，该算法的思想是接收一段明文，然后以一种不可逆的方式将它转换成一段（通常更小）密文，也可以简单的理解为取一串输入码（称为预映射或信息），并把它们转化为长度较短、位数固定的输出序列即散列值（也称为信息摘要或信息认证代码）的过程。<br>该算法输入报文的最大长度不超过264位，产生的输出是一个160位的报文摘要。输入是按512 位的分组进行处理的。SHA-1是不可逆的、防冲突，并具有良好的雪崩效应。<br>sha1是SHA家族的五个算法之一(其它四个是SHA-224、SHA-256、SHA-384，和SHA-512)</p>
<h4 id="HMac"><a href="#HMac" class="headerlink" title="HMac"></a>HMac</h4><p>Hmac算法也是一种哈希算法，它可以利用MD5或SHA1等哈希算法。不同的是，Hmac还需要一个密钥, 只要密钥发生了变化，那么同样的输入数据也会得到不同的签名，因此，可以把Hmac理解为用随机数“增强”的哈希算法。</p>
<h4 id="SHA-1与MD5的比较"><a href="#SHA-1与MD5的比较" class="headerlink" title="SHA-1与MD5的比较"></a>SHA-1与MD5的比较</h4><p>因为二者均由MD4导出，SHA-1和MD5彼此很相似。相应的，他们的强度和其他特性也是相似，但还有以下几点不同：</p>
<ul>
<li>对强行供给的安全性：最显著和最重要的区别是SHA-1摘要比MD5摘要长32 位。使用强行技术，产生任何一个报文使其摘要等于给定报摘要的难度对MD5是2128数量级的操作，而对SHA-1则是2160数量级的操作。这样，SHA-1对强行攻击有更大的强度。</li>
<li>对密码分析的安全性：由于MD5的设计，易受密码分析的攻击，SHA-1显得不易受这样的攻击。</li>
<li>速度：在相同的硬件上，SHA-1的运行速度比MD5慢。</li>
</ul>
<h4 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h4><p>由于MD5已经被破解了(中国山东大学的王小云教授破解), 常用的散列算法是sha家族, 更加安全的算法是使用Hmac<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"crypto/hmac"</span></div><div class="line">	<span class="string">"crypto/sha1"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// sha1散列算法</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sha1Hash</span><span class="params">(msg <span class="keyword">string</span>)</span> <span class="params">(hashData []<span class="keyword">byte</span>)</span></span> &#123;</div><div class="line">	h := sha1.New()</div><div class="line">	io.WriteString(h, msg)</div><div class="line">	hashData = h.Sum(<span class="literal">nil</span>)</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用sha1的Hmac散列算法</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">hmacHash</span><span class="params">(msg <span class="keyword">string</span>, key <span class="keyword">string</span>)</span> <span class="params">(hashData []<span class="keyword">byte</span>)</span></span> &#123;</div><div class="line">	k := []<span class="keyword">byte</span>(key)</div><div class="line">	mac := hmac.New(sha1.New, k)</div><div class="line">	io.WriteString(mac, msg)</div><div class="line">	hashData = mac.Sum(<span class="literal">nil</span>)</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	msg := <span class="string">"This is the message to hash!"</span></div><div class="line">	<span class="comment">// sha1</span></div><div class="line">	sha1Data := sha1Hash(msg)</div><div class="line">	fmt.Printf(<span class="string">"SHA1: %x\n"</span>, sha1Data)</div><div class="line"></div><div class="line">	<span class="comment">// hmac</span></div><div class="line">	hmacData := hmacHash(msg, <span class="string">"The key string!"</span>)</div><div class="line">	fmt.Printf(<span class="string">"HMAC: %x\n"</span>, hmacData)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="秘钥交换算法"><a href="#秘钥交换算法" class="headerlink" title="秘钥交换算法"></a>秘钥交换算法</h3><p>一种密钥交换协议，注意该算法只能用于密钥的交换，而不能进行消息的加密和解密。双方确定要用的密钥后，要使用其他对称密钥操作加密算法实际加密和解密消息。它可以让双方在不泄漏密钥的情况下协商出一个密钥来, 常用于保证对称加密的秘钥的安全, TLS就是这样做的。<br>在这个领域应该2种</p>
<ul>
<li>DH：ECDH是DH的加强版</li>
<li>ECDH: DH算法的加强版, 常用的是NIST系列,但是后面curve25519</li>
<li>curve25519: 实质上也是一种ECDH,但是其实现更为优秀,表现的更为安全,可能是下一代秘钥交换算法的标准。</li>
</ul>
<h4 id="DH"><a href="#DH" class="headerlink" title="DH"></a>DH</h4><p>DH全称是:<code>Diffie-Hellman</code>, 是一种确保共享KEY安全穿越不安全网络的方法，它是OAKLEY的一个组成部分。Whitefield与Martin Hellman在1976年提出了一个奇妙的密钥交换协议，称为Diffie-Hellman密钥交换协议/算法(Diffie-Hellman Key Exchange/Agreement Algorithm).这个机制的巧妙在于需要安全通信的双方可以用这个方法确定对称密钥。然后可以用这个密钥进行加密和解密。<br>DH依赖于计算离散对数的难度, 大概过程如下:</p>
<blockquote>
<p>可以如下定义离散对数：首先定义一个素数p的原根，为其各次幂产生从1 到p-1的所有整数根，也就是说，如果a是素数p的一个原根，那么数值 a mod p,a2 mod p,…,ap-1 mod p 是各不相同的整数，并且以某种排列方式组成了从1到p-1的所有整数. 对于一个整数b和素数p的一个原根a，可以找到惟一的指数i，使得 b = a^i mod p 其中0 ≤ i ≤ （p-1） 指数i称为b的以a为基数的模p的离散对数或者指数.该值被记为inda,p(b).</p>
</blockquote>
<h4 id="ECDH"><a href="#ECDH" class="headerlink" title="ECDH"></a>ECDH</h4><p>全称是<code>Elliptic Curve Diffie-Hellman</code>, 是DH算法的加强版, 基于椭圆曲线难题加密, 现在是主流的密钥交换算法。<br>ECC是建立在基于椭圆曲线的离散对数的难度, 大概过程如下:</p>
<blockquote>
<p>给定椭圆曲线上的一个点P，一个整数k，求解Q=kP很容易；给定一个点P、Q，知道Q=kP，求整数k确是一个难题。ECDH即建立在此数学难题之上</p>
</blockquote>
<p>椭圆曲线算法因参数不同有多种类型, 这个网站列出了现阶段那些ECC是相对安全的:<a href="http://safecurves.cr.yp.to/" target="_blank" rel="external">椭圆曲线算法安全列表</a>, 而curve25519便是其中的佼佼者。<br>Curve25519/Ed25519/X25519是著名密码学家Daniel J. Bernstein在2006年独立设计的椭圆曲线加密/签名/密钥交换算法, 和现有的任何椭圆曲线算法都完全独立。<br>特点是：</p>
<ul>
<li>完全开放设计: 算法各参数的选择直截了当，非常明确，没有任何可疑之处，相比之下目前广泛使用的椭圆曲线是NIST系列标准，方程的系数是使用来历不明的随机种子 c49d3608 86e70493 6a6678e1 139d26b7 819f7e90 生成的，非常可疑，疑似后门；</li>
<li>高安全性： 一个椭圆曲线加密算法就算在数学上是安全的，在实用上也并不一定安全，有很大的概率通过缓存、时间、恶意输入摧毁安全性，而25519系列椭圆曲线经过特别设计，尽可能的将出错的概率降到了最低，可以说是实践上最安全的加密算法。例如，任何一个32位随机数都是一个合法的X25519公钥，因此通过恶意数值攻击是不可能的，算法在设计的时候刻意避免的某些分支操作，这样在编程的时候可以不使用if ，减少了不同if分支代码执行时间不同的时序攻击概率，相反， NIST系列椭圆曲线算法在实际应用中出错的可能性非常大，而且对于某些理论攻击的免疫能力不高， Bernstein 对市面上所有的加密算法使用12个标准进行了考察， 25519是几乎唯一满足这些标准的 <a href="http://t.cn/RMGmi1g" target="_blank" rel="external">http://t.cn/RMGmi1g</a> ；</li>
<li>速度快: 25519系列曲线是目前最快的椭圆曲线加密算法，性能远远超过NIST系列，而且具有比P-256更高的安全性；</li>
<li>作者功底深厚: Daniel J. Bernstein是世界著名的密码学家，他在大学曾经开设过一门 UNIX 系统安全的课程给学生，结果一学期下来，发现了 UNIX 程序中的 91 个安全漏洞；他早年在美国依然禁止出口加密算法时，曾因为把自己设计的加密算法发布到网上遭到了美国政府的起诉，他本人抗争六年，最后美国政府撤销所有指控，目前另一个非常火的高性能安全流密码 ChaCha20 也是出自 Bernstein 之手；</li>
<li>下一代的标准: 25519系列曲线自2006年发表以来，除了学术界无人问津， 2013 年爱德华·斯诺登曝光棱镜计划后，该算法突然大火，大量软件，如OpenSSH都迅速增加了对25519系列的支持，如今25519已经是大势所趋，可疑的NIST曲线迟早要退出椭圆曲线的历史舞台，目前， RFC增加了SSL/TLS对X25519密钥交换协议的支持，而新版 OpenSSL 1.1也加入支持，是摆脱老大哥的第一步，下一步是将 Ed25519做为可选的TLS证书签名算法，彻底摆脱NIST</li>
</ul>
<h4 id="代码示例-3"><a href="#代码示例-3" class="headerlink" title="代码示例"></a>代码示例</h4><p>这里需要指出下golang的标准库的crypto里的椭圆曲线实现了这4种(<a href="https://golang.org/pkg/crypto/elliptic/" target="_blank" rel="external">elliptic文档</a>): P224/P256/P384/P521, 而curve25519是单独实现的, 他不在标准库中: golang.org/x/crypto/curve25519<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"crypto"</span></div><div class="line">	<span class="string">"crypto/elliptic"</span></div><div class="line">	<span class="string">"crypto/rand"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io"</span></div><div class="line">	<span class="string">"math/big"</span></div><div class="line"></div><div class="line">	<span class="string">"golang.org/x/crypto/curve25519"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// ECDH 秘钥交换算法的主接口</span></div><div class="line"><span class="keyword">type</span> ECDH <span class="keyword">interface</span> &#123;</div><div class="line">	GenerateKey(io.Reader) (crypto.PrivateKey, crypto.PublicKey, error)</div><div class="line">	Marshal(crypto.PublicKey) []<span class="keyword">byte</span></div><div class="line">	Unmarshal([]<span class="keyword">byte</span>) (crypto.PublicKey, <span class="keyword">bool</span>)</div><div class="line">	GenerateSharedSecret(crypto.PrivateKey, crypto.PublicKey) ([]<span class="keyword">byte</span>, error)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> ellipticECDH <span class="keyword">struct</span> &#123;</div><div class="line">	ECDH</div><div class="line">	curve elliptic.Curve</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> ellipticPublicKey <span class="keyword">struct</span> &#123;</div><div class="line">	elliptic.Curve</div><div class="line">	X, Y *big.Int</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> ellipticPrivateKey <span class="keyword">struct</span> &#123;</div><div class="line">	D []<span class="keyword">byte</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// NewEllipticECDH 指定一种椭圆曲线算法用于创建一个ECDH的实例</span></div><div class="line"><span class="comment">// 关于椭圆曲线算法标准库里面实现了4种: 见crypto/elliptic</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewEllipticECDH</span><span class="params">(curve elliptic.Curve)</span> <span class="title">ECDH</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> &amp;ellipticECDH&#123;</div><div class="line">		curve: curve,</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// GenerateKey 基于标准库的NIST椭圆曲线算法生成秘钥对</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ellipticECDH)</span> <span class="title">GenerateKey</span><span class="params">(rand io.Reader)</span> <span class="params">(crypto.PrivateKey, crypto.PublicKey, error)</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> d []<span class="keyword">byte</span></div><div class="line">	<span class="keyword">var</span> x, y *big.Int</div><div class="line">	<span class="keyword">var</span> priv *ellipticPrivateKey</div><div class="line">	<span class="keyword">var</span> pub *ellipticPublicKey</div><div class="line">	<span class="keyword">var</span> err error</div><div class="line"></div><div class="line">	d, x, y, err = elliptic.GenerateKey(e.curve, rand)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, err</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	priv = &amp;ellipticPrivateKey&#123;</div><div class="line">		D: d,</div><div class="line">	&#125;</div><div class="line">	pub = &amp;ellipticPublicKey&#123;</div><div class="line">		Curve: e.curve,</div><div class="line">		X:     x,</div><div class="line">		Y:     y,</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> priv, pub, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Marshal用于公钥的序列化</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ellipticECDH)</span> <span class="title">Marshal</span><span class="params">(p crypto.PublicKey)</span> []<span class="title">byte</span></span> &#123;</div><div class="line">	pub := p.(*ellipticPublicKey)</div><div class="line">	<span class="keyword">return</span> elliptic.Marshal(e.curve, pub.X, pub.Y)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Unmarshal用于公钥的反序列化</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ellipticECDH)</span> <span class="title">Unmarshal</span><span class="params">(data []<span class="keyword">byte</span>)</span> <span class="params">(crypto.PublicKey, <span class="keyword">bool</span>)</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> key *ellipticPublicKey</div><div class="line">	<span class="keyword">var</span> x, y *big.Int</div><div class="line"></div><div class="line">	x, y = elliptic.Unmarshal(e.curve, data)</div><div class="line">	<span class="keyword">if</span> x == <span class="literal">nil</span> || y == <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> key, <span class="literal">false</span></div><div class="line">	&#125;</div><div class="line">	key = &amp;ellipticPublicKey&#123;</div><div class="line">		Curve: e.curve,</div><div class="line">		X:     x,</div><div class="line">		Y:     y,</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> key, <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// GenerateSharedSecret 通过自己的私钥和对方的公钥协商一个共享密码</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ellipticECDH)</span> <span class="title">GenerateSharedSecret</span><span class="params">(privKey crypto.PrivateKey, pubKey crypto.PublicKey)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</div><div class="line">	priv := privKey.(*ellipticPrivateKey)</div><div class="line">	pub := pubKey.(*ellipticPublicKey)</div><div class="line"></div><div class="line">	x, _ := e.curve.ScalarMult(pub.X, pub.Y, priv.D)</div><div class="line">	<span class="keyword">return</span> x.Bytes(), <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// NewCurve25519ECDH 使用密码学家Daniel J. Bernstein的椭圆曲线算法:Curve25519来创建ECDH实例</span></div><div class="line"><span class="comment">// 因为Curve25519独立于NIST之外, 没在标准库实现, 需要单独为期实现一套接口来支持ECDH</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCurve25519ECDH</span><span class="params">()</span> <span class="title">ECDH</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> &amp;curve25519ECDH&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> curve25519ECDH <span class="keyword">struct</span> &#123;</div><div class="line">	ECDH</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// GenerateKey 基于curve25519椭圆曲线算法生成秘钥对</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *curve25519ECDH)</span> <span class="title">GenerateKey</span><span class="params">(rand io.Reader)</span> <span class="params">(crypto.PrivateKey, crypto.PublicKey, error)</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> pub, priv [<span class="number">32</span>]<span class="keyword">byte</span></div><div class="line">	<span class="keyword">var</span> err error</div><div class="line"></div><div class="line">	_, err = io.ReadFull(rand, priv[:])</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, err</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	priv[<span class="number">0</span>] &amp;= <span class="number">248</span></div><div class="line">	priv[<span class="number">31</span>] &amp;= <span class="number">127</span></div><div class="line">	priv[<span class="number">31</span>] |= <span class="number">64</span></div><div class="line"></div><div class="line">	curve25519.ScalarBaseMult(&amp;pub, &amp;priv)</div><div class="line"></div><div class="line">	<span class="keyword">return</span> &amp;priv, &amp;pub, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 实现公钥的序列化</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *curve25519ECDH)</span> <span class="title">Marshal</span><span class="params">(p crypto.PublicKey)</span> []<span class="title">byte</span></span> &#123;</div><div class="line">	pub := p.(*[<span class="number">32</span>]<span class="keyword">byte</span>)</div><div class="line">	<span class="keyword">return</span> pub[:]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 实现公钥的反序列化</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *curve25519ECDH)</span> <span class="title">Unmarshal</span><span class="params">(data []<span class="keyword">byte</span>)</span> <span class="params">(crypto.PublicKey, <span class="keyword">bool</span>)</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> pub [<span class="number">32</span>]<span class="keyword">byte</span></div><div class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(data) != <span class="number">32</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">copy</span>(pub[:], data)</div><div class="line">	<span class="keyword">return</span> &amp;pub, <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 实现秘钥协商接口</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *curve25519ECDH)</span> <span class="title">GenerateSharedSecret</span><span class="params">(privKey crypto.PrivateKey, pubKey crypto.PublicKey)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> priv, pub, secret *[<span class="number">32</span>]<span class="keyword">byte</span></div><div class="line"></div><div class="line">	priv = privKey.(*[<span class="number">32</span>]<span class="keyword">byte</span>)</div><div class="line">	pub = pubKey.(*[<span class="number">32</span>]<span class="keyword">byte</span>)</div><div class="line">	secret = <span class="built_in">new</span>([<span class="number">32</span>]<span class="keyword">byte</span>)</div><div class="line"></div><div class="line">	curve25519.ScalarMult(secret, priv, pub)</div><div class="line">	<span class="keyword">return</span> secret[:], <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(e ECDH)</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> privKey1, privKey2 crypto.PrivateKey</div><div class="line">	<span class="keyword">var</span> pubKey1, pubKey2 crypto.PublicKey</div><div class="line">	<span class="keyword">var</span> pubKey1Buf, pubKey2Buf []<span class="keyword">byte</span></div><div class="line">	<span class="keyword">var</span> err error</div><div class="line">	<span class="keyword">var</span> ok <span class="keyword">bool</span></div><div class="line">	<span class="keyword">var</span> secret1, secret2 []<span class="keyword">byte</span></div><div class="line"></div><div class="line">	<span class="comment">// 准备2对秘钥对,A: privKey1,pubKey1 B:privKey2,pubKey2</span></div><div class="line">	privKey1, pubKey1, err = e.GenerateKey(rand.Reader)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">	&#125;</div><div class="line">	privKey2, pubKey2, err = e.GenerateKey(rand.Reader)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	pubKey1Buf = e.Marshal(pubKey1)</div><div class="line">	pubKey2Buf = e.Marshal(pubKey2)</div><div class="line"></div><div class="line">	pubKey1, ok = e.Unmarshal(pubKey1Buf)</div><div class="line">	<span class="keyword">if</span> !ok &#123;</div><div class="line">		fmt.Println(<span class="string">"Unmarshal does not work"</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	pubKey2, ok = e.Unmarshal(pubKey2Buf)</div><div class="line">	<span class="keyword">if</span> !ok &#123;</div><div class="line">		fmt.Println(<span class="string">"Unmarshal does not work"</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// A 通过B给的公钥协商共享密码</span></div><div class="line">	secret1, err = e.GenerateSharedSecret(privKey1, pubKey2)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// B 通过A给的公钥协商共享密码</span></div><div class="line">	secret2, err = e.GenerateSharedSecret(privKey2, pubKey1)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(err)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// A B在没暴露直接的私钥的情况下, 协商出了一个共享密码</span></div><div class="line">	fmt.Printf(<span class="string">"The secret1 shared keys: %x\n"</span>, secret1)</div><div class="line">	fmt.Printf(<span class="string">"The secret2 shared keys: %x\n"</span>, secret2)</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	e1 := NewEllipticECDH(elliptic.P521())</div><div class="line">	e2 := NewCurve25519ECDH()</div><div class="line">	test(e1)</div><div class="line">	test(e2)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="总体结论"><a href="#总体结论" class="headerlink" title="总体结论"></a>总体结论</h3><p>以上综述了两种加密方法的原理，总体来说主要有下面几个方面的不同：</p>
<ul>
<li>管理方面：公钥密码算法只需要较少的资源就可以实现目的，在密钥的分配上，两者之间相差一个指数级别（一个是n一个是n2）。所以私钥密码算法不适应广域网的使用，而且更重要的一点是它不支持数字签名。</li>
<li>安全方面：由于公钥密码算法基于未解决的数学难题，在破解上几乎不可能。对于私钥密码算法，到了AES虽说从理论来说是不可能破解的，但从计算机的发展角度来看。公钥更具有优越性。</li>
<li>速度上来看：AES的软件实现速度已经达到了每秒数兆或数十兆比特。是公钥的100倍，如果用硬件来实现的话这个比值将扩大到1000倍。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;据记载，公元前400年，古希腊人发明了置换密码。1881年世界上的第一个电话保密专利出现。在第二次世界大战期间，德国军方启用“恩尼格玛”密码机，密码学在战争中起着非常重要的作用, 这段历史很有趣,建议看看&lt;a href=&quot;https://www.zhihu.com/question/28397034&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;恩格玛机破解历史&lt;/a&gt;。&lt;br&gt;随着信息化和数字化社会的发展，人们对信息安全和保密的重要性认识不断提高，于是在1997年，美国国家标准局公布实施了“美国数据加密标准（DES）”，民间力量开始全面介入密码学的研究和应用中，采用的加密算法有DES、RSA、SHA等。随着对加密强度需求的不断提高，近期又出现了AES、ECC等。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="crypto" scheme="https://blog.yumaojun.net/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>跳板机系列(二)-ssh协议原理简介</title>
    <link href="https://blog.yumaojun.net/2017/02/16/ssh-protocol/"/>
    <id>https://blog.yumaojun.net/2017/02/16/ssh-protocol/</id>
    <published>2017-02-16T02:09:31.000Z</published>
    <updated>2017-02-25T03:14:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>SSH对于大多数人来说应该并不陌生, 无论你是开发还是测试还是运维, 只要你需要登录类Unix服务器都会用到, 他被用来提供链接的安全保障, 比如常见的客户端有命令行工具ssh, 以及周边的商业工具Xshell等。在这篇文章里我们不会教你如何使用xshell, 而是从协议层面全新的认识下ssh。<br><a id="more"></a></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>虽然SSH使用起来很简单, 但是背后的原理特别不简单,关于以下问题, 你能否知晓其细节:</p>
<ul>
<li>SSH如何保证客户端与服务端通行的安全</li>
<li>SSH采用什么加密协议</li>
<li>SSH是通过对称加密还是非对称加密数据在传输过程的安全</li>
<li>SSH如何保证数据完整性</li>
<li>SSH的密码认证方式和密钥认证方式分别如何实现，有何差异</li>
</ul>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SSH全称<a href="https://zh.wikipedia.org/wiki/Secure_Shell" target="_blank" rel="external">Secure Shell</a>是一种工作在应用层和传输层上的安全协议，能在非安全通道上建立安全通道。提供身份认证、密钥更新、数据校验、通道复用等功能，同时具有良好的可扩展性,由芬兰赫尔辛基大学研究员Tatu Ylönen,于1995年提出，其目的是用于替代非安全的Telnet、rsh、rexec等远程Shell协议。之后SSH发展了两个大版本,SSH-1和SSH-2, 开源实现OpenSSH对2者都支持。<br>SSH的主要特性:</p>
<ul>
<li>加密: 避免数据内容泄漏</li>
<li>通信的完整性: 避免数据被篡改，以及发送或接受地址伪装(检查数据是否被篡改，数据是否来自发送者而非攻击者） SSH-2通过MD5和SHA-1实现该功能，SSH-1使用CRC-32</li>
<li>认证: 识别数据发送者和接收者身份 客户端验证SSH服务端的身份：防止攻击者仿冒SSH服务端身份，避免中介人攻击和重定向请求的攻击；OpenSSH通过在know-hosts中存储主机名和host key对服务端身份进行认证 服务端验证请求者身份：提供安全性较弱的用户密码方式，和安全性更强的per-user public-key signatures；此外SSH还支持与第三方安全服务系统的集成，如Kerberos等</li>
<li>授权: 用户访问控制</li>
<li>安全隧道: 转发或者为基于TCP/IP的回话提供加密隧道, 比如通过SSH为Telnet、FTP等提供通信安全保障，支持三种类型的Forwarding操作：Port Forwarding；X Forwarding；Agent Forwarding</li>
</ul>
<p>通过使用SSH，你可以把所有传输的数据进行加密，这样”中间人”这种攻击方式就不可能实现了，而且也能够防止DNS欺骗和IP欺骗。使用SSH，还有一个额外的好处就是传输的数据是经过压缩的，所以可以加快传输的速度。SSH有很多功能，它既可以代替Telnet，又可以为FTP、PoP、甚至为PPP提供一个安全的”通道”。</p>
<h2 id="安全相关"><a href="#安全相关" class="headerlink" title="安全相关"></a>安全相关</h2><p>在SSH中涉及到很多加密算法, 关于加密算法的相关知识之前已经写过一遍博客做专门介绍:<a href="/2017/02/19/go-crypto/" title="密码学简介与Golang的加密库Crypto的使用">密码学简介与Golang的加密库Crypto的使用</a>, 以下是一个总结性的描述:</p>
<ul>
<li>对称加密: 高效，但安全性相对较低，Key的分发尤其不方便, 主要用于数据传输的加密(session加密), 常用AES系列</li>
<li>非对称加密: 安全，但效率低，不适合大规模进行数据的加密和解密操作, 主要用于秘钥交换算法过程中用来协商Key和在数字签名时用来验证身份, 常用的是RSA/ECDSA</li>
<li>秘钥交换算法: 用于协商对称加密的密码, ECDH用的比较多</li>
<li>散列算法: 用于确保数据传输过程中的完整性, 为了安全一般使用Hmac<br>在golang的ssh包中使用ECDH的cure25519的进行密码的交换, 交换后的密码使用AES来加密数据. 如果使用密钥登录的话,一般使用ECDSA进行数字签名.</li>
</ul>
<h2 id="协议组成"><a href="#协议组成" class="headerlink" title="协议组成"></a>协议组成</h2><p><img src="http://oiw1gzfww.bkt.clouddn.com/ssh-portocol.gif" alt=""><br>从上图中可以看出SSH主要有三部分组成: 传输层协议, 用户认证协议, 连接协议</p>
<h3 id="传输层协议-SSH-TRANS"><a href="#传输层协议-SSH-TRANS" class="headerlink" title="传输层协议[SSH-TRANS]"></a>传输层协议[SSH-TRANS]</h3><p>也叫:The Transport Layer Protocol, 提供了服务器认证，保密性及完整性。此外它有时还提供压缩功能。 SSH-TRANS通常运行在TCP/IP连接上，也可能用于其它可靠数据流上。 SSH-TRANS提供了强力的加密技术、密码主机认证及完整性保护。该协议中的认证基于主机，并且该协议不执行用户认证。更高层的用户认证协议可以设计为在此协议之上。</p>
<h3 id="用户认证协议-SSH-USERAUTH"><a href="#用户认证协议-SSH-USERAUTH" class="headerlink" title="用户认证协议[SSH-USERAUTH]"></a>用户认证协议[SSH-USERAUTH]</h3><p>也叫:The User Authentication Protocol,  用于向服务器提供客户端用户鉴别功能。它运行在传输层协议SSH-TRANS上面。当SSH-USERAUTH开始后，它从低层协议那里接收会话标识符(从第一次密钥交换中的交换哈希H). 会话标识符唯一标识此会话并且适用于标记以证明私钥的所有权。 SSH-USERAUTH也需要知道低层协议是否提供保密性保护。</p>
<h3 id="连接协议-SSH-CONNECT"><a href="#连接协议-SSH-CONNECT" class="headerlink" title="连接协议[SSH-CONNECT]"></a>连接协议[SSH-CONNECT]</h3><p>也叫: The Connection Protocol, 将多个加密隧道分成逻辑通道。它运行在用户认证协议上。它提供了交互式登录话路、远程命令执行、转发TCP/IP连接和转发X11连接。各种高层应用协议可以相对地独立于SSH基本体系之外，并依靠这个基本框架，通过连接协议使用SSH的安全机制。</p>
<h2 id="工作过程"><a href="#工作过程" class="headerlink" title="工作过程"></a>工作过程</h2><p><img src="http://oiw1gzfww.bkt.clouddn.com/ssh-auth.png" alt=""><br>这张图描述了ssh交换的整个过程: </p>
<ol>
<li>Client端向Server端发起SSH连接请求。</li>
<li>Server端向Client端发起版本协商。</li>
<li>协商结束后Server端发送Host Key公钥 Server Key公钥，随机数等信息。到这里所有通信是不加密的。</li>
<li>Client端返回确认信息，同时附带用公钥加密过的一个随机数，用于双方计算Session Key。</li>
<li>进入认证阶段。从此以后所有通信均加密。</li>
<li>认证成功后，进入交互阶段。</li>
</ol>
<p>针对这项阶段发生在协成的那一部分有一个简单的总结: 发生在传输层的: 版本协商和算法协商. 发生在用户认证层的: 用户认证. 发生在链接层的: 回话交互</p>
<h3 id="版本协商"><a href="#版本协商" class="headerlink" title="版本协商"></a>版本协商</h3><ol>
<li>服务器监听22端口，等待客户端连接。</li>
<li>客户端向服务器端发起TCP初始连接请求，TCP连接建立后，服务器向客户端发送第一个报文，包括版本标志字符串，格式为“SSH－&lt;主协议版本号&gt;.&lt;次协议版本号&gt;－&lt;软件版本号&gt;”，协议版本号由主版本号和次版本号组成，软件版本号主要是为调试使用。</li>
<li>客户端收到报文后，解析该数据包，如果服务器端的协议版本号比自己的低，且客户端能支持服务器端的低版本，就使用服务器端的低版本协议号，否则使用自己的协议版本号。</li>
<li>客户端回应服务器一个报文，包含了客户端决定使用的协议版本号。服务器比较客户端发来的版本号，决定是否能同客户端一起工作。</li>
<li>如果协商成功，则进入密钥和算法协商阶段，否则服务器端断开TCP连接。</li>
</ol>
<p>因为版本协商发生在为加密之前, 所以版本协商是明文的</p>
<h3 id="算法协商"><a href="#算法协商" class="headerlink" title="算法协商"></a>算法协商</h3><ol>
<li>服务器端和客户端分别发送算法协商报文给对端，报文中包含自己支持的公钥算法列表、加密算法列表、MAC(Message Authentication Code，消息验证码)算法列表、压缩算法列表等;</li>
<li>服务器端和客户端根据对端和本端支持的算法列表得出最终使用的算法。</li>
<li>服务器端和客户端利用ECDH交换算法、主机密钥对等参数，生成会话密钥和会话ID。</li>
</ol>
<p>通过以上步骤，服务器端和客户端就取得了相同的会话密钥和会话ID, 用于加密传输的数据, 到此链接加密完成。</p>
<h3 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h3><ol>
<li>客户端向服务器端发送认证请求，认证请求中包含用户名、认证方法、与该认证方法相关的内容（如：password认证时，内容为密码）。</li>
<li>服务器端对客户端进行认证，如果认证失败，则向客户端发送认证失败消息，其中包含可以再次认证的方法列表。</li>
<li>客户端从认证方法列表中选取一种认证方法再次进行认证。</li>
<li>该过程反复进行， 直到认证成功或者认证次数达到上限， 服务器关闭连接为止。</li>
</ol>
<p>用户认证是在加密过会进行的, 所以用于认证的数据是不会暴露的,通常而言SSH提供2认证方式:</p>
<ol>
<li>password认证：客户端向服务器发出 password认证请求，将用户名和密码加密后发送给服务器；服务器将该信息解密后得到用户名和密码的明文，与设备上保存的用户名和密码进行比较，并返回认证成功或失败的消息。</li>
<li>publickey 认证：采用数字签名的方法来认证客户端。目前，设备上可以利用RSA和 DSA两种公共密钥算法实现数字签名。客户端发送包含用户名、公共密钥和公共密钥算法的 publickey 认证请求给服务器端。服务器对公钥进行合法性检查，如果不合法，则直接发送失败消息；否则，服务器利用数字签名对客户端进行认证，并返回认证成功或失败的消息<br>SSH2.0还提供了 password-publickey 认证和 any 认证:</li>
<li>password-publickey 认证：指定该用户的认证方式为 password 和 publickey认证同时满足。客户端版本为 SSH1的用户只要通过其中一种认证即可登录；客户端版本为 SSH2的用户必须两种认证都通过才能登录。</li>
<li>any认证：指定该用户的认证方式可以是 password，也可以是 publickey。</li>
</ol>
<p>一般而言默认使用的any。<br>这张图描述了在加密过程上的认证:<br><img src="http://oiw1gzfww.bkt.clouddn.com/ssh-connection.png" alt=""></p>
<h3 id="会话交互"><a href="#会话交互" class="headerlink" title="会话交互"></a>会话交互</h3><p>会话请求阶段： </p>
<ol>
<li>服务器等待客户端的请求；</li>
<li>认证通过后，客户端向服务器发送会话请求；</li>
<li>服务器处理客户端的请求。请求被成功处理后， 服务器会向客户端回应 SSH_SMSG_SUCCESS包，SSH进入交互会话阶段；否则回应 SSH_SMSG_FAILURE包，表示服务器处理请求失败或者不能识别请求。</li>
</ol>
<p>交互会话阶段，在这个模式下，数据被双向传送:</p>
<ol>
<li>客户端将要执行的命令加密后传给服务器;</li>
<li>服务器接收到报文，解密后执行该命令,将执行的结果加密发还给客户端;</li>
<li>客户端将接收到的结果解密后显示到终端上.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SSH对于大多数人来说应该并不陌生, 无论你是开发还是测试还是运维, 只要你需要登录类Unix服务器都会用到, 他被用来提供链接的安全保障, 比如常见的客户端有命令行工具ssh, 以及周边的商业工具Xshell等。在这篇文章里我们不会教你如何使用xshell, 而是从协议层面全新的认识下ssh。&lt;br&gt;
    
    </summary>
    
      <category term="协议详解" scheme="https://blog.yumaojun.net/categories/%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
    
      <category term="ssh" scheme="https://blog.yumaojun.net/categories/%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/ssh/"/>
    
    
      <category term="ssh-jumphost" scheme="https://blog.yumaojun.net/tags/ssh-jumphost/"/>
    
  </entry>
  
  <entry>
    <title>跳板机系列(一)-架构与简介</title>
    <link href="https://blog.yumaojun.net/2017/02/15/go-ssh/"/>
    <id>https://blog.yumaojun.net/2017/02/15/go-ssh/</id>
    <published>2017-02-15T05:49:19.000Z</published>
    <updated>2017-02-22T15:50:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直参与JumpServer的开发, 也一直在想如何设计一个相对完美的跳板机, 跳板机的本质是ssh协议的反向代理(主要还是ssh, 至于rdp还没想过), 虽然也经常使用ssh(做运维的时候还专门就ssh学习过), 但也仅仅是ssh客户端的使用以及服务端的配置, 我觉得一个完美的跳板机应该是从协议层面解决这个问题。因此打算以Golang为开发语言(因为ssh库完善，websocket编写简单),开发一个有基本功能的跳板机。<br><a id="more"></a></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>这一系列的博客 包含很多篇, 主要目的是: 在之前的经验上, 把开发过程中涉及到的所有知识和感想记录下来(当然包含源码), 这一系列涉及如下文章, 由浅入深, 循序渐进的介绍开发过程中涉及到的各种知识:</p>
<ul>
<li><a href="/2017/02/15/go-ssh/" title="跳板机系列(一)-架构与简介">跳板机系列(一)-架构与简介</a></li>
<li><a href="/2017/02/16/ssh-protocol/" title="跳板机系列(二)-ssh协议原理简介">跳板机系列(二)-ssh协议原理简介</a></li>
<li><a href="/2017/02/22/ssh-protocol-go/" title="跳板机系列(三)-Golang中SSH客户端的实现">跳板机系列(三)-Golang中SSH客户端的实现</a>
</li>
</ul>
<h2 id="简单架构"><a href="#简单架构" class="headerlink" title="简单架构"></a>简单架构</h2><p>之前JumpServer的核心是按照简单的架构来开发的, 一个简单的架构其实已经有很多不错的demo或者产品了, 比如这个项目<a href="http://git.oschina.net/shibingli/webconsole" target="_blank" rel="external">webconsole</a>, 当然他不完整仅仅实现了web，至于命令行并没有实现, 而jumpserver这2个都实现了。<br>为什么称之为简单的架构, 因为他的核心思想就是: 就是模拟一个终端(web端的xterm这个js库就是干这个事儿的, 而命令行同样模拟一个终端就行了, 比如golang的ssh/terminal这个库就可以完成这个事儿),然后通过一个ssh agent访问后面的真实的服务器，起到一个代理转发的作用。<br><img src="http://oiw1gzfww.bkt.clouddn.com/jump-design-simple.png" alt=""></p>
<p>这种模式的缺陷主要体现在命令行终端上面, 因为此时终端后面接的就是ssh客户端, 因此这个终端是一个客户端和跳板机绑定在一起了, 用户只有先登录跳板机才能使用代理服务, 而这显然是不合理的,Jumpserver在此上进行了改进, 通过再添加一个ssh server监听, 实际上就是ssh-in-ssh。</p>
<h2 id="架构改进"><a href="#架构改进" class="headerlink" title="架构改进"></a>架构改进</h2><p>改进过后主要加入一个ssh的代理服务,统一代理层, 抽离客户端。<br><img src="http://oiw1gzfww.bkt.clouddn.com/jump-design-update.png" alt=""></p>
<h2 id="完美架构"><a href="#完美架构" class="headerlink" title="完美架构"></a>完美架构</h2><p>个人架构的能力还是很菜的, 对ssh协议的理解也不深, 当看到teleport这个开源产品的设计时, 完全被惊呆了。 这不就是我想要的架构嘛, 而且细节是做的那么的漂亮。<br><img src="http://gravitational.com/teleport/docs/img/everything.svg" alt=""><br>后期如果有时间的话, 打算写一个关于teleport源码解读的系列, 一点一个剖析这个完美架构的实现。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写这一个系列不容易, 这是一个开篇和规划，希望最后能完美的收尾，有一个不错的demo展示给大家。<br>现在看来teleport已经很完善了, 也符合我心目中的跳板机的样子, 等读完teleport源码过后, 看其是否完善, 扩展是否方便, 因此很有可能是完善teleport,而不是从头开始。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直参与JumpServer的开发, 也一直在想如何设计一个相对完美的跳板机, 跳板机的本质是ssh协议的反向代理(主要还是ssh, 至于rdp还没想过), 虽然也经常使用ssh(做运维的时候还专门就ssh学习过), 但也仅仅是ssh客户端的使用以及服务端的配置, 我觉得一个完美的跳板机应该是从协议层面解决这个问题。因此打算以Golang为开发语言(因为ssh库完善，websocket编写简单),开发一个有基本功能的跳板机。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Golang" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
      <category term="ssh-jumphost" scheme="https://blog.yumaojun.net/tags/ssh-jumphost/"/>
    
  </entry>
  
  <entry>
    <title>nodejs源加速</title>
    <link href="https://blog.yumaojun.net/2017/02/14/nodejs-accelerate/"/>
    <id>https://blog.yumaojun.net/2017/02/14/nodejs-accelerate/</id>
    <published>2017-02-14T04:50:33.000Z</published>
    <updated>2017-02-14T05:18:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前介绍过使用vscode搭建nodejs开发环境, 环境是搭建好了, 使用时有一个硬伤, 就是nodejs官方的源下载奇慢, 而一般js的项目依赖又多, 所以经常的结果就是: 慢得你啥都装不上(time out)。怎么解决喃？ 当然是换国内的源。<br><a id="more"></a><br>我仅使用过淘宝的加速源，效果不错，一直用着，下面做简单的介绍。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>淘宝NPM镜像官方是这样描述的: <strong>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</strong><br>关于更多的信息请查看:<a href="https://npm.taobao.org/" target="_blank" rel="external">淘宝NPM源官网</a></p>
<h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>从registry.npm.taobao.org安装所有模块. 当安装的时候发现安装的模块还没有同步过来, 淘宝NPM会自动在后台进行同步, 并且会让你从官方 NPM registry.npmjs.org 进行安装. 下次你再安装这个模块的时候, 就会直接从 淘宝 NPM 安装了.</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>临时使用的话, 可以通过registry参数来指定淘宝源地址，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm --registry=https://registry.npm.taobao.org xterm</div></pre></td></tr></table></figure></p>
<p>当然也可以添加命令别名,这样就不用每次都添加–registry了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">alias cnpm=&quot;npm --registry=https://registry.npm.taobao.org \</div><div class="line">--cache=$HOME/.npm/.cache/cnpm \</div><div class="line">--disturl=https://npm.taobao.org/dist \</div><div class="line">--userconfig=$HOME/.cnpmrc&quot;</div><div class="line"></div><div class="line"># Or alias it in .bashrc or .zshrc</div><div class="line">$ echo &apos;\n#alias for cnpm\nalias cnpm=&quot;npm --registry=https://registry.npm.taobao.org \</div><div class="line">  --cache=$HOME/.npm/.cache/cnpm \</div><div class="line">  --disturl=https://npm.taobao.org/dist \</div><div class="line">  --userconfig=$HOME/.cnpmrc&quot;&apos; &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc</div></pre></td></tr></table></figure></p>
<p>其实淘宝的源很稳定，同步频率也快，因此一般直接替换系统的npm也可以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前介绍过使用vscode搭建nodejs开发环境, 环境是搭建好了, 使用时有一个硬伤, 就是nodejs官方的源下载奇慢, 而一般js的项目依赖又多, 所以经常的结果就是: 慢得你啥都装不上(time out)。怎么解决喃？ 当然是换国内的源。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="JavaScript" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/JavaScript/"/>
    
    
      <category term="源加速" scheme="https://blog.yumaojun.net/tags/%E6%BA%90%E5%8A%A0%E9%80%9F/"/>
    
  </entry>
  
  <entry>
    <title>Python命令行开发神器-click</title>
    <link href="https://blog.yumaojun.net/2017/02/08/python-click/"/>
    <id>https://blog.yumaojun.net/2017/02/08/python-click/</id>
    <published>2017-02-08T05:29:35.000Z</published>
    <updated>2017-02-09T06:03:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前写过一篇博客介绍过如何写漂亮的命令行工具, 不过使用的是golang的cobra库, 整体而言效果和使用体验还是非常不错的, 不过今天看博客时发现了一个更不错的库，而且是Python的: Click,所以用起来应该更得心应手。 之前在开发openstack客户端时, 模仿openstack sdk写过CLI, 他也是对argparse库上做的封装, 但是使用起来也比较复杂, 简单看了下click的文档, 体验还是非常不错的。<br><a id="more"></a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>先说下click的出生, 因为他出生名门: Pocoo, Pocoo是一个团队，Pocoo出品必是精品,比如 Flask, Werkzeug, Jinja 2 , Pygments, Sphinx。冲着pocoo的品牌, 都应该多看一眼click。<br>click是一个用于快速构建命令行的python的第三方模块, 功能强大, 使用简单。我们都知道Python内置的Argparse模块，以前也经常用到, 当时觉得Argparse很不错, 因为没有对比(没有对比就没伤害), 看了下Click马上就觉得Argparse太繁琐了，Click相较于Argparse就好比requests对比urllib。<br>我们看看click官方文档上是怎么说明click的：</p>
<blockquote>
<p>Click是一个使用最少代码构建漂亮CLI的命令行界面创建工具包, 高度可配置,但是却开箱即用<br>他有3个特点：</p>
<ul>
<li>支持命令的任意嵌套</li>
<li>支持命令行帮助页面的自动生成</li>
<li>支持子命令运行时惰性加载</li>
</ul>
</blockquote>
<h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><p>构建CLI有2个要点: 命令和参数, 使用click时，@click.command()用户装饰命令, @click.option()和@click.argument()用于装饰参数, 比如下面就是一个经典的使用形式:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> click</div><div class="line"></div><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--count', default=1, help='Number of greetings.')</span></div><div class="line"><span class="meta">@click.option('--name', prompt='Your name',</span></div><div class="line">              help=<span class="string">'The person to greet.'</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(count, name)</span>:</span></div><div class="line">    <span class="string">"""Simple program that greets NAME for a total of COUNT times."""</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(count):</div><div class="line">        click.echo(<span class="string">'Hello %s!'</span> % name)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    hello()</div></pre></td></tr></table></figure></p>
<p>为了演示他更强大的功能, 我们可以模拟一个docker的命令行。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> click</div><div class="line"></div><div class="line"><span class="meta">@click.group()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">docker</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">@docker.group()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">volume</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""Manage volumes"""</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">@volume.command()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""Create a volume"""</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">@volume.command()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">inspect</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""isplay detailed information on one or more volumes"""</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">@volume.command()</span></div><div class="line"><span class="meta">@click.option('-f', '--filter', type=str, help="Provide filter values (e.g. 'dangling=true')")</span></div><div class="line"><span class="meta">@click.option('-q', '--quiet', is_flag=True, help='Only display volume names')</span></div><div class="line"><span class="meta">@click.option('--format', type=str, help='Pretty-print volumes using a Go template')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ls</span><span class="params">(filter, quiet, format)</span>:</span></div><div class="line">    <span class="string">"""List volumes"""</span></div><div class="line">    print(<span class="string">"%s, %s, %s"</span> % (filter, quiet, format))</div><div class="line"></div><div class="line"><span class="meta">@volume.command()</span></div><div class="line"><span class="meta">@click.option('-f', '--force', type=str, help='Force the removal of a running container (uses SIGKILL)')</span></div><div class="line"><span class="meta">@click.option('-l', '--link', type=str, help='Remove the specified link')</span></div><div class="line"><span class="meta">@click.option('-v', '--volume', type=str, help='Remove the volumes associated with the container')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rm</span><span class="params">(force, link, volume)</span>:</span></div><div class="line">    <span class="string">"""Remove one or more volumes"""</span></div><div class="line">    print(<span class="string">"%s, %s, %s"</span> % (force, link, volume))</div><div class="line"></div><div class="line"><span class="meta">@docker.group()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">network</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""Manage networks"""</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">@network.command()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""Create a network"""</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">@network.command()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""Connect a container to a network"""</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">@network.command()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ls</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""List networks"""</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">@network.command()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rm</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""Remove one or more networks"""</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    docker()</div></pre></td></tr></table></figure></p>
<p>最终效果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">➜  test python3 test.py</div><div class="line">Usage: test.py [OPTIONS] COMMAND [ARGS]...</div><div class="line"></div><div class="line">Options:</div><div class="line">  --help  Show this message and exit.</div><div class="line"></div><div class="line">Commands:</div><div class="line">  network  Manage networks</div><div class="line">  volume   Manage volumes</div><div class="line"></div><div class="line">➜  test python3 test.py network</div><div class="line">Usage: test.py network [OPTIONS] COMMAND [ARGS]...</div><div class="line"></div><div class="line">  Manage networks</div><div class="line"></div><div class="line">Options:</div><div class="line">  --help  Show this message and exit.</div><div class="line"></div><div class="line">Commands:</div><div class="line">  connect  Connect a container to a network</div><div class="line">  create   Create a network</div><div class="line">  ls       List networks</div><div class="line">  rm       Remove one or more networks</div><div class="line"></div><div class="line">➜  test python3 test.py volume</div><div class="line">Usage: test.py volume [OPTIONS] COMMAND [ARGS]...</div><div class="line"></div><div class="line">  Manage volumes</div><div class="line"></div><div class="line">Options:</div><div class="line">  --help  Show this message and exit.</div><div class="line"></div><div class="line">Commands:</div><div class="line">  create   Create a volume</div><div class="line">  inspect  isplay detailed information on one or more...</div><div class="line">  ls       List volumes</div><div class="line">  rm       Remove one or more volumes</div><div class="line"></div><div class="line">➜  test python3 test.py volume ls --help</div><div class="line">Usage: test.py volume ls [OPTIONS]</div><div class="line"></div><div class="line">  List volumes</div><div class="line"></div><div class="line">Options:</div><div class="line">  -f, --filter TEXT  Provide filter values (e.g. &apos;dangling=true&apos;)</div><div class="line">  -q, --quiet        Only display volume names</div><div class="line">  --format TEXT      Pretty-print volumes using a Go template</div><div class="line">  --help             Show this message and exit.</div><div class="line"></div><div class="line">➜  test python3 test.py volume rm --help</div><div class="line">Usage: test.py volume rm [OPTIONS]</div><div class="line"></div><div class="line">  Remove one or more volumes</div><div class="line"></div><div class="line">Options:</div><div class="line">  -f, --force TEXT   Force the removal of a running container (uses SIGKILL)</div><div class="line">  -l, --link TEXT    Remove the specified link</div><div class="line">  -v, --volume TEXT  Remove the volumes associated with the container</div><div class="line">  --help             Show this message and exit.</div></pre></td></tr></table></figure></p>
<h2 id="命令与组"><a href="#命令与组" class="headerlink" title="命令与组"></a>命令与组</h2><p>这是click中最重要的概念, 我们可以通过command和group装饰器实现一个无限嵌套的命令行工具, 其中command用户装饰命令, group用于将命令分组(类)<br>上面那个模块docker命令行就是分组的使用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> click</div><div class="line"></div><div class="line"><span class="meta">@click.group()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">docker</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">@docker.group()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">volume</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""Manage volumes"""</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">@docker.group()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">network</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""Manage networks"""</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">@network.command()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""Create a network"""</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    docker()</div></pre></td></tr></table></figure></p>
<h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><p>从命令行读取参数值，再将其传递给函数,读取的参数分为两类: 可选参数和必须参数，下面分别做介绍</p>
<h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p>使用@click.option装饰器完成可选参数的录入, 通过上面的栗子我们可以发现该装饰器有很多参数前面2个位置参数比如’-f’, ‘–force’用于描述参数名称, type指明参数等，option常用的设置参数如下：</p>
<ul>
<li>default: 设置命令行参数的默认值</li>
<li>help: 参数说明</li>
<li>type: 参数类型，可以是 string, int, float 等</li>
<li>prompt: 当在命令行中没有输入相应的参数时，会根据 prompt 提示用户输入</li>
<li>nargs: 指定命令行参数接收的值的个数<br>我们可以依然这些选项来完成我们很长常用的功能</li>
</ul>
<h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><p>经常我们需要为参数设置一些默认值, 使用default指定参数的默认值就能办到, 就这么简单<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> click</div><div class="line"></div><div class="line"><span class="meta">@click.group()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">docker</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">@docker.group()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">volume</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""Manage volumes"""</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">@docker.group()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">network</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""Manage networks"""</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">@network.command()</span></div><div class="line"><span class="meta">@click.option('-n', '--name', type=str, default='flat', help='The network name')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="string">"""Create a network"""</span></div><div class="line">    click.echo(<span class="string">'create network %s success'</span> % name)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    docker()</div></pre></td></tr></table></figure></p>
<p>运行结果:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">➜  test python3 test.py network --help</div><div class="line">Usage: test.py network [OPTIONS] COMMAND [ARGS]...</div><div class="line"></div><div class="line">  Manage networks</div><div class="line"></div><div class="line">Options:</div><div class="line">  --help  Show this message <span class="keyword">and</span> exit.</div><div class="line"></div><div class="line">Commands:</div><div class="line">  create  Create a network</div><div class="line">➜  test python3 test.py network create</div><div class="line">create network flat success</div></pre></td></tr></table></figure></p>
<h4 id="选择参数"><a href="#选择参数" class="headerlink" title="选择参数"></a>选择参数</h4><p>很多情况下, 我们也会给用户一些选择参数, 比如性别就只能选择(M/F), 因此我们应该提示用户输入正确的值,在这种情况下，我们可以通过 click.Choice() 来限定<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@user.command()</span></div><div class="line"><span class="meta">@click.option('-g', '--gender', type=click.Choice(['male', 'female']), help="The user's gender")</span></div><div class="line"><span class="meta">@click.help_option('-h', '--help')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(gender)</span>:</span></div><div class="line">    <span class="string">"""Create a user"""</span></div><div class="line">    <span class="keyword">if</span> gender <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">raise</span> click.BadOptionUsage(<span class="string">"miss gender choice!"</span>)</div><div class="line">    click.echo(<span class="string">"user's gender is %s"</span> % gender)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    docker()</div></pre></td></tr></table></figure></p>
<h4 id="多值参数"><a href="#多值参数" class="headerlink" title="多值参数"></a>多值参数</h4><p>有时，一个参数需要接收多个值, 比如我们算一个立方体的体积, 这时候我们就需求通过nargs指定 该参数接收多少个值, 比如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@cube.command()</span></div><div class="line"><span class="meta">@click.option('-p', '--profile', type=int, nargs=3 ,help="The cube Length, width and height")</span></div><div class="line"><span class="meta">@click.help_option('-h', '--help')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">volume</span><span class="params">(profile)</span>:</span></div><div class="line">    <span class="string">"""Compute cube's volume"""</span></div><div class="line">    <span class="keyword">if</span> profile <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">raise</span> click.BadOptionUsage(<span class="string">"miss profile!"</span>)</div><div class="line">    v = profile[<span class="number">0</span>] * profile[<span class="number">1</span>] * profile[<span class="number">2</span>]</div><div class="line">    click.echo(<span class="string">"the cube's volume is %s"</span> % v)</div></pre></td></tr></table></figure></p>
<h4 id="密码参数"><a href="#密码参数" class="headerlink" title="密码参数"></a>密码参数</h4><p>命令行我们常常有输入密码的需求，这个我们应该怎么用喃？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@user.command()</span></div><div class="line"><span class="meta">@click.option('-p', '--password', prompt=True, hide_input=True, confirmation_prompt=True)</span></div><div class="line"><span class="meta">@click.help_option('-h', '--help')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(password)</span>:</span></div><div class="line">    <span class="string">"""Create a user"""</span></div><div class="line">    click.echo(<span class="string">'Encrypting password to %s'</span> % password)</div></pre></td></tr></table></figure></p>
<p>这个看下效果:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  test python3 test.py user create</div><div class="line">Password:</div><div class="line">Repeat <span class="keyword">for</span> confirmation:</div><div class="line">Encrypting password to <span class="number">123</span></div></pre></td></tr></table></figure></p>
<h3 id="必选参数"><a href="#必选参数" class="headerlink" title="必选参数"></a>必选参数</h3><p>相较于可选参数的灵活性而言, 必须参数比较简单了。用@click.argument来添加固定参数。</p>
<h4 id="定参"><a href="#定参" class="headerlink" title="定参"></a>定参</h4><p>这里需要主要位置参数的顺序了。比如3个定参数 x y z<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@user.command()</span></div><div class="line"><span class="meta">@click.argument('x')</span></div><div class="line"><span class="meta">@click.argument('y')</span></div><div class="line"><span class="meta">@click.argument('z')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(x, y, z)</span>:</span></div><div class="line">    <span class="string">"""Create a user"""</span></div><div class="line">    click.echo(<span class="string">"%s, %s, %s"</span> % (x, y, z))</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">➜  test python3 test.py user create <span class="number">1</span></div><div class="line">Usage: test.py user create [OPTIONS] X Y Z</div><div class="line"></div><div class="line">Error: Missing argument <span class="string">"y"</span>.</div><div class="line">➜  test python3 test.py user create <span class="number">1</span> <span class="number">2</span></div><div class="line">Usage: test.py user create [OPTIONS] X Y Z</div><div class="line"></div><div class="line">Error: Missing argument <span class="string">"z"</span>.</div><div class="line">➜  test python3 test.py user create <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></div><div class="line"><span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></div></pre></td></tr></table></figure>
<h4 id="不定参"><a href="#不定参" class="headerlink" title="不定参"></a>不定参</h4><p>参数不定的情况也是常有的, 比如我们想将多个文件移到一个文件里面, src: file1 file2 file3 dir: file4。我们让nargs=-1就可以了, 他表示接收[:-1]的参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@user.command()</span></div><div class="line"><span class="meta">@click.argument('src', nargs=-1)</span></div><div class="line"><span class="meta">@click.argument('dst', nargs=1)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(src, dst)</span>:</span></div><div class="line">    <span class="string">"""Create a user"""</span></div><div class="line">    click.echo(<span class="string">"src: %s"</span> % <span class="string">' '</span>.join(list(src)))</div><div class="line">    click.echo(<span class="string">"dst: %s"</span> % dst)</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  test python3 test.py user create file1 file2 file3 file4</div><div class="line">src: file1 file2 file3</div><div class="line">dst: file4</div></pre></td></tr></table></figure>
<h2 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h2><p>click还有比较多的高级功能，比如分页和彩色打印, click文档写得比较好: <a href="http://click.pocoo.org/6/" target="_blank" rel="external">click官方文档</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>pocoo非常热衷于使用装饰器, 可以说他们对装饰器的使用简直出神入化, 在flask里面就可见一斑, 而前一篇才讲了装饰器, 这个click库里面对装饰器的使用也称得上典范, 源码很值得一读。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前写过一篇博客介绍过如何写漂亮的命令行工具, 不过使用的是golang的cobra库, 整体而言效果和使用体验还是非常不错的, 不过今天看博客时发现了一个更不错的库，而且是Python的: Click,所以用起来应该更得心应手。 之前在开发openstack客户端时, 模仿openstack sdk写过CLI, 他也是对argparse库上做的封装, 但是使用起来也比较复杂, 简单看了下click的文档, 体验还是非常不错的。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="click" scheme="https://blog.yumaojun.net/tags/click/"/>
    
  </entry>
  
  <entry>
    <title>Python进阶系列-装饰器</title>
    <link href="https://blog.yumaojun.net/2017/02/05/python-deractor/"/>
    <id>https://blog.yumaojun.net/2017/02/05/python-deractor/</id>
    <published>2017-02-05T06:59:14.000Z</published>
    <updated>2017-02-07T16:07:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>装饰器是一个非常重要的概念，可能算是进阶的一大门槛。装饰器允许向一个现有的对象添加新的功能，同时又不改变其结构,是一种功能增强的模式。在面向对象(OOP)的设计模式中，decorator被称为装饰模式。OOP的装饰模式需要通过继承和组合来实现，而Python除了能支持OOP的decorator外，直接从语法层次支持decorator。Python的decorator可以用函数实现，也可以用类实现。接下来将全面介绍关于Python装饰器相关的知识。<br><a id="more"></a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>装饰器本质上是一个Python函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能，装饰器的返回值也是一个函数对象。它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。<br>概括的讲，装饰器的作用就是为已经存在的函数或对象添加额外的功能。</p>
<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>在Python里，一切皆对象, 函数更是头等对象，函数对象可以被赋值给变量，所以，通过变量也能调用该函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line"><span class="meta">... </span>    print(<span class="string">'2017-02-02'</span>)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = now</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f()</div><div class="line"><span class="number">2017</span><span class="number">-02</span><span class="number">-02</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.__name__</div><div class="line"><span class="string">'now'</span></div></pre></td></tr></table></figure></p>
<p>现在，假设我们要增强now()函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改now()函数的定义,该怎么做喃？<br>最简单的方式就是动态替换now，并保持函数签名不变<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'2017-02-02'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(func)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></div><div class="line">        print(<span class="string">"[DEBUG]: enter &#123;&#125;()"</span>.format(func.__name__))</div><div class="line">        <span class="keyword">return</span> func()</div><div class="line"></div><div class="line">    wrapper.__name__ = func.__name__</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line">now = debug(now)</div><div class="line"></div><div class="line">now()</div></pre></td></tr></table></figure></p>
<p>为了方便python在语法层面就已经支持了装饰器(python &gt; 2.4),@语法糖实际上就等于<code>now = debug(now)</code>, 因此实际上应该这样写<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(func)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></div><div class="line">        print(<span class="string">"[DEBUG]: enter &#123;&#125;()"</span>.format(func.__name__))</div><div class="line">        <span class="keyword">return</span> func()</div><div class="line"></div><div class="line">    wrapper.__name__ = func.__name__</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@debug</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'2017-02-02'</span>)</div><div class="line"></div><div class="line">now()</div></pre></td></tr></table></figure></p>
<p>这个dubug装饰器有个巨大的缺陷: 我们只能装饰不带参数的函数。实际上函数的形式各种各样，如何才能一个装饰器适配各种函数喃？python提供的可变参数可以很好的解决这个问题。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(func)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        print(<span class="string">"[DEBUG]: enter &#123;&#125;()"</span>.format(func.__name__))</div><div class="line">        <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line"></div><div class="line">    wrapper.__name__ = func.__name__</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@debug</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'2017-02-02'</span>)</div><div class="line"></div><div class="line"><span class="meta">@debug</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></div><div class="line">    print(<span class="string">"hello %s"</span> % name)</div><div class="line"></div><div class="line">now()</div><div class="line">hello(<span class="string">"Bob"</span>)</div></pre></td></tr></table></figure></p>
<p>如此一个基础的装饰器就写完了，以下将介绍各式各样的装饰器。</p>
<h2 id="函数式装饰器"><a href="#函数式装饰器" class="headerlink" title="函数式装饰器"></a>函数式装饰器</h2><p><em>装饰器本身是一个函数</em></p>
<h3 id="装饰函数"><a href="#装饰函数" class="headerlink" title="装饰函数"></a>装饰函数</h3><p><em>被装饰的对象是一个函数, wrapper是对函数的增强</em></p>
<h4 id="基础-装饰器无参数"><a href="#基础-装饰器无参数" class="headerlink" title="基础-装饰器无参数"></a>基础-装饰器无参数</h4><p>这是最基础的一种装饰器, 在引子中已经有栗子了。</p>
<h4 id="高级-装饰器有参数"><a href="#高级-装饰器有参数" class="headerlink" title="高级-装饰器有参数"></a>高级-装饰器有参数</h4><p>带参数的装饰器和类装饰器属于进阶的内容。在理解这些装饰器之前，最好对函数的闭包和装饰器的接口约定有一定了解。关于python中的闭包概念我在下一篇中会单独介绍,这里你只需要知道闭包是一个携带状态的函数即可。<br>实际上就是返回装饰器的一个函数，但是这个装饰器携带外部变量(这就是闭包)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(level=<span class="string">'INFO'</span>)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            print(<span class="string">"[&#123;&#125;]: enter &#123;&#125;()"</span>.format(level, func.__name__))</div><div class="line">            <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line">        wrapper.__name__ = func.__name__</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div><div class="line"></div><div class="line"><span class="meta">@debug()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'2017-02-02'</span>)</div><div class="line"></div><div class="line"><span class="meta">@debug("DEBUG")</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></div><div class="line">    print(<span class="string">"hello %s"</span> % name)</div><div class="line"></div><div class="line">now()</div><div class="line">hello(<span class="string">"Bob"</span>)</div></pre></td></tr></table></figure></p>
<h3 id="装饰类"><a href="#装饰类" class="headerlink" title="装饰类"></a>装饰类</h3><p><strong>被装饰的对象是一个类,wrapper是对类的增强,所以装饰器的变化并不大,甚至可以沿用</strong></p>
<h4 id="基础-装饰器无参数-1"><a href="#基础-装饰器无参数-1" class="headerlink" title="基础-装饰器无参数"></a>基础-装饰器无参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cls)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        print(<span class="string">"[DEBUG]: enter &#123;&#125; class"</span>.format(cls.__name__))</div><div class="line">        <span class="keyword">return</span> cls(*args, **kwargs)</div><div class="line">    wrapper.__name__ = cls.__name_</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@debug</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></div><div class="line">        self.value = value</div><div class="line"></div><div class="line"><span class="meta">@debug</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></div><div class="line">    print(<span class="string">"hello %s"</span> % name)</div><div class="line"></div><div class="line">h = Hello(<span class="string">"Bob"</span>)</div><div class="line">hello(<span class="string">"Bob"</span>)</div></pre></td></tr></table></figure>
<h4 id="高级-装饰器有参数-1"><a href="#高级-装饰器有参数-1" class="headerlink" title="高级-装饰器有参数"></a>高级-装饰器有参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(level=<span class="string">'INFO'</span>)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            print(<span class="string">"[&#123;&#125;]: enter &#123;&#125; class"</span>.format(level, cls.__name__))</div><div class="line">            <span class="keyword">return</span> cls(*args, **kwargs)</div><div class="line"></div><div class="line">        wrapper.__name__ = cls.__name__</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@debug()</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></div><div class="line">        self.value = value</div><div class="line"></div><div class="line"><span class="meta">@debug("ERROR")</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></div><div class="line">    print(<span class="string">"hello %s"</span> % name)</div><div class="line"></div><div class="line">h = Hello(<span class="string">"Bob"</span>)</div><div class="line">hello(<span class="string">"Bob"</span>)</div></pre></td></tr></table></figure>
<h2 id="类式装饰器"><a href="#类式装饰器" class="headerlink" title="类式装饰器"></a>类式装饰器</h2><p>装饰器函数其实是这样一个接口约束，它必须接受一个<code>callable</code>对象作为参数，然后返回一个<code>callable</code>对象。在Python中一般<code>callable</code>对象都是函数，但也有例外。只要某个对象重载了 <strong>call</strong> () 方法，那么这个对象就是<code>callable</code>的。<br>我们可以让类的构造函数 <strong>init</strong> () 接受一个函数，然后重载 <strong>call</strong> () 并返回一个函数，也可以达到装饰器函数的效果。</p>
<h3 id="装饰函数和类"><a href="#装饰函数和类" class="headerlink" title="装饰函数和类"></a>装饰函数和类</h3><p><em>被装饰的对象是一个函数或是一个类，其实并没有本质上的差别，因此这里合并给出栗子</em></p>
<h4 id="装饰器无参数"><a href="#装饰器无参数" class="headerlink" title="装饰器无参数"></a>装饰器无参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">debug</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></div><div class="line">        self.func = func</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">        print(<span class="string">"[DEBUG]: enter function &#123;func&#125;()"</span>.format(func=self.func.__name__))</div><div class="line">        <span class="keyword">return</span> self.func(*args, **kwargs)</div><div class="line"></div><div class="line"><span class="meta">@debug</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></div><div class="line">        self.value = value</div><div class="line"></div><div class="line"><span class="meta">@debug</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></div><div class="line">    print(<span class="string">"hello %s"</span> % name)</div><div class="line"></div><div class="line">h = Hello(<span class="string">"Bob"</span>)</div><div class="line">hello(<span class="string">"Bob"</span>)</div></pre></td></tr></table></figure>
<h4 id="装饰器有参数"><a href="#装饰器有参数" class="headerlink" title="装饰器有参数"></a>装饰器有参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">debug</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, level=<span class="string">'INFO'</span>)</span>:</span></div><div class="line">        self._level = level</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            print(<span class="string">"[&#123;&#125;]: enter function &#123;&#125;()"</span>.format(self._level ,func.__name__))</div><div class="line">            <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@debug()</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name = name</div><div class="line"></div><div class="line"><span class="meta">@debug("ERROR")</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></div><div class="line">    print(<span class="string">"hello %s"</span> % name)</div><div class="line"></div><div class="line">h = Hello(<span class="string">"Bob"</span>)</div><div class="line">hello(<span class="string">"Bob"</span>)</div></pre></td></tr></table></figure>
<h2 id="内置装饰器"><a href="#内置装饰器" class="headerlink" title="内置装饰器"></a>内置装饰器</h2><p>内置的装饰器和普通的装饰器原理是一样的，只不过返回的不是函数，而是类对象，所以更难理解一些</p>
<h3 id="propert"><a href="#propert" class="headerlink" title="propert"></a>propert</h3><p>我们先看看property到底是啥,以下是property类的<code>doc string</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">property</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    property(fget=None, fset=None, fdel=None, doc=None) -&gt; property attribute</div><div class="line">    </div><div class="line">    fget is a function to be used for getting an attribute value, and likewise</div><div class="line">    fset is a function for setting, and fdel a function for del'ing, an</div><div class="line">    attribute.  Typical use is to define a managed attribute x:</div><div class="line">    </div><div class="line">    class C(object):</div><div class="line">        def getx(self): return self._x</div><div class="line">        def setx(self, value): self._x = value</div><div class="line">        def delx(self): del self._x</div><div class="line">        x = property(getx, setx, delx, "I'm the 'x' property.")</div><div class="line">    </div><div class="line">    Decorators make defining new properties or modifying existing ones easy:</div><div class="line">    </div><div class="line">    class C(object):</div><div class="line">        @property</div><div class="line">        def x(self):</div><div class="line">            "I am the 'x' property."</div><div class="line">            return self._x</div><div class="line">        @x.setter</div><div class="line">        def x(self, value):</div><div class="line">            self._x = value</div><div class="line">        @x.deleter</div><div class="line">        def x(self):</div><div class="line">            del self._x</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fget=None, fset=None, fdel=None, doc=None)</span>:</span> <span class="comment"># known special case of property.__init__</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    ...</div></pre></td></tr></table></figure></p>
<p>实际上property装饰器帮我们完成了<code>x = property(getx, setx, delx, &quot;I&#39;m the &#39;x&#39; property.&quot;)</code>这个动作，而且返回的是一个property对象。</p>
<h3 id="staticmethod"><a href="#staticmethod" class="headerlink" title="staticmethod"></a>staticmethod</h3><p>staticmethod传入一个函数返回一个staticmethod的对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">staticmethod</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    staticmethod(function) -&gt; method</div><div class="line">    </div><div class="line">    Convert a function to be a static method.</div><div class="line">    </div><div class="line">    A static method does not receive an implicit first argument.</div><div class="line">    To declare a static method, use this idiom:</div><div class="line">    </div><div class="line">         class C:</div><div class="line">              def f(arg1, arg2, ...): ...</div><div class="line">              f = staticmethod(f)</div><div class="line">    </div><div class="line">    It can be called either on the class (e.g. C.f()) or on an instance</div><div class="line">    (e.g. C().f()).  The instance is ignored except for its class.</div><div class="line">    </div><div class="line">    Static methods in Python are similar to those found in Java or C++.</div><div class="line">    For a more advanced concept, see the classmethod builtin.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, function)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    ...</div></pre></td></tr></table></figure></p>
<h3 id="classmethod"><a href="#classmethod" class="headerlink" title="classmethod"></a>classmethod</h3><p>同理classmethod传入一个函数返回一个classmethod对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">classmethod</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    classmethod(function) -&gt; method</div><div class="line">    </div><div class="line">    Convert a function to be a class method.</div><div class="line">    </div><div class="line">    A class method receives the class as implicit first argument,</div><div class="line">    just like an instance method receives the instance.</div><div class="line">    To declare a class method, use this idiom:</div><div class="line">    </div><div class="line">      class C:</div><div class="line">          def f(cls, arg1, arg2, ...): ...</div><div class="line">          f = classmethod(f)</div><div class="line">    </div><div class="line">    It can be called either on the class (e.g. C.f()) or on an instance</div><div class="line">    (e.g. C().f()).  The instance is ignored except for its class.</div><div class="line">    If a class method is called for a derived class, the derived class</div><div class="line">    object is passed as the implied first argument.</div><div class="line">    </div><div class="line">    Class methods are different than C++ or Java static methods.</div><div class="line">    If you want those, see the staticmethod builtin.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, function)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line">    </div><div class="line">    ...</div></pre></td></tr></table></figure></p>
<h2 id="需要注意的问题"><a href="#需要注意的问题" class="headerlink" title="需要注意的问题"></a>需要注意的问题</h2><p>装饰器可以让你代码更加优雅，减少重复，但也不全是优点，也会带来一些问题。</p>
<h3 id="位置错误"><a href="#位置错误" class="headerlink" title="位置错误"></a>位置错误</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">html_tags</span><span class="params">(tag_name)</span>:</span></div><div class="line">    print(<span class="string">'begin outer function.'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func)</span>:</span></div><div class="line">        print(<span class="string">"begin of inner wrapper function."</span>)</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            content = func(*args, **kwargs)</div><div class="line">            print(<span class="string">"&lt;&#123;tag&#125;&gt;&#123;content&#125;&lt;/&#123;tag&#125;&gt;"</span>.format(tag=tag_name, content=content))</div><div class="line">            print(<span class="string">'end of inner wrapper function.'</span>)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line">    print(<span class="string">'end of outer function'</span>)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@html_tags('b')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name=<span class="string">'Toby'</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'Hello &#123;&#125;!'</span>.format(name)</div><div class="line"></div><div class="line"></div><div class="line">hello()</div><div class="line">hello()</div></pre></td></tr></table></figure>
<p>在装饰器中我在各个可能的位置都加上了 print 语句，用于记录被调用的情况。你知道他们最后打印出来的顺序吗？如果你心里没底，那么最好不要在装饰器函数之外添加逻辑功能，否则这个装饰器就不受你控制了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">begin outer function.</div><div class="line">end of outer function</div><div class="line">begin of inner wrapper function.</div><div class="line">&lt;b&gt;Hello Toby!&lt;/b&gt;</div><div class="line">end of inner wrapper function.</div><div class="line">&lt;b&gt;Hello Toby!&lt;/b&gt;</div><div class="line">end of inner wrapper function.</div></pre></td></tr></table></figure></p>
<h3 id="函数签名和文档"><a href="#函数签名和文档" class="headerlink" title="函数签名和文档"></a>函数签名和文档</h3><p>使用装饰器后实际上函数的前面和文档都会被替换成wrapper的，虽然我们可以简单处理过来,但是这并不是完美的解决之道<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> inspect</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(level=<span class="string">'INFO'</span>)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            print(<span class="string">"[&#123;&#125;]: enter &#123;&#125; class"</span>.format(level, cls.__name__))</div><div class="line">            <span class="keyword">return</span> cls(*args, **kwargs)</div><div class="line"></div><div class="line">        wrapper.__name__ = cls.__name__</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@debug()</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></div><div class="line">        self.value = value</div><div class="line"></div><div class="line"><span class="meta">@debug("ERROR")</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></div><div class="line">    print(<span class="string">"hello %s"</span> % name)</div><div class="line"></div><div class="line">h = Hello(<span class="string">"Bob"</span>)</div><div class="line">hello(<span class="string">"Bob"</span>)</div><div class="line">print(Hello.__name__)</div><div class="line">print(hello.__name__)</div><div class="line"></div><div class="line">print(inspect.getsource(Hello))</div><div class="line">print(inspect.getsource(hello))</div></pre></td></tr></table></figure></p>
<h3 id="staticmethod和classmethod不能再次装饰"><a href="#staticmethod和classmethod不能再次装饰" class="headerlink" title="staticmethod和classmethod不能再次装饰"></a>staticmethod和classmethod不能再次装饰</h3><p>当你想把装饰器用在一个静态方法或者类方法时，不好意思，报错了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(level=<span class="string">'INFO'</span>)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            print(<span class="string">"[&#123;&#125;]: enter &#123;&#125; class"</span>.format(level, cls.__name__))</div><div class="line">            <span class="keyword">return</span> cls(*args, **kwargs)</div><div class="line"></div><div class="line">        wrapper.__name__ = cls.__name__</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, model)</span>:</span></div><div class="line">        self.model = model</div><div class="line"></div><div class="line"><span class="meta">    @debug  # 装饰实例方法，OK</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"&#123;&#125; is running!"</span>.format(self.model))</div><div class="line"></div><div class="line"><span class="meta">    @debug  # 装饰静态方法，Failed</span></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_model_for</span><span class="params">(obj)</span>:</span></div><div class="line">        <span class="keyword">if</span> isinstance(obj, Car):</div><div class="line">            print(<span class="string">"The model of your car is &#123;&#125;"</span>.format(obj.model))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">"&#123;&#125; is not a car!"</span>.format(obj))</div><div class="line"></div><div class="line"></div><div class="line">car = Car(<span class="string">'six'</span>)</div><div class="line">car.check_model_for(car)</div></pre></td></tr></table></figure></p>
<p>前面已经解释了@staticmethod这个装饰器，其实它返回的并不是一个<code>callable</code>对象，而是一个<code>staticmethod</code>对象，那么它是不符合装饰器要求的（比如传入一个<code>callable</code>对象），你自然不能在它之上再加别的装饰器。要解决这个问题很简单，只要把你的装饰器放在@staticmethod之前就好了，因为你的装饰器返回的还是一个正常的函数，然后再加上一个@staticmethod是不会出问题的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(level=<span class="string">'INFO'</span>)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            print(<span class="string">"[&#123;&#125;]: enter &#123;&#125; class"</span>.format(level, cls.__name__))</div><div class="line">            <span class="keyword">return</span> cls(*args, **kwargs)</div><div class="line"></div><div class="line">        wrapper.__name__ = cls.__name__</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, model)</span>:</span></div><div class="line">        self.model = model</div><div class="line"></div><div class="line"><span class="meta">    @debug()  # 装饰实例方法，OK</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"&#123;&#125; is running!"</span>.format(self.model))</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line"><span class="meta">    @debug()  # 静态装饰器放到最后就ok了</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_model_for</span><span class="params">(obj)</span>:</span></div><div class="line">        <span class="keyword">if</span> isinstance(obj, Car):</div><div class="line">            print(<span class="string">"The model of your car is &#123;&#125;"</span>.format(obj.model))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">"&#123;&#125; is not a car!"</span>.format(obj))</div><div class="line"></div><div class="line"></div><div class="line">car = Car(<span class="string">'six'</span>)</div><div class="line">car.check_model_for(car)</div></pre></td></tr></table></figure></p>
<h2 id="利用第三方库来写装饰器"><a href="#利用第三方库来写装饰器" class="headerlink" title="利用第三方库来写装饰器"></a>利用第三方库来写装饰器</h2><p>嵌套的装饰函数不太直观，我们可以使用第三方包类改进这样的情况，让装饰器函数可读性更好。</p>
<h3 id="decorator"><a href="#decorator" class="headerlink" title="decorator"></a>decorator</h3><p>decorator.py是一个非常简单的装饰器加强包。你可以很直观的先定义包装函数wrapper() ，再使用decorate(func, wrapper)方法就可以完成一个装饰器。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@decorator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(func, *args, **kwargs)</span>:</span></div><div class="line">    print(<span class="string">"[DEBUG] &#123;&#125;: enter &#123;&#125;()"</span>.format(datetime.now(), func.__name__))</div><div class="line">    <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line"></div><div class="line"><span class="meta">@debug</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="string">"""test"""</span></div><div class="line">    print(<span class="string">"hello %s"</span> % name)</div><div class="line"></div><div class="line"><span class="meta">@debug</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name = name</div><div class="line"></div><div class="line">hello(<span class="string">"Bob"</span>)</div><div class="line"></div><div class="line">print(inspect.getsource(hello))</div><div class="line">print(hello.__name__)</div></pre></td></tr></table></figure></p>
<p>decorator比较简陋, 要装饰类和带参数的装饰就不能很好支持了。</p>
<h3 id="wrapt"><a href="#wrapt" class="headerlink" title="wrapt"></a>wrapt</h3><p>wrapt是一个功能非常完善的包，用于实现各种你想到或者你没想到的装饰器。使用 wrapt 实现的装饰器你不需要担心之前 inspect 中遇到的所有问题，因为它都帮你处理了，甚至 inspect.getsource ( func ) 也准确无误<br>更全面的文档可以参考<a href="http://wrapt.readthedocs.io/en/latest/decorators.html#decorating-classes" target="_blank" rel="external">wrapt官方文档</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> wrapt</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(level=<span class="string">'INFO'</span>)</span>:</span></div><div class="line"><span class="meta">    @wrapt.decorator</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(wrapped, instance, args, kwargs)</span>:</span></div><div class="line">        print(<span class="string">"[&#123;&#125;]: &#123;&#125; message"</span>.format(level, datetime.now()))</div><div class="line">        <span class="keyword">return</span> wrapped(*args, **kwargs)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line"><span class="meta">    @debug()</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">function_im</span><span class="params">(self, arg1, arg2)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">    @debug("DEBUG")</span></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">function_cm</span><span class="params">(cls, arg1, arg2)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">    @debug("ERROR")</span></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">function_sm</span><span class="params">(arg1, arg2)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">@debug()</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name = name</div><div class="line"><span class="meta">@debug()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></div><div class="line">    print(<span class="string">"hello %s"</span> % name)</div><div class="line"></div><div class="line"></div><div class="line">c = Class()</div><div class="line"></div><div class="line">c.function_im(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line">Class.function_im(c, <span class="number">1</span>, <span class="number">2</span>)</div><div class="line">Class.function_cm(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line">Class.function_sm(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"></div><div class="line">h = Hello(<span class="string">"Bob"</span>)</div><div class="line">hello(<span class="string">"Bob"</span>)</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>装饰器的理念是对原函数、对象的加强，相当于重新封装，所以一般装饰器函数都被命名为wrapper() ，意义在于包装。函数只有在被调用时才会发挥其作用。比如@debug 装饰器可以在函数执行时额外输出日志， @cache装饰过的函数可以缓存计算结果等等。<br>最后避免重复造轮子推荐使用wrapt，除非wrapt真不能满足你的特性需求。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;装饰器是一个非常重要的概念，可能算是进阶的一大门槛。装饰器允许向一个现有的对象添加新的功能，同时又不改变其结构,是一种功能增强的模式。在面向对象(OOP)的设计模式中，decorator被称为装饰模式。OOP的装饰模式需要通过继承和组合来实现，而Python除了能支持OOP的decorator外，直接从语法层次支持decorator。Python的decorator可以用函数实现，也可以用类实现。接下来将全面介绍关于Python装饰器相关的知识。&lt;br&gt;
    
    </summary>
    
      <category term="开发语言" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="https://blog.yumaojun.net/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="deractor" scheme="https://blog.yumaojun.net/tags/deractor/"/>
    
  </entry>
  
</feed>
